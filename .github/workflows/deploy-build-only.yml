name: Deploy Build Directory to GitHub Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main", "master"]
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  # Environment variables for deployment-time injection
  CLIENT_PROTOCOL_VERSION: "1.0.0"
  SERVER_PROTOCOL_VERSION: "1.0.0"
  BUILD_ENVIRONMENT: "production"
  DEPLOYMENT_TIMESTAMP: ${{ github.run_number }}

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
      
      - name: Install PowerShell Core
        run: |
          # Install PowerShell Core on Ubuntu
          wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell
          pwsh --version
      
      - name: Setup Emscripten SDK
        run: |
          # Clone and setup Emscripten SDK
          if [ ! -d "emsdk" ]; then
            git clone https://github.com/emscripten-core/emsdk.git
          fi
          cd emsdk
          ./emsdk install latest
          ./emsdk activate latest
          source ./emsdk_env.sh
          cd ..
          echo "Emscripten version:"
          emcc --version
          echo "EMSDK_ROOT=$PWD/emsdk" >> $GITHUB_ENV
          echo "PATH=$PWD/emsdk:$PATH" >> $GITHUB_ENV
      
      - name: Generate balance data
        run: npm run balance:gen
        
      - name: Build WASM modules
        run: |
          # Source Emscripten environment and build all WASM modules
          source ./emsdk/emsdk_env.sh
          npm run wasm:build:all
          echo "WASM files built:"
          ls -la *.wasm || echo "No WASM files in root"
          ls -la dist/wasm/ || echo "No WASM files in dist/wasm"
      
      - name: Build project
        run: |
          # Build the complete project
          npm run build:all
          echo "Build completed. Dist folder contents:"
          ls -la dist/ || echo "No dist folder found"
      
      - name: Validate Protocol Versions
        run: |
          echo "üîç Validating protocol version compatibility..."
          
          # Check if client and server protocol versions match
          if [ "$CLIENT_PROTOCOL_VERSION" != "$SERVER_PROTOCOL_VERSION" ]; then
            echo "‚ùå Protocol version mismatch!"
            echo "   Client version: $CLIENT_PROTOCOL_VERSION"
            echo "   Server version: $SERVER_PROTOCOL_VERSION"
            echo "   Build failed due to incompatible protocol versions."
            exit 1
          else
            echo "‚úÖ Protocol versions match: $CLIENT_PROTOCOL_VERSION"
          fi
          
          # Additional validation: check if protocol version is defined in source code
          if grep -r "protocolVersion.*4" src/ > /dev/null; then
            echo "‚úÖ MQTT protocol version 4 found in source code"
          else
            echo "‚ö†Ô∏è  MQTT protocol version not found in source code"
          fi
      
      - name: Prepare Build Directory
        run: |
          echo "üì¶ Preparing build directory for deployment..."
          
          # Create build directory if it doesn't exist
          mkdir -p build
          
          # Copy dist contents to build
          if [ -d "dist" ]; then
            cp -r dist/* build/
            echo "‚úÖ Copied dist/ contents to build/"
          else
            echo "‚ùå No dist/ directory found"
            exit 1
          fi
          
          # Copy essential files to build root
          cp index.html build/ 2>/dev/null || echo "No root index.html found"
          cp favicon.ico build/ 2>/dev/null || echo "No favicon.ico found"
          cp site.js build/ 2>/dev/null || echo "No site.js found"
          
          # Copy WASM files to build root
          cp *.wasm build/ 2>/dev/null || echo "No WASM files in root"
          
          echo "üìÅ Build directory contents:"
          ls -la build/
      
      - name: Inject Environment Variables
        run: |
          echo "üîß Injecting environment variables into build files..."
          
          # Find all HTML files in build directory
          find build -name "*.html" -type f | while read file; do
            echo "Processing $file..."
            
            # Inject environment variables into HTML files
            sed -i "s/__CLIENT_PROTOCOL_VERSION__/$CLIENT_PROTOCOL_VERSION/g" "$file"
            sed -i "s/__SERVER_PROTOCOL_VERSION__/$SERVER_PROTOCOL_VERSION/g" "$file"
            sed -i "s/__BUILD_ENVIRONMENT__/$BUILD_ENVIRONMENT/g" "$file"
            sed -i "s/__DEPLOYMENT_TIMESTAMP__/$DEPLOYMENT_TIMESTAMP/g" "$file"
            sed -i "s/__BUILD_TIME__/$(date -u +%Y-%m-%dT%H:%M:%SZ)/g" "$file"
          done
          
          # Find all JS files in build directory
          find build -name "*.js" -type f | while read file; do
            echo "Processing $file..."
            
            # Inject environment variables into JS files
            sed -i "s/__CLIENT_PROTOCOL_VERSION__/$CLIENT_PROTOCOL_VERSION/g" "$file"
            sed -i "s/__SERVER_PROTOCOL_VERSION__/$SERVER_PROTOCOL_VERSION/g" "$file"
            sed -i "s/__BUILD_ENVIRONMENT__/$BUILD_ENVIRONMENT/g" "$file"
            sed -i "s/__DEPLOYMENT_TIMESTAMP__/$DEPLOYMENT_TIMESTAMP/g" "$file"
            sed -i "s/__BUILD_TIME__/$(date -u +%Y-%m-%dT%H:%M:%SZ)/g" "$file"
          done
          
          echo "‚úÖ Environment variables injected successfully"
      
      - name: Create Build Metadata
        run: |
          echo "üìã Creating build metadata..."
          
          # Create build metadata file
          cat > build/build-info.json << EOF
          {
            "buildTime": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "version": "$CLIENT_PROTOCOL_VERSION",
            "environment": "$BUILD_ENVIRONMENT",
            "deploymentTimestamp": "$DEPLOYMENT_TIMESTAMP",
            "clientProtocolVersion": "$CLIENT_PROTOCOL_VERSION",
            "serverProtocolVersion": "$SERVER_PROTOCOL_VERSION",
            "gitCommit": "${{ github.sha }}",
            "gitRef": "${{ github.ref_name }}",
            "workflowRun": "${{ github.run_number }}"
          }
          EOF
          
          # Also inject as window.__BUILD__ in HTML files
          find build -name "*.html" -type f | while read file; do
            echo "Injecting build metadata into $file..."
            
            # Create the build script
            BUILD_SCRIPT='<script>window.__BUILD__ = {
              "buildTime": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
              "version": "'$CLIENT_PROTOCOL_VERSION'",
              "environment": "'$BUILD_ENVIRONMENT'",
              "deploymentTimestamp": "'$DEPLOYMENT_TIMESTAMP'",
              "clientProtocolVersion": "'$CLIENT_PROTOCOL_VERSION'",
              "serverProtocolVersion": "'$SERVER_PROTOCOL_VERSION'",
              "gitCommit": "'${{ github.sha }}'",
              "gitRef": "'${{ github.ref_name }}'",
              "workflowRun": "'${{ github.run_number }}'"
            };</script>'
            
            # Inject before closing head tag
            if grep -q "</head>" "$file"; then
              sed -i "s|</head>|  $BUILD_SCRIPT\n</head>|" "$file"
            else
              # Fallback: add at the beginning
              echo "$BUILD_SCRIPT" > temp_file
              cat "$file" >> temp_file
              mv temp_file "$file"
            fi
          done
          
          echo "‚úÖ Build metadata created and injected"
      
      - name: Validate Build Directory
        run: |
          echo "üîç Validating build directory structure..."
          
          # Check essential files
          test -f build/index.html && echo "‚úÖ build/index.html exists" || echo "‚ùå build/index.html missing"
          test -f build/game.wasm && echo "‚úÖ build/game.wasm exists" || echo "‚ùå build/game.wasm missing"
          test -f build/game-host.wasm && echo "‚úÖ build/game-host.wasm exists" || echo "‚ùå build/game-host.wasm missing"
          test -f build/favicon.ico && echo "‚úÖ build/favicon.ico exists" || echo "‚ùå build/favicon.ico missing"
          test -f build/build-info.json && echo "‚úÖ build/build-info.json exists" || echo "‚ùå build/build-info.json missing"
          
          # Check essential directories
          test -d build/core && echo "‚úÖ build/core directory exists" || echo "‚ùå build/core directory missing"
          test -d build/animations && echo "‚úÖ build/animations directory exists" || echo "‚ùå build/animations directory missing"
          test -d build/wasm && echo "‚úÖ build/wasm directory exists" || echo "‚ùå build/wasm directory missing"
          
          # Check file sizes
          echo "üìä File sizes:"
          du -h build/*.wasm || echo "No WASM files found"
          du -h build/core/ || echo "No core folder found"
          du -h build/animations/ || echo "No animations folder found"
          
          # Verify environment injection
          if grep -q "__CLIENT_PROTOCOL_VERSION__" build/*.html build/*.js 2>/dev/null; then
            echo "‚ùå Environment variables not properly injected"
            exit 1
          else
            echo "‚úÖ Environment variables properly injected"
          fi
          
          echo "‚úÖ All validation checks passed!"
      
      - name: Setup Pages
        uses: actions/configure-pages@v5
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './build'

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Output deployment information
        run: |
          echo "üöÄ Deployment completed successfully!"
          echo "üåê Site URL: ${{ steps.deployment.outputs.page_url }}"
          echo "üéÆ Game available at: ${{ steps.deployment.outputs.page_url }}"
          echo "üìÅ Build directory deployed to root"
          echo "üîß WASM files available at: ${{ steps.deployment.outputs.page_url }}/*.wasm"
          echo "üåê Core modules available at: ${{ steps.deployment.outputs.page_url }}/core/"
          echo "üé≠ Animation modules available at: ${{ steps.deployment.outputs.page_url }}/animations/"
          echo ""
          echo "üìã Deployment Summary:"
          echo "  - Build directory deployed to root (clean structure)"
          echo "  - Environment variables injected at deployment time"
          echo "  - Protocol version validation passed: ${{ env.CLIENT_PROTOCOL_VERSION }}"
          echo "  - Build metadata available at /build-info.json"
          echo "  - Runtime build info available as window.__BUILD__"
