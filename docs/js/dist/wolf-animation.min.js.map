{"version":3,"file":"wolf-animation.min.js.map","sources":["../src/utils/particle-system.js","../src/animation/wolf-animation.js"],"sourcesContent":["// Advanced Particle System for Game Feel Enhancement\r\n// Provides various particle effects for combat, movement, and environmental interactions\r\n\r\nexport class Particle {\r\n    constructor(x, y, config = {}) {\r\n        this.x = x\r\n        this.y = y\r\n        this.vx = config.vx || 0\r\n        this.vy = config.vy || 0\r\n        this.ax = config.ax || 0  // acceleration x\r\n        this.ay = config.ay || 0  // acceleration y\r\n        this.life = config.life || 1.0\r\n        this.maxLife = config.life || 1.0\r\n        this.size = config.size || 4\r\n        this.sizeDecay = config.sizeDecay || 0.98\r\n        this.color = config.color || { r: 255, g: 255, b: 255 }\r\n        this.alpha = config.alpha || 1.0\r\n        this.alphaDecay = config.alphaDecay || 0.98\r\n        this.rotation = config.rotation || 0\r\n        this.rotationSpeed = config.rotationSpeed || 0\r\n        this.trail = config.trail || false\r\n        this.trailPositions = []\r\n        this.blendMode = config.blendMode || 'source-over'\r\n        this.glow = config.glow || false\r\n        this.glowSize = config.glowSize || 2\r\n        this.shape = config.shape || 'circle' // circle, square, star, triangle\r\n        this.friction = config.friction || 1.0\r\n        this.bounce = config.bounce || 0\r\n        this.gravity = config.gravity || 0\r\n        this.turbulence = config.turbulence || 0\r\n        this.scaleWithVelocity = config.scaleWithVelocity || false\r\n    }\r\n\r\n    update(deltaTime) {\r\n        // Apply physics\r\n        this.vx *= this.friction\r\n        this.vy *= this.friction\r\n        this.vx += this.ax * deltaTime\r\n        this.vy += (this.ay + this.gravity) * deltaTime\r\n        \r\n        // Apply turbulence\r\n        if (this.turbulence > 0) {\r\n            let s = Number((globalThis.runSeedForVisuals ?? 1n) % 2147483647n)\r\n            s = (s * 48271) % 2147483647\r\n            const n1 = (s / 2147483647) - 0.5\r\n            s = (s * 48271) % 2147483647\r\n            const n2 = (s / 2147483647) - 0.5\r\n            this.vx += n1 * this.turbulence\r\n            this.vy += n2 * this.turbulence\r\n        }\r\n        \r\n        // Update position\r\n        this.x += this.vx * deltaTime\r\n        this.y += this.vy * deltaTime\r\n        \r\n        // Update rotation\r\n        this.rotation += this.rotationSpeed * deltaTime\r\n        \r\n        // Update trail\r\n        if (this.trail) {\r\n            this.trailPositions.push({ x: this.x, y: this.y, alpha: this.alpha })\r\n            if (this.trailPositions.length > 10) {\r\n                this.trailPositions.shift()\r\n            }\r\n        }\r\n        \r\n        // Decay properties\r\n        this.life -= deltaTime\r\n        this.size *= this.sizeDecay\r\n        this.alpha *= this.alphaDecay\r\n        \r\n        // Bounce off boundaries\r\n        if (this.bounce > 0) {\r\n            if (this.x < 0 || this.x > 1280) {\r\n                this.vx *= -this.bounce\r\n                this.x = Math.max(0, Math.min(1280, this.x))\r\n            }\r\n            if (this.y < 0 || this.y > 720) {\r\n                this.vy *= -this.bounce\r\n                this.y = Math.max(0, Math.min(720, this.y))\r\n            }\r\n        }\r\n        \r\n        return this.life > 0 && this.alpha > 0.01 && this.size > 0.1\r\n    }\r\n\r\n    render(ctx) {\r\n        ctx.save()\r\n        \r\n        // Set blend mode\r\n        ctx.globalCompositeOperation = this.blendMode\r\n        ctx.globalAlpha = this.alpha\r\n        \r\n        // Draw trail\r\n        if (this.trail && this.trailPositions.length > 1) {\r\n            ctx.strokeStyle = `rgba(${this.color.r}, ${this.color.g}, ${this.color.b}, ${this.alpha * 0.5})`\r\n            ctx.lineWidth = this.size * 0.5\r\n            ctx.lineCap = 'round'\r\n            ctx.beginPath()\r\n            this.trailPositions.forEach((pos, i) => {\r\n                if (i === 0) {\r\n                    ctx.moveTo(pos.x, pos.y)\r\n                } else {\r\n                    ctx.lineTo(pos.x, pos.y)\r\n                }\r\n            })\r\n            ctx.stroke()\r\n        }\r\n        \r\n        // Draw glow\r\n        if (this.glow) {\r\n            const gradient = ctx.createRadialGradient(this.x, this.y, 0, this.x, this.y, this.size * this.glowSize)\r\n            gradient.addColorStop(0, `rgba(${this.color.r}, ${this.color.g}, ${this.color.b}, ${this.alpha})`)\r\n            gradient.addColorStop(1, `rgba(${this.color.r}, ${this.color.g}, ${this.color.b}, 0)`)\r\n            ctx.fillStyle = gradient\r\n            ctx.beginPath()\r\n            ctx.arc(this.x, this.y, this.size * this.glowSize, 0, Math.PI * 2)\r\n            ctx.fill()\r\n        }\r\n        \r\n        // Draw particle\r\n        ctx.translate(this.x, this.y)\r\n        ctx.rotate(this.rotation)\r\n        \r\n        let drawSize = this.size\r\n        if (this.scaleWithVelocity) {\r\n            const speed = Math.sqrt(this.vx * this.vx + this.vy * this.vy)\r\n            drawSize *= (1 + speed * 0.1)\r\n        }\r\n        \r\n        ctx.fillStyle = `rgba(${this.color.r}, ${this.color.g}, ${this.color.b}, ${this.alpha})`\r\n        \r\n        switch (this.shape) {\r\n            case 'square':\r\n                ctx.fillRect(-drawSize/2, -drawSize/2, drawSize, drawSize)\r\n                break\r\n            case 'star':\r\n                this.drawStar(ctx, 0, 0, 5, drawSize, drawSize * 0.5)\r\n                break\r\n            case 'triangle':\r\n                ctx.beginPath()\r\n                ctx.moveTo(0, -drawSize)\r\n                ctx.lineTo(-drawSize * 0.866, drawSize * 0.5)\r\n                ctx.lineTo(drawSize * 0.866, drawSize * 0.5)\r\n                ctx.closePath()\r\n                ctx.fill()\r\n                break\r\n            case 'circle':\r\n            default:\r\n                ctx.beginPath()\r\n                ctx.arc(0, 0, drawSize, 0, Math.PI * 2)\r\n                ctx.fill()\r\n                break\r\n        }\r\n        \r\n        ctx.restore()\r\n    }\r\n\r\n    drawStar(ctx, cx, cy, spikes, outerRadius, innerRadius) {\r\n        let rot = Math.PI / 2 * 3\r\n        let x\r\n        let y\r\n        const step = Math.PI / spikes\r\n\r\n        ctx.beginPath()\r\n        ctx.moveTo(cx, cy - outerRadius)\r\n        \r\n        for (let i = 0; i < spikes; i++) {\r\n            x = cx + Math.cos(rot) * outerRadius\r\n            y = cy + Math.sin(rot) * outerRadius\r\n            ctx.lineTo(x, y)\r\n            rot += step\r\n\r\n            x = cx + Math.cos(rot) * innerRadius\r\n            y = cy + Math.sin(rot) * innerRadius\r\n            ctx.lineTo(x, y)\r\n            rot += step\r\n        }\r\n        \r\n        ctx.lineTo(cx, cy - outerRadius)\r\n        ctx.closePath()\r\n        ctx.fill()\r\n    }\r\n}\r\n\r\nexport class ParticleEmitter {\r\n    constructor(x, y, config = {}) {\r\n        this.x = x\r\n        this.y = y\r\n        this.active = true\r\n        this.emissionRate = config.emissionRate || 10 // particles per second\r\n        this.emissionTimer = 0\r\n        this.lifetime = config.lifetime || Infinity\r\n        this.age = 0\r\n        this.particleConfig = config.particleConfig || {}\r\n        this.spread = config.spread || Math.PI * 2\r\n        this.direction = config.direction || 0\r\n        this.system = null\r\n    }\r\n\r\n    update(deltaTime) {\r\n        this.age += deltaTime\r\n        if (this.age >= this.lifetime) {\r\n            this.active = false\r\n            return\r\n        }\r\n\r\n        this.emissionTimer += deltaTime\r\n        const emissionInterval = 1 / this.emissionRate\r\n        \r\n        while (this.emissionTimer >= emissionInterval && this.active) {\r\n            this.emissionTimer -= emissionInterval\r\n            this.emit()\r\n        }\r\n    }\r\n\r\n    emit() {\r\n        if (!this.system) {return}\r\n        \r\n        const angle = this.direction + (Math.random() - 0.5) * this.spread\r\n        const config = { ...this.particleConfig }\r\n        \r\n        if (config.speed) {\r\n            config.vx = Math.cos(angle) * config.speed\r\n            config.vy = Math.sin(angle) * config.speed\r\n            delete config.speed\r\n        }\r\n        \r\n        this.system.addParticle(new Particle(this.x, this.y, config))\r\n    }\r\n\r\n    setPosition(x, y) {\r\n        this.x = x\r\n        this.y = y\r\n    }\r\n\r\n    stop() {\r\n        this.active = false\r\n    }\r\n}\r\n\r\nexport class ParticleSystem {\r\n    constructor() {\r\n        this.particles = []\r\n        this.emitters = []\r\n    }\r\n\r\n    update(deltaTime) {\r\n        // Update particles\r\n        this.particles = this.particles.filter(particle => particle.update(deltaTime))\r\n        \r\n        // Update emitters\r\n        this.emitters = this.emitters.filter(emitter => {\r\n            emitter.update(deltaTime)\r\n            return emitter.active\r\n        })\r\n    }\r\n\r\n    render(ctx) {\r\n        // Sort particles by blend mode for better batching\r\n        const particlesByBlendMode = {}\r\n        this.particles.forEach(particle => {\r\n            if (!particlesByBlendMode[particle.blendMode]) {\r\n                particlesByBlendMode[particle.blendMode] = []\r\n            }\r\n            particlesByBlendMode[particle.blendMode].push(particle)\r\n        })\r\n        \r\n        // Render particles grouped by blend mode\r\n        for (const [, particles] of Object.entries(particlesByBlendMode)) {\r\n            particles.forEach(particle => particle.render(ctx))\r\n        }\r\n    }\r\n\r\n    addParticle(particle) {\r\n        this.particles.push(particle)\r\n    }\r\n\r\n    addEmitter(emitter) {\r\n        this.emitters.push(emitter)\r\n        emitter.system = this\r\n    }\r\n\r\n    // Emit a burst of particles from an effect definition\r\n    emit(x, y, effect = {}) {\r\n        const count = Math.max(1, Math.round(((effect.emitRate || 4) / 60)))\r\n        const angleMin = (effect.emitAngle && typeof effect.emitAngle.min === 'number') ? effect.emitAngle.min : 0\r\n        const angleMax = (effect.emitAngle && typeof effect.emitAngle.max === 'number') ? effect.emitAngle.max : Math.PI * 2\r\n        const spdMin = (effect.particleSpeed && typeof effect.particleSpeed.min === 'number') ? effect.particleSpeed.min : 20\r\n        const spdMax = (effect.particleSpeed && typeof effect.particleSpeed.max === 'number') ? effect.particleSpeed.max : 60\r\n        const sizeMin = (effect.particleSize && typeof effect.particleSize.min === 'number') ? effect.particleSize.min : 2\r\n        const sizeMax = (effect.particleSize && typeof effect.particleSize.max === 'number') ? effect.particleSize.max : 5\r\n        const lifeSec = typeof effect.particleLife === 'number' ? Math.max(0.05, effect.particleLife / 1000) : 0.4\r\n        let color = { r: 200, g: 200, b: 200 }\r\n        let alpha = 0.6\r\n        if (typeof effect.particleColor === 'string') {\r\n            const m = effect.particleColor.match(/rgba?\\((\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)(?:\\s*,\\s*([0-9.]+))?\\)/i)\r\n            if (m) {\r\n                color = { r: Number(m[1]), g: Number(m[2]), b: Number(m[3]) }\r\n                alpha = (typeof m[4] !== 'undefined' && m[4] !== null) ? Number(m[4]) : 1\r\n            }\r\n        }\r\n        let seed = Number((globalThis.runSeedForVisuals ?? 1n) % 0xffffffffn) >>> 0\r\n        for (let i = 0; i < count; i++) {\r\n            // cheap LCG\r\n            seed = (seed * 1664525 + 1013904223) >>> 0\r\n            const r1 = seed / 4294967296\r\n            seed = (seed * 1664525 + 1013904223) >>> 0\r\n            const r2 = seed / 4294967296\r\n            seed = (seed * 1664525 + 1013904223) >>> 0\r\n            const r3 = seed / 4294967296\r\n            const angle = angleMin + r1 * (angleMax - angleMin)\r\n            const speed = spdMin + r2 * (spdMax - spdMin)\r\n            const size = sizeMin + r3 * (sizeMax - sizeMin)\r\n            this.addParticle(new Particle(x, y, {\r\n                vx: Math.cos(angle) * speed,\r\n                vy: Math.sin(angle) * speed,\r\n                color,\r\n                size,\r\n                life: lifeSec,\r\n                alpha,\r\n                gravity: typeof effect.gravity === 'number' ? effect.gravity : 0,\r\n                alphaDecay: 0.96,\r\n                sizeDecay: effect.expanding ? 1.02 : 0.98,\r\n                glow: !!effect.expanding,\r\n                blendMode: effect.expanding ? 'screen' : 'source-over'\r\n            }))\r\n        }\r\n    }\r\n\r\n    // Preset effects\r\n    createBloodSplatter(x, y, direction = null) {\r\n        const baseSeed = Number((globalThis.runSeedForVisuals ?? 1n) % 0xffffffffn)\r\n        let seed = baseSeed >>> 0\r\n        const count = 15 + ((seed = (seed * 1664525 + 1013904223) >>> 0), (seed / 4294967296) * 10)\r\n        const baseSpeed = 150\r\n        \r\n        for (let i = 0; i < count; i++) {\r\n            seed = (seed * 1664525 + 1013904223) >>> 0\r\n            const rA = seed / 4294967296\r\n            seed = (seed * 1664525 + 1013904223) >>> 0\r\n            const rB = seed / 4294967296\r\n            seed = (seed * 1664525 + 1013904223) >>> 0\r\n            const rC = seed / 4294967296\r\n            const angle = direction ? \r\n                direction + (rA - 0.5) * Math.PI * 0.5 :\r\n                rA * Math.PI * 2\r\n            const speed = baseSpeed * (0.5 + rB * 0.5)\r\n            const size = 2 + rC * 4\r\n            \r\n            this.addParticle(new Particle(x, y, {\r\n                vx: Math.cos(angle) * speed,\r\n                vy: Math.sin(angle) * speed,\r\n                color: { r: 180 + Math.floor(((seed = (seed * 1664525 + 1013904223) >>> 0), seed / 4294967296) * 40), g: 0, b: 0 },\r\n                size: size,\r\n                life: 0.5 + (((seed = (seed * 1664525 + 1013904223) >>> 0), seed / 4294967296)) * 0.5,\r\n                gravity: 300,\r\n                friction: 0.95,\r\n                bounce: 0.3,\r\n                alphaDecay: 0.95,\r\n                sizeDecay: 0.98,\r\n                trail: size > 3,\r\n                blendMode: 'multiply'\r\n            }))\r\n        }\r\n        \r\n        // Add some mist particles\r\n        for (let i = 0; i < 5; i++) {\r\n            this.addParticle(new Particle(x, y, {\r\n                vx: (Math.random() - 0.5) * 50,\r\n                vy: (Math.random() - 0.5) * 50,\r\n                color: { r: 150, g: 0, b: 0 },\r\n                size: 15 + Math.random() * 10,\r\n                life: 0.8,\r\n                alpha: 0.3,\r\n                alphaDecay: 0.96,\r\n                sizeDecay: 1.01,\r\n                blendMode: 'multiply'\r\n            }))\r\n        }\r\n    }\r\n\r\n    createHitSpark(x, y, color = { r: 255, g: 200, b: 100 }) {\r\n        let seed = Number((globalThis.runSeedForVisuals ?? 1n) % 0xffffffffn) >>> 0\r\n        const count = 8 + (((seed = (seed * 1664525 + 1013904223) >>> 0), seed / 4294967296) * 8)\r\n        \r\n        for (let i = 0; i < count; i++) {\r\n            seed = (seed * 1664525 + 1013904223) >>> 0\r\n            const angle = (Math.PI * 2 * i) / count + (seed / 4294967296) * 0.5\r\n            seed = (seed * 1664525 + 1013904223) >>> 0\r\n            const speed = 200 + (seed / 4294967296) * 150\r\n            \r\n            this.addParticle(new Particle(x, y, {\r\n                vx: Math.cos(angle) * speed,\r\n                vy: Math.sin(angle) * speed,\r\n                color: color,\r\n                size: 2 + (((seed = (seed * 1664525 + 1013904223) >>> 0), seed / 4294967296) * 3),\r\n                life: 0.2 + (((seed = (seed * 1664525 + 1013904223) >>> 0), seed / 4294967296) * 0.3),\r\n                alphaDecay: 0.92,\r\n                sizeDecay: 0.95,\r\n                glow: true,\r\n                glowSize: 3,\r\n                shape: 'star',\r\n                blendMode: 'screen',\r\n                trail: true\r\n            }))\r\n        }\r\n        \r\n        // Central flash\r\n        this.addParticle(new Particle(x, y, {\r\n            color: { r: 255, g: 255, b: 255 },\r\n            size: 30,\r\n            life: 0.1,\r\n            alpha: 0.8,\r\n            alphaDecay: 0.85,\r\n            sizeDecay: 1.15,\r\n            glow: true,\r\n            glowSize: 2,\r\n            blendMode: 'screen'\r\n        }))\r\n    }\r\n\r\n    createDustCloud(x, y, radius = 30) {\r\n        const count = 10 + Math.random() * 10\r\n        \r\n        for (let i = 0; i < count; i++) {\r\n            const angle = Math.random() * Math.PI * 2\r\n            const distance = Math.random() * radius\r\n            const px = x + Math.cos(angle) * distance\r\n            const py = y + Math.sin(angle) * distance\r\n            \r\n            this.addParticle(new Particle(px, py, {\r\n                vx: (Math.random() - 0.5) * 30,\r\n                vy: -Math.random() * 50 - 20,\r\n                color: { r: 150, g: 130, b: 100 },\r\n                size: 10 + Math.random() * 15,\r\n                life: 0.8 + Math.random() * 0.4,\r\n                alpha: 0.4,\r\n                alphaDecay: 0.97,\r\n                sizeDecay: 1.01,\r\n                turbulence: 5,\r\n                blendMode: 'multiply'\r\n            }))\r\n        }\r\n    }\r\n\r\n    createRollDust(x, y, direction) {\r\n        const count = 5\r\n        for (let i = 0; i < count; i++) {\r\n            const offset = (i - count/2) * 10\r\n            this.addParticle(new Particle(\r\n                x - Math.cos(direction) * 20,\r\n                y - Math.sin(direction) * 20 + offset,\r\n                {\r\n                    vx: -Math.cos(direction) * 50 + (Math.random() - 0.5) * 20,\r\n                    vy: -Math.sin(direction) * 50 + (Math.random() - 0.5) * 20,\r\n                    color: { r: 180, g: 160, b: 140 },\r\n                    size: 8 + Math.random() * 4,\r\n                    life: 0.4,\r\n                    alpha: 0.5,\r\n                    alphaDecay: 0.95,\r\n                    sizeDecay: 1.02,\r\n                    blendMode: 'multiply'\r\n                }\r\n            ))\r\n        }\r\n    }\r\n\r\n    createBlockSpark(x, y, angle) {\r\n        // Directional sparks\r\n        for (let i = 0; i < 12; i++) {\r\n            const sparkAngle = angle + (Math.random() - 0.5) * Math.PI * 0.3\r\n            const speed = 250 + Math.random() * 150\r\n            \r\n            this.addParticle(new Particle(x, y, {\r\n                vx: Math.cos(sparkAngle) * speed,\r\n                vy: Math.sin(sparkAngle) * speed,\r\n                color: { r: 255, g: 230, b: 150 },\r\n                size: 1 + Math.random() * 2,\r\n                life: 0.3,\r\n                alphaDecay: 0.90,\r\n                friction: 0.92,\r\n                glow: true,\r\n                glowSize: 4,\r\n                shape: Math.random() > 0.5 ? 'star' : 'circle',\r\n                blendMode: 'screen',\r\n                trail: true,\r\n                gravity: 100\r\n            }))\r\n        }\r\n        \r\n        // Impact ring\r\n        this.addParticle(new Particle(x, y, {\r\n            color: { r: 255, g: 255, b: 200 },\r\n            size: 5,\r\n            life: 0.2,\r\n            alpha: 0.6,\r\n            alphaDecay: 0.85,\r\n            sizeDecay: 1.25,\r\n            shape: 'circle',\r\n            blendMode: 'screen',\r\n            glow: true,\r\n            glowSize: 3\r\n        }))\r\n    }\r\n\r\n    createPerfectParryFlash(x, y) {\r\n        // Large flash effect\r\n        this.addParticle(new Particle(x, y, {\r\n            color: { r: 100, g: 200, b: 255 },\r\n            size: 100,\r\n            life: 0.3,\r\n            alpha: 0.8,\r\n            alphaDecay: 0.90,\r\n            sizeDecay: 1.08,\r\n            glow: true,\r\n            glowSize: 2,\r\n            blendMode: 'screen'\r\n        }))\r\n        \r\n        // Ring of particles\r\n        const count = 16\r\n        for (let i = 0; i < count; i++) {\r\n            const angle = (Math.PI * 2 * i) / count\r\n            const speed = 300\r\n            \r\n            this.addParticle(new Particle(x, y, {\r\n                vx: Math.cos(angle) * speed,\r\n                vy: Math.sin(angle) * speed,\r\n                color: { r: 150, g: 200, b: 255 },\r\n                size: 4,\r\n                life: 0.5,\r\n                alphaDecay: 0.94,\r\n                friction: 0.90,\r\n                glow: true,\r\n                glowSize: 3,\r\n                shape: 'star',\r\n                blendMode: 'screen',\r\n                trail: true\r\n            }))\r\n        }\r\n    }\r\n\r\n    createEnemyDeathExplosion(x, y) {\r\n        // Main explosion\r\n        for (let i = 0; i < 30; i++) {\r\n            const angle = Math.random() * Math.PI * 2\r\n            const speed = 100 + Math.random() * 200\r\n            \r\n            this.addParticle(new Particle(x, y, {\r\n                vx: Math.cos(angle) * speed,\r\n                vy: Math.sin(angle) * speed,\r\n                color: { \r\n                    r: 255, \r\n                    g: 100 + Math.random() * 100, \r\n                    b: Math.random() * 100 \r\n                },\r\n                size: 3 + Math.random() * 5,\r\n                life: 0.5 + Math.random() * 0.5,\r\n                gravity: 200,\r\n                friction: 0.94,\r\n                alphaDecay: 0.95,\r\n                sizeDecay: 0.97,\r\n                glow: true,\r\n                glowSize: 2,\r\n                blendMode: 'screen'\r\n            }))\r\n        }\r\n        \r\n        // Smoke\r\n        for (let i = 0; i < 8; i++) {\r\n            this.addParticle(new Particle(x, y, {\r\n                vx: (Math.random() - 0.5) * 50,\r\n                vy: -Math.random() * 100 - 50,\r\n                color: { r: 80, g: 80, b: 80 },\r\n                size: 20 + Math.random() * 20,\r\n                life: 1.0,\r\n                alpha: 0.5,\r\n                alphaDecay: 0.97,\r\n                sizeDecay: 1.02,\r\n                blendMode: 'multiply'\r\n            }))\r\n        }\r\n    }\r\n\r\n    createFootstep(x, y, size = 1) {\r\n        const count = 3\r\n        for (let i = 0; i < count; i++) {\r\n            this.addParticle(new Particle(\r\n                x + (Math.random() - 0.5) * 10,\r\n                y + (Math.random() - 0.5) * 5,\r\n                {\r\n                    vx: (Math.random() - 0.5) * 20,\r\n                    vy: -Math.random() * 30 - 10,\r\n                    color: { r: 160, g: 140, b: 120 },\r\n                    size: (3 + Math.random() * 2) * size,\r\n                    life: 0.3,\r\n                    alpha: 0.3,\r\n                    alphaDecay: 0.94,\r\n                    sizeDecay: 1.01,\r\n                    blendMode: 'multiply'\r\n                }\r\n            ))\r\n        }\r\n    }\r\n\r\n    clear() {\r\n        this.particles = []\r\n        this.emitters = []\r\n    }\r\n\r\n    // Compatibility helpers used by other modules (e.g., player-animator)\r\n    // These map high-level effect names to our existing particle primitives\r\n    createSlashEffect(x, y, facing = 1) {\r\n        const count = 6\r\n        for (let i = 0; i < count; i++) {\r\n            const speed = 250 + Math.random() * 150\r\n            const spreadY = (Math.random() - 0.5) * 0.4\r\n            this.addParticle(new Particle(x, y + (Math.random() - 0.5) * 20, {\r\n                vx: facing * speed + (Math.random() - 0.5) * 60,\r\n                vy: spreadY * speed * 0.2,\r\n                color: { r: 255, g: 230, b: 120 },\r\n                size: 2 + Math.random() * 2,\r\n                life: 0.25 + Math.random() * 0.2,\r\n                alphaDecay: 0.92,\r\n                sizeDecay: 0.96,\r\n                glow: true,\r\n                glowSize: 3,\r\n                shape: 'star',\r\n                blendMode: 'screen',\r\n                trail: true\r\n            }))\r\n        }\r\n        // Central flash\r\n        this.addParticle(new Particle(x + facing * 10, y, {\r\n            color: { r: 255, g: 255, b: 200 },\r\n            size: 24,\r\n            life: 0.12,\r\n            alpha: 0.8,\r\n            alphaDecay: 0.85,\r\n            sizeDecay: 1.18,\r\n            glow: true,\r\n            glowSize: 2,\r\n            blendMode: 'screen'\r\n        }))\r\n    }\r\n\r\n    createShieldEffect(x, y) {\r\n        const ring = 12\r\n        for (let i = 0; i < ring; i++) {\r\n            const angle = (Math.PI * 2 * i) / ring\r\n            const speed = 120 + Math.random() * 80\r\n            this.addParticle(new Particle(x, y, {\r\n                vx: Math.cos(angle) * speed,\r\n                vy: Math.sin(angle) * speed,\r\n                color: { r: 120, g: 180, b: 255 },\r\n                size: 2,\r\n                life: 0.25,\r\n                alphaDecay: 0.92,\r\n                sizeDecay: 0.98,\r\n                glow: true,\r\n                glowSize: 3,\r\n                shape: 'circle',\r\n                blendMode: 'screen'\r\n            }))\r\n        }\r\n        // Soft protective flash\r\n        this.addParticle(new Particle(x, y, {\r\n            color: { r: 180, g: 220, b: 255 },\r\n            size: 30,\r\n            life: 0.18,\r\n            alpha: 0.5,\r\n            alphaDecay: 0.9,\r\n            sizeDecay: 1.12,\r\n            glow: true,\r\n            glowSize: 2,\r\n            blendMode: 'screen'\r\n        }))\r\n    }\r\n\r\n    createBlockImpact(x, y) {\r\n        this.createBlockSpark(x, y, 0)\r\n    }\r\n\r\n    createBloodEffect(x, y) {\r\n        this.createBloodSplatter(x, y)\r\n    }\r\n\r\n    createDeathEffect(x, y) {\r\n        this.createEnemyDeathExplosion(x, y)\r\n    }\r\n\r\n    createRespawnEffect(x, y) {\r\n        this.createDustCloud(x, y, 40)\r\n        this.addParticle(new Particle(x, y, {\r\n            color: { r: 180, g: 255, b: 255 },\r\n            size: 60,\r\n            life: 0.4,\r\n            alpha: 0.6,\r\n            alphaDecay: 0.9,\r\n            sizeDecay: 1.1,\r\n            glow: true,\r\n            glowSize: 2,\r\n            blendMode: 'screen'\r\n        }))\r\n    }\r\n\r\n    startChargingEffect(x, y) {\r\n        const emitter = new ParticleEmitter(x, y, {\r\n            emissionRate: 20,\r\n            lifetime: 1.5,\r\n            particleConfig: {\r\n                color: { r: 120, g: 200, b: 255 },\r\n                size: 3,\r\n                life: 0.4,\r\n                alpha: 0.7,\r\n                alphaDecay: 0.94,\r\n                sizeDecay: 0.98,\r\n                glow: true,\r\n                glowSize: 2,\r\n                shape: 'circle',\r\n                speed: 30,\r\n                rotationSpeed: 3\r\n            },\r\n            spread: Math.PI * 2,\r\n            direction: 0\r\n        })\r\n        this.addEmitter(emitter)\r\n        return emitter\r\n    }\r\n\r\n    createChargedSlash(x, y, facing = 1, chargePercent = 0) {\r\n        this.createSlashEffect(x, y, facing)\r\n        const extra = Math.floor(6 * Math.max(0, Math.min(1, chargePercent)))\r\n        for (let i = 0; i < extra; i++) {\r\n            this.addParticle(new Particle(x, y + (Math.random() - 0.5) * 20, {\r\n                vx: facing * (300 + Math.random() * 200),\r\n                vy: (Math.random() - 0.5) * 40,\r\n                color: { r: 255, g: 255, b: 180 },\r\n                size: 3 + Math.random() * 2,\r\n                life: 0.3,\r\n                alphaDecay: 0.9,\r\n                sizeDecay: 0.95,\r\n                glow: true,\r\n                glowSize: 3,\r\n                shape: 'star',\r\n                blendMode: 'screen',\r\n                trail: true\r\n            }))\r\n        }\r\n        // Bigger flash based on charge\r\n        this.addParticle(new Particle(x + facing * 15, y, {\r\n            color: { r: 255, g: 255, b: 220 },\r\n            size: 30 + chargePercent * 20,\r\n            life: 0.14 + chargePercent * 0.1,\r\n            alpha: 0.85,\r\n            alphaDecay: 0.88,\r\n            sizeDecay: 1.2,\r\n            glow: true,\r\n            glowSize: 2,\r\n            blendMode: 'screen'\r\n        }))\r\n    }\r\n\r\n    createDashTrail(x, y, dirX = 1, dirY = 0) {\r\n        const len = Math.sqrt(dirX * dirX + dirY * dirY) || 1\r\n        const nx = dirX / len\r\n        const ny = dirY / len\r\n        for (let i = 0; i < 4; i++) {\r\n            this.addParticle(new Particle(\r\n                x - nx * (10 + i * 3),\r\n                y - ny * (10 + i * 3),\r\n                {\r\n                    vx: -nx * 80 + (Math.random() - 0.5) * 20,\r\n                    vy: -ny * 80 + (Math.random() - 0.5) * 20,\r\n                    color: { r: 200, g: 220, b: 255 },\r\n                    size: 3,\r\n                    life: 0.25,\r\n                    alpha: 0.5,\r\n                    alphaDecay: 0.9,\r\n                    sizeDecay: 0.98,\r\n                    glow: true,\r\n                    glowSize: 2,\r\n                    blendMode: 'screen'\r\n                }\r\n            ))\r\n        }\r\n    }\r\n\r\n    createLandingImpact(x, y, strength = 1) {\r\n        const radius = 30 + 40 * Math.max(0, Math.min(1, strength))\r\n        this.createDustCloud(x, y, radius)\r\n        // Quick flash at feet\r\n        this.addParticle(new Particle(x, y, {\r\n            color: { r: 255, g: 255, b: 255 },\r\n            size: 20 * strength,\r\n            life: 0.12,\r\n            alpha: 0.6,\r\n            alphaDecay: 0.88,\r\n            sizeDecay: 1.2,\r\n            glow: true,\r\n            glowSize: 2,\r\n            blendMode: 'screen'\r\n        }))\r\n    }\r\n\r\n    createSparkle(x, y) {\r\n        this.addParticle(new Particle(x, y, {\r\n            color: { r: 255, g: 255, b: 200 },\r\n            size: 3 + Math.random() * 2,\r\n            life: 0.3,\r\n            alpha: 0.9,\r\n            alphaDecay: 0.92,\r\n            sizeDecay: 0.97,\r\n            glow: true,\r\n            glowSize: 3,\r\n            shape: 'star',\r\n            blendMode: 'screen'\r\n        }))\r\n    }\r\n}\r\n\r\nexport default ParticleSystem","// Enhanced Wolf Animation System\r\n// Provides advanced animations, procedural movements, and visual effects for wolves\r\n\r\n// Animation and AnimationFrame imported but not directly used - may be used indirectly\r\nimport { ParticleSystem } from '../utils/particle-system.js'\r\n\r\nexport class WolfAnimationSystem {\r\n    constructor() {\r\n        // Animation definitions for different wolf states\r\n        this.animations = new Map()\r\n        this.proceduralAnimations = new Map()\r\n        this.particleEffects = new Map()\r\n        this._dt = 0\r\n        this.wasmModule = null // To hold the WASM module instance\r\n        \r\n        this.initializeAnimations()\r\n        this.initializeProceduralAnimations()\r\n        this.initializeParticleEffects()\r\n    }\r\n    \r\n    setWasmModule(wasmModule) {\r\n        this.wasmModule = wasmModule\r\n    }\r\n    \r\n    // --- Helpers: seeded RNG, smoothing, math ---\r\n    _seedWolf(wolf) {\r\n        if (wolf._animSeed === null) {\r\n            // Derive a stable-ish seed from existing visual-only properties\r\n            const fx = Math.floor((wolf.position?.x || 0) * 1000) & 0xffff\r\n            const fy = Math.floor((wolf.position?.y || 0) * 1000) & 0xffff\r\n            const fp = Math.floor(((wolf.furPattern || 0.5) * 1e6)) & 0xffff\r\n            wolf._animSeed = ((fx << 16) ^ fy ^ (fp << 1)) >>> 0\r\n        }\r\n        if (wolf._animRngState === null) { wolf._animRngState = wolf._animSeed >>> 0 }\r\n    }\r\n    _rand(wolf) {\r\n        // xorshift32\r\n        this._seedWolf(wolf)\r\n        let x = wolf._animRngState | 0\r\n        x ^= x << 13; x ^= x >>> 17; x ^= x << 5\r\n        wolf._animRngState = x >>> 0\r\n        return (wolf._animRngState & 0xffffffff) / 0x100000000\r\n    }\r\n    _chance(wolf, p) { return this._rand(wolf) < p }\r\n    _lerp(a, b, t) { return a + (b - a) * t }\r\n    _smoothNumber(current, target, rate) {\r\n        const dt = this._dt || 0.016\r\n        const t = Math.min(1, Math.max(0, rate * dt))\r\n        return this._lerp(current, target, t)\r\n    }\r\n    _smoothProp(wolf, key, target, rate = 8) {\r\n        const cur = wolf[key] !== null ? wolf[key] : target\r\n        wolf[key] = this._smoothNumber(cur, target, rate)\r\n    }\r\n    _updateSmoothedVelocity(wolf) {\r\n        const vx = wolf.velocity?.x || 0\r\n        const vy = wolf.velocity?.y || 0\r\n        wolf._smVelX = this._smoothNumber(wolf._smVelX || 0, vx, 10)\r\n        wolf._smVelY = this._smoothNumber(wolf._smVelY || 0, vy, 10)\r\n    }\r\n    \r\n    initializeAnimations() {\r\n        // Idle animation - subtle breathing and ear twitches\r\n        this.animations.set('idle', {\r\n            breathing: {\r\n                amplitude: 2,\r\n                frequency: 0.002,\r\n                offset: 0\r\n            },\r\n            earTwitch: {\r\n                probability: 0.001,\r\n                duration: 300,\r\n                maxRotation: 0.2\r\n            },\r\n            tailSway: {\r\n                amplitude: 0.1,\r\n                frequency: 0.003\r\n            },\r\n            blinking: {\r\n                probability: 0.002,\r\n                duration: 150\r\n            }\r\n        })\r\n        \r\n        // Walking animation\r\n        this.animations.set('walking', {\r\n            legCycle: {\r\n                frequency: 0.008,\r\n                amplitude: 8,\r\n                phaseOffset: Math.PI\r\n            },\r\n            bodyBob: {\r\n                amplitude: 2,\r\n                frequency: 0.016\r\n            },\r\n            headBob: {\r\n                amplitude: 1.5,\r\n                frequency: 0.008\r\n            },\r\n            tailSway: {\r\n                amplitude: 0.2,\r\n                frequency: 0.008\r\n            }\r\n        })\r\n        \r\n        // Running animation\r\n        this.animations.set('running', {\r\n            legCycle: {\r\n                frequency: 0.015,\r\n                amplitude: 12,\r\n                phaseOffset: Math.PI,\r\n                stretchFactor: 1.2\r\n            },\r\n            bodyBob: {\r\n                amplitude: 4,\r\n                frequency: 0.03\r\n            },\r\n            headBob: {\r\n                amplitude: 3,\r\n                frequency: 0.015\r\n            },\r\n            tailStream: {\r\n                amplitude: 0.4,\r\n                frequency: 0.02,\r\n                streamEffect: true\r\n            },\r\n            earsPinned: true\r\n        })\r\n        \r\n        // Prowling animation (stalking)\r\n        this.animations.set('prowling', {\r\n            legCycle: {\r\n                frequency: 0.004,\r\n                amplitude: 5,\r\n                phaseOffset: Math.PI,\r\n                careful: true // Careful foot placement\r\n            },\r\n            bodyLowered: {\r\n                lowerAmount: 10,\r\n                sway: 1\r\n            },\r\n            headLowered: {\r\n                lowerAmount: 5,\r\n                scanning: true,\r\n                scanSpeed: 0.002\r\n            },\r\n            tailStill: {\r\n                tipTwitch: 0.01,\r\n                frequency: 0.005\r\n            },\r\n            earsForward: {\r\n                rotation: -0.3,\r\n                alertness: 1.0\r\n            }\r\n        })\r\n        \r\n        // Lunging animation\r\n        this.animations.set('lunging', {\r\n            bodyStretch: {\r\n                stretchFactor: 1.3,\r\n                compressionStart: 0.8, // Compress before launch\r\n                extensionPeak: 1.5\r\n            },\r\n            legsExtended: {\r\n                frontExtension: 20,\r\n                rearExtension: 15,\r\n                clawsOut: true\r\n            },\r\n            mouthOpen: {\r\n                openAmount: 0.8,\r\n                teethVisible: true\r\n            },\r\n            earsBack: {\r\n                rotation: 0.5\r\n            },\r\n            furRipple: {\r\n                intensity: 0.3,\r\n                speed: 0.02\r\n            }\r\n        })\r\n        \r\n        // Attacking animation\r\n        this.animations.set('attacking', {\r\n            biteSequence: [\r\n                { jaw: 0, duration: 100 },\r\n                { jaw: 0.9, duration: 50 },\r\n                { jaw: 0.7, duration: 100 },\r\n                { jaw: 0, duration: 150 }\r\n            ],\r\n            headShake: {\r\n                amplitude: 5,\r\n                frequency: 0.05\r\n            },\r\n            clawSwipe: {\r\n                swipeSpeed: 0.03,\r\n                swipeArc: Math.PI / 3\r\n            },\r\n            bodyTense: {\r\n                tensionLevel: 0.8\r\n            }\r\n        })\r\n        \r\n        // Howling animation\r\n        this.animations.set('howling', {\r\n            headTilt: {\r\n                startAngle: 0,\r\n                endAngle: -Math.PI / 4,\r\n                duration: 1000\r\n            },\r\n            mouthOpen: {\r\n                openAmount: 0.6,\r\n                vibration: 0.02\r\n            },\r\n            chestExpansion: {\r\n                expansionAmount: 1.2,\r\n                frequency: 0.003\r\n            },\r\n            tailRaised: {\r\n                angle: 0.3\r\n            },\r\n            soundWaves: {\r\n                frequency: 0.01,\r\n                amplitude: 2,\r\n                visible: true\r\n            }\r\n        })\r\n        \r\n        // Hurt animation\r\n        this.animations.set('hurt', {\r\n            flinch: {\r\n                intensity: 10,\r\n                duration: 200,\r\n                direction: 'away'\r\n            },\r\n            earsFlat: {\r\n                rotation: 0.6\r\n            },\r\n            tailTucked: {\r\n                tuckAmount: 0.8\r\n            },\r\n            whimper: {\r\n                mouthOpen: 0.2,\r\n                duration: 300\r\n            },\r\n            bodyShake: {\r\n                amplitude: 3,\r\n                frequency: 0.1,\r\n                dampening: 0.9\r\n            }\r\n        })\r\n        \r\n        // Death animation\r\n        this.animations.set('death', {\r\n            collapse: {\r\n                stages: [\r\n                    { legs: 'buckle', duration: 300 },\r\n                    { body: 'fall', duration: 400 },\r\n                    { final: 'limp', duration: 500 }\r\n                ]\r\n            },\r\n            fadeOut: {\r\n                startDelay: 1000,\r\n                duration: 2000\r\n            }\r\n        })\r\n    }\r\n    \r\n    initializeProceduralAnimations() {\r\n        // Procedural leg movement system\r\n        this.proceduralAnimations.set('legIK', {\r\n            calculateLegPosition: (wolf, legIndex, time) => {\r\n                const anim = this.animations.get(wolf.state)\r\n                if (!anim || !anim.legCycle) {return { x: 0, y: 0 }}\r\n                \r\n                const cycle = anim.legCycle\r\n                const phase = legIndex % 2 === 0 ? 0 : cycle.phaseOffset\r\n                const t = time * cycle.frequency + phase\r\n                \r\n                // Create realistic leg movement pattern\r\n                const x = Math.sin(t) * cycle.amplitude * 0.5\r\n                const y = Math.max(0, Math.sin(t * 2)) * cycle.amplitude\r\n                \r\n                // Add careful foot placement for prowling\r\n                if (cycle.careful) {\r\n                    return {\r\n                        x: x * 0.5,\r\n                        y: y * 0.7,\r\n                        placement: 'careful'\r\n                    }\r\n                }\r\n                \r\n                return { x, y }\r\n            }\r\n        })\r\n        \r\n        // Procedural tail physics\r\n        this.proceduralAnimations.set('tailPhysics', {\r\n            segments: 5,\r\n            calculateTailCurve: (wolf, time) => {\r\n                const anim = this.animations.get(wolf.state)\r\n                const segments = []\r\n                \r\n                for (let i = 0; i < 5; i++) {\r\n                    const delay = i * 0.1\r\n                    let angle = 0\r\n                    \r\n                    if (anim?.tailSway) {\r\n                        angle = Math.sin(time * anim.tailSway.frequency - delay) * \r\n                               anim.tailSway.amplitude * (1 - i * 0.15)\r\n                    } else if (anim?.tailStream) {\r\n                        // Streaming effect for running\r\n                        angle = Math.sin(time * anim.tailStream.frequency - delay) * \r\n                               anim.tailStream.amplitude * (1 + i * 0.1)\r\n                    } else if (anim?.tailTucked) {\r\n                        angle = anim.tailTucked.tuckAmount * (1 + i * 0.2)\r\n                    }\r\n                    \r\n                    segments.push({\r\n                        angle,\r\n                        length: 8 - i * 0.5\r\n                    })\r\n                }\r\n                \r\n                return segments\r\n            }\r\n        })\r\n        \r\n        // Procedural fur animation\r\n        this.proceduralAnimations.set('furDynamics', {\r\n            calculateFurMovement: (wolf, time, windStrength = 0) => {\r\n                const speed = Math.sqrt(wolf.velocity.x ** 2 + wolf.velocity.y ** 2)\r\n                const windEffect = Math.sin(time * 0.005) * windStrength\r\n                \r\n                return {\r\n                    ripple: speed > 200 ? Math.sin(time * 0.02) * 0.2 : 0,\r\n                    flow: windEffect + (speed / 1000),\r\n                    ruffled: wolf.state === 'hurt' || wolf.state === 'attacking'\r\n                }\r\n            }\r\n        })\r\n        \r\n        // Procedural breathing\r\n        this.proceduralAnimations.set('breathing', {\r\n            calculateBreathing: (wolf, time) => {\r\n                const baseRate = 0.002\r\n                const stateMultiplier = {\r\n                    idle: 1,\r\n                    walking: 1.2,\r\n                    running: 2,\r\n                    prowling: 0.8,\r\n                    attacking: 1.5,\r\n                    hurt: 1.8,\r\n                    howling: 1.3\r\n                }\r\n                \r\n                const rate = baseRate * (stateMultiplier[wolf.state] || 1)\r\n                const depth = wolf.state === 'running' ? 4 : 2\r\n                \r\n                return {\r\n                    chestExpansion: Math.sin(time * rate) * depth,\r\n                    bellyExpansion: Math.sin(time * rate - 0.2) * depth * 0.7\r\n                }\r\n            }\r\n        })\r\n    }\r\n    \r\n    initializeParticleEffects() {\r\n        // Dust particles for running\r\n        this.particleEffects.set('runDust', {\r\n            emitRate: 5,\r\n            particleLife: 500,\r\n            particleSpeed: { min: 20, max: 50 },\r\n            particleSize: { min: 2, max: 5 },\r\n            particleColor: 'rgba(139, 115, 85, 0.4)',\r\n            emitAngle: { min: Math.PI * 0.4, max: Math.PI * 0.6 },\r\n            gravity: 50\r\n        })\r\n        \r\n        // Blood particles for attacks\r\n        this.particleEffects.set('bloodSplatter', {\r\n            emitRate: 20,\r\n            particleLife: 800,\r\n            particleSpeed: { min: 100, max: 200 },\r\n            particleSize: { min: 1, max: 3 },\r\n            particleColor: 'rgba(139, 0, 0, 0.7)',\r\n            emitAngle: { min: 0, max: Math.PI * 2 },\r\n            gravity: 200\r\n        })\r\n        \r\n        // Saliva/foam for attacking\r\n        this.particleEffects.set('attackFoam', {\r\n            emitRate: 8,\r\n            particleLife: 300,\r\n            particleSpeed: { min: 50, max: 100 },\r\n            particleSize: { min: 1, max: 2 },\r\n            particleColor: 'rgba(255, 255, 255, 0.6)',\r\n            emitAngle: { min: -Math.PI / 6, max: Math.PI / 6 },\r\n            gravity: 100\r\n        })\r\n        \r\n        // Sound waves for howling\r\n        this.particleEffects.set('soundWaves', {\r\n            emitRate: 2,\r\n            particleLife: 1500,\r\n            particleSpeed: { min: 100, max: 100 },\r\n            particleSize: { min: 20, max: 40 },\r\n            particleColor: 'rgba(255, 255, 255, 0.2)',\r\n            emitAngle: { min: -Math.PI / 8, max: Math.PI / 8 },\r\n            gravity: 0,\r\n            expanding: true\r\n        })\r\n    }\r\n    \r\n    // Apply animation to wolf\r\n    applyAnimation(wolf, deltaTime) {\r\n        if (!this.wasmModule) { return } // Ensure WASM module is loaded\r\n        this._dt = deltaTime\r\n\r\n        // Find the index of this wolf in the WASM enemies array\r\n        // This assumes a direct mapping from the JS wolf object to the WASM enemy array index\r\n        // In a more complex scenario, you might need a lookup table or pass the index from WASM\r\n        const wolfIndex = wolf.id; // Assuming wolf.id corresponds to WASM enemy array index\r\n        // Check if wolf animation is active with safety check\r\n        const isActive = typeof this.wasmModule.get_wolf_anim_active === 'function' ? \r\n            this.wasmModule.get_wolf_anim_active(wolfIndex) : false;\r\n        if (!isActive) { return } // Only animate active wolves\r\n\r\n        const time = (typeof globalThis.wasmExports?.get_time_seconds === 'function') \r\n            ? globalThis.wasmExports.get_time_seconds() \r\n            : performance.now() / 1000;\r\n        const state = wolf.state;\r\n        const animation = this.animations.get(state);\r\n        \r\n        if (!animation) {return}\r\n        \r\n        // Track state transitions for gentle blend-in\r\n        if (wolf._lastAnimState !== state) {\r\n            wolf._lastAnimState = state\r\n            wolf._stateBlend = 0\r\n        }\r\n        wolf._stateBlend = Math.min(1, (wolf._stateBlend || 0) + deltaTime * 6)\r\n        \r\n        // Smooth velocity for secondary motion\r\n        this._updateSmoothedVelocity(wolf)\r\n        \r\n        // Apply procedural animations (now fetching from WASM)\r\n        this.applyProceduralAnimations(wolf, wolfIndex, time)\r\n        \r\n        // Apply state-specific animations\r\n        switch (state) {\r\n            case 'idle':\r\n                this.applyIdleAnimation(wolf, animation, time)\r\n                break\r\n            case 'walking':\r\n            case 'running':\r\n                this.applyLocomotionAnimation(wolf, animation, time)\r\n                break\r\n            case 'prowling':\r\n                this.applyProwlingAnimation(wolf, animation, time)\r\n                break\r\n            case 'lunging':\r\n                this.applyLungingAnimation(wolf, animation, time)\r\n                break\r\n            case 'attacking':\r\n                this.applyAttackingAnimation(wolf, animation, time)\r\n                break\r\n            case 'howling':\r\n                this.applyHowlingAnimation(wolf, animation, time)\r\n                break\r\n            case 'hurt':\r\n                this.applyHurtAnimation(wolf, animation, time)\r\n                break\r\n        }\r\n        \r\n        // Update particle effects\r\n        this.updateParticleEffects(wolf, deltaTime)\r\n    }\r\n    \r\n    applyProceduralAnimations(wolf, wolfIndex, time) {\r\n        if (!this.wasmModule) { return }\r\n\r\n        // Get procedural animation data from WASM with safety checks\r\n        const animData = {\r\n            active: typeof this.wasmModule.get_wolf_anim_active === 'function' ? \r\n                this.wasmModule.get_wolf_anim_active(wolfIndex) : false,\r\n            leg_x: [\r\n                typeof this.wasmModule.get_wolf_anim_leg_x === 'function' ? \r\n                    this.wasmModule.get_wolf_anim_leg_x(wolfIndex, 0) : 0,\r\n                typeof this.wasmModule.get_wolf_anim_leg_x === 'function' ? \r\n                    this.wasmModule.get_wolf_anim_leg_x(wolfIndex, 1) : 0,\r\n                typeof this.wasmModule.get_wolf_anim_leg_x === 'function' ? \r\n                    this.wasmModule.get_wolf_anim_leg_x(wolfIndex, 2) : 0,\r\n                typeof this.wasmModule.get_wolf_anim_leg_x === 'function' ? \r\n                    this.wasmModule.get_wolf_anim_leg_x(wolfIndex, 3) : 0\r\n            ],\r\n            leg_y: [\r\n                typeof this.wasmModule.get_wolf_anim_leg_y === 'function' ? \r\n                    this.wasmModule.get_wolf_anim_leg_y(wolfIndex, 0) : 0,\r\n                typeof this.wasmModule.get_wolf_anim_leg_y === 'function' ? \r\n                    this.wasmModule.get_wolf_anim_leg_y(wolfIndex, 1) : 0,\r\n                typeof this.wasmModule.get_wolf_anim_leg_y === 'function' ? \r\n                    this.wasmModule.get_wolf_anim_leg_y(wolfIndex, 2) : 0,\r\n                typeof this.wasmModule.get_wolf_anim_leg_y === 'function' ? \r\n                    this.wasmModule.get_wolf_anim_leg_y(wolfIndex, 3) : 0\r\n            ],\r\n            spine_bend: typeof this.wasmModule.get_wolf_anim_spine_bend === 'function' ? \r\n                this.wasmModule.get_wolf_anim_spine_bend(wolfIndex) : 0,\r\n            tail_angle: typeof this.wasmModule.get_wolf_anim_tail_angle === 'function' ? \r\n                this.wasmModule.get_wolf_anim_tail_angle(wolfIndex) : 0,\r\n            head_pitch: typeof this.wasmModule.get_wolf_anim_head_pitch === 'function' ? \r\n                this.wasmModule.get_wolf_anim_head_pitch(wolfIndex) : 0,\r\n            head_yaw: typeof this.wasmModule.get_wolf_anim_head_yaw === 'function' ? \r\n                this.wasmModule.get_wolf_anim_head_yaw(wolfIndex) : 0,\r\n            ear_rotation: [\r\n                typeof this.wasmModule.get_wolf_anim_ear_rotation === 'function' ? \r\n                    this.wasmModule.get_wolf_anim_ear_rotation(wolfIndex, 0) : 0,\r\n                typeof this.wasmModule.get_wolf_anim_ear_rotation === 'function' ? \r\n                    this.wasmModule.get_wolf_anim_ear_rotation(wolfIndex, 1) : 0\r\n            ],\r\n            body_stretch: typeof this.wasmModule.get_wolf_anim_body_stretch === 'function' ? \r\n                this.wasmModule.get_wolf_anim_body_stretch(wolfIndex) : 1,\r\n            body_offset_y: typeof this.wasmModule.get_wolf_anim_body_offset_y === 'function' ? \r\n                this.wasmModule.get_wolf_anim_body_offset_y(wolfIndex) : 0,\r\n            fur_ruffle: typeof this.wasmModule.get_wolf_anim_fur_ruffle === 'function' ? \r\n                this.wasmModule.get_wolf_anim_fur_ruffle(wolfIndex) : 0,\r\n        };\r\n\r\n        // Update wolf object with WASM data\r\n        wolf.legPositions = animData.leg_x.map((x, i) => ({ x, y: animData.leg_y[i] }));\r\n        wolf.spineBend = animData.spine_bend;\r\n        wolf.tailPosition = animData.tail_angle; // Using existing property for now\r\n        wolf.headPitch = animData.head_pitch;\r\n        wolf.headYaw = animData.head_yaw;\r\n        wolf.earRotation = animData.ear_rotation[0]; // Using one ear rotation for simplicity\r\n        wolf.bodyStretch = animData.body_stretch;\r\n        wolf.bodyBob = animData.body_offset_y; // Using existing property for now\r\n        wolf.furMovement = { ripple: animData.fur_ruffle, flow: 0, ruffled: animData.fur_ruffle > 0.05 }; // Map to existing furMovement structure\r\n\r\n        // The old procedural animations are now driven by WASM, so these can be removed/modified\r\n        // Apply breathing (still JS-driven for now)\r\n        const breathing = this.proceduralAnimations.get('breathing');\r\n        const breath = breathing.calculateBreathing(wolf, time);\r\n        wolf.breathingOffset = breath.chestExpansion;\r\n        wolf.bellyOffset = breath.bellyExpansion;\r\n    }\r\n    \r\n    applyIdleAnimation(wolf, animation, time) {\r\n        // Ear twitching (can be driven by WASM ear_rotation)\r\n        this._smoothProp(wolf, 'earRotation', wolf.earRotation || 0, 8); // Use WASM data\r\n        \r\n        // Blinking\r\n        if (this._chance(wolf, animation.blinking.probability)) {\r\n            wolf.blinkTime = time\r\n            wolf.blinkDuration = animation.blinking.duration\r\n        }\r\n        \r\n        wolf.isBlinking = wolf.blinkTime && time - wolf.blinkTime < wolf.blinkDuration\r\n    }\r\n    \r\n    applyLocomotionAnimation(wolf, animation, _time) {\r\n        // Leg animation is now driven by WASM `wolf.legPositions`\r\n        // Body bobbing (can be driven by WASM body_offset_y)\r\n        this._smoothProp(wolf, 'bodyBob', wolf.bodyBob || 0, 10); // Use WASM data\r\n        this._smoothProp(wolf, 'headBob', wolf.headBob || 0, 10); // Placeholder, WASM head_pitch/yaw will be more direct\r\n        \r\n        // Ears pinned back when running fast (can be driven by WASM ear_rotation)\r\n        if (animation.earsPinned) {\r\n            this._smoothProp(wolf, 'earRotation', wolf.earRotation || 0.4, 12); // Use WASM data\r\n        }\r\n    }\r\n    \r\n    applyProwlingAnimation(wolf, animation, time) {\r\n        // Lower body position (can be driven by WASM body_offset_y)\r\n        this._smoothProp(wolf, 'bodyLowered', (wolf.bodyBob || 0) * 1000, 10); // Map bodyBob to bodyLowered\r\n        this._smoothProp(wolf, 'bodySway', Math.sin(time * 0.002) * 1, 10); // Retain JS sway for now\r\n        \r\n        // Head scanning movement (can be driven by WASM head_yaw)\r\n        if (animation.headLowered.scanning) {\r\n            wolf.headScan = wolf.headYaw; // Use WASM data\r\n        }\r\n        \r\n        // Alert ears (can be driven by WASM ear_rotation)\r\n        this._smoothProp(wolf, 'earRotation', wolf.earRotation || 0, 10); // Use WASM data\r\n        this._smoothProp(wolf, 'earAlertness', wolf.earRotation ? 1 : 0, 10); // Map earRotation to alertness\r\n        \r\n        // Careful leg placement is now driven by WASM `wolf.legPositions`\r\n    }\r\n    \r\n    applyLungingAnimation(wolf, animation, _time) {\r\n        // Body stretch effect is now driven by WASM `wolf.bodyStretch`\r\n        this._smoothProp(wolf, 'bodyStretch', wolf.bodyStretch || 1, 14); // Use WASM data\r\n        \r\n        // Legs extended\r\n        wolf.frontLegExtension = (wolf.bodyStretch - 1) * 20; // Derive from WASM stretch\r\n        wolf.rearLegExtension = (wolf.bodyStretch - 1) * 15; // Derive from WASM stretch\r\n        wolf.clawsOut = wolf.bodyStretch > 1.1; // Derive from WASM stretch\r\n        \r\n        // Mouth open with teeth\r\n        wolf.mouthOpen = animation.mouthOpen.openAmount; // Still JS-driven\r\n        wolf.teethVisible = animation.mouthOpen.teethVisible; // Still JS-driven\r\n        \r\n        // Fur ripple effect (now driven by WASM fur_ruffle)\r\n        wolf.furRipple = wolf.furMovement?.ripple || 0;\r\n    }\r\n    \r\n    applyAttackingAnimation(wolf, animation, time) {\r\n        // Bite sequence (still JS-driven for now)\r\n        if (!wolf.biteSequenceIndex) {wolf.biteSequenceIndex = 0}\r\n        if (!wolf.biteSequenceTime) {wolf.biteSequenceTime = time}\r\n        \r\n        const currentBite = animation.biteSequence[wolf.biteSequenceIndex]\r\n        const elapsed = time - wolf.biteSequenceTime\r\n        \r\n        if (elapsed < currentBite.duration) {\r\n            wolf.jawOpen = currentBite.jaw\r\n        } else {\r\n            wolf.biteSequenceIndex = (wolf.biteSequenceIndex + 1) % animation.biteSequence.length\r\n            wolf.biteSequenceTime = time\r\n        }\r\n        \r\n        // Head shake (can be driven by WASM head_yaw/pitch or new shake param)\r\n        this._smoothProp(wolf, 'headShake', Math.sin(time * animation.headShake.frequency) * animation.headShake.amplitude, 18);\r\n        \r\n        // Body tension (can be driven by WASM body_stretch/fur_ruffle)\r\n        wolf.bodyTension = animation.bodyTense.tensionLevel;\r\n    }\r\n    \r\n    applyHowlingAnimation(wolf, animation, time) {\r\n        if (!wolf.howlStartTime) {wolf.howlStartTime = time}\r\n        \r\n        const howlProgress = Math.min((time - wolf.howlStartTime) / animation.headTilt.duration, 1)\r\n        \r\n        // Head tilting back (can be driven by WASM head_pitch)\r\n        wolf.headTilt = wolf.headPitch; // Use WASM data\r\n        \r\n        // Mouth vibration (still JS-driven)\r\n        wolf.mouthOpen = animation.mouthOpen.openAmount\r\n        wolf.mouthVibration = Math.sin(time * 0.05) * animation.mouthOpen.vibration\r\n        \r\n        // Chest expansion for breath (still JS-driven for now)\r\n        this._smoothProp(wolf, 'chestExpansion', 1 + Math.sin(time * animation.chestExpansion.frequency) * \r\n                             (animation.chestExpansion.expansionAmount - 1), 10);\r\n        \r\n        // Sound wave effect (still JS-driven)\r\n        if (animation.soundWaves.visible) {\r\n            wolf.soundWavePhase = time * animation.soundWaves.frequency\r\n            wolf.soundWaveAmplitude = animation.soundWaves.amplitude\r\n        }\r\n    }\r\n    \r\n    applyHurtAnimation(wolf, animation, time) {\r\n        if (!wolf.hurtStartTime) {wolf.hurtStartTime = time}\r\n        \r\n        const hurtElapsed = time - wolf.hurtStartTime\r\n        \r\n        // Flinch effect (still JS-driven)\r\n        if (hurtElapsed < animation.flinch.duration) {\r\n            const flinchProgress = hurtElapsed / animation.flinch.duration\r\n            wolf.flinchOffset = animation.flinch.intensity * (1 - flinchProgress)\r\n        }\r\n        \r\n        // Body shake with dampening (still JS-driven)\r\n        const shakeFactor = animation.bodyShake.dampening**(hurtElapsed / 100)\r\n        this._smoothProp(wolf, 'bodyShake', Math.sin(time * animation.bodyShake.frequency) * \r\n                        animation.bodyShake.amplitude * shakeFactor, 18);\r\n        \r\n        // Ears and tail position (can be driven by WASM ear_rotation/tail_angle)\r\n        this._smoothProp(wolf, 'earRotation', wolf.earRotation || animation.earsFlat.rotation, 14); // Use WASM data\r\n        this._smoothProp(wolf, 'tailTucked', wolf.tailPosition || animation.tailTucked.tuckAmount, 14); // Use WASM data\r\n    }\r\n    \r\n    updateParticleEffects(wolf, deltaTime) {\r\n        if (!wolf.particleSystem) {\r\n            wolf.particleSystem = new ParticleSystem()\r\n        }\r\n        \r\n        // Emit dust when running\r\n        if (wolf.state === 'running' && wolf.isGrounded) {\r\n            const dustEffect = this.particleEffects.get('runDust')\r\n            const ex = wolf.position.x - wolf.facing * 20\r\n            const ey = wolf.position.y + wolf.height / 2\r\n            if (typeof wolf.particleSystem.emit === 'function') {\r\n                wolf.particleSystem.emit(ex, ey, dustEffect)\r\n            } else if (typeof wolf.particleSystem.createDustCloud === 'function') {\r\n                wolf.particleSystem.createDustCloud(ex, ey, 20)\r\n            }\r\n        }\r\n        \r\n        // Emit sound waves when howling\r\n        if (wolf.state === 'howling') {\r\n            const soundEffect = this.particleEffects.get('soundWaves')\r\n            const ex = wolf.position.x + wolf.facing * 30\r\n            const ey = wolf.position.y - wolf.height / 4\r\n            if (typeof wolf.particleSystem.emit === 'function') {\r\n                wolf.particleSystem.emit(ex, ey, soundEffect)\r\n            } else if (typeof wolf.particleSystem.createSparkle === 'function') {\r\n                wolf.particleSystem.createSparkle(ex, ey)\r\n            }\r\n        }\r\n        \r\n        // Update all particles\r\n        wolf.particleSystem.update(deltaTime)\r\n    }\r\n    \r\n    // Enhanced rendering with all animation effects\r\n    renderAnimatedWolf(ctx, wolf, camera) {\r\n        // Performance optimization: Check if wolf should be rendered\r\n        const distance = Math.sqrt(\r\n            (wolf.position.x - camera.x) ** 2 + \r\n            (wolf.position.y - camera.y) ** 2\r\n        );\r\n        \r\n        // LOD-based rendering optimization\r\n        if (distance > 1500) {return;} // Don't render very distant wolves\r\n        \r\n        const isDetailed = distance < 500;\r\n        const isReduced = distance < 1000;\r\n        \r\n        ctx.save()\r\n        \r\n        // Calculate screen position\r\n        const screenX = wolf.position.x - camera.x\r\n        const screenY = wolf.position.y - camera.y\r\n        \r\n        // Apply transformations\r\n        ctx.translate(screenX, screenY)\r\n        \r\n        // Secondary motion from smoothed velocity\r\n        const svx = wolf._smVelX || 0\r\n        const svy = wolf._smVelY || 0\r\n        const speed = Math.sqrt(svx * svx + svy * svy)\r\n        const leanAngle = wolf.spineBend || 0; // Use WASM spine_bend\r\n        if (leanAngle) { ctx.rotate(leanAngle) }\r\n        \r\n        // Apply body stretch for lunging\r\n        const runStretch = 1 + Math.min(speed / (wolf.maxSpeed || 350), 1) * 0.05\r\n        const stretchX = (wolf.bodyStretch || 1) * runStretch\r\n        const stretchY = 2 - stretchX // Inverse stretch to maintain volume\r\n        ctx.scale(wolf.size * wolf.facing * stretchX, wolf.size * stretchY)\r\n        \r\n        // Apply body shake for hurt animation\r\n        if (wolf.bodyShake) {\r\n            ctx.translate(wolf.bodyShake, 0)\r\n        }\r\n        \r\n        // Apply flinch offset\r\n        if (wolf.flinchOffset) {\r\n            ctx.translate(-wolf.facing * wolf.flinchOffset, -wolf.flinchOffset * 0.5)\r\n        }\r\n        \r\n        // Draw shadow with animation (skip for distant wolves)\r\n        if (isReduced) {\r\n            this.drawAnimatedShadow(ctx, wolf)\r\n        }\r\n        \r\n        // Draw animated body parts with LOD\r\n        if (isDetailed) {\r\n            // Full detail rendering\r\n            this.drawAnimatedTail(ctx, wolf)\r\n            this.drawAnimatedLegs(ctx, wolf, 'hind')\r\n            this.drawAnimatedBody(ctx, wolf)\r\n            this.drawAnimatedLegs(ctx, wolf, 'front')\r\n            this.drawAnimatedNeck(ctx, wolf)\r\n            this.drawAnimatedHead(ctx, wolf)\r\n        } else if (isReduced) {\r\n            // Reduced detail rendering - skip some parts\r\n            this.drawAnimatedBody(ctx, wolf)\r\n            this.drawAnimatedHead(ctx, wolf)\r\n        } else {\r\n            // Minimal detail - just basic shape\r\n            this.drawSimplifiedWolf(ctx, wolf)\r\n        }\r\n        \r\n        // Draw particle effects only for nearby wolves\r\n        if (isDetailed && wolf.particleSystem) {\r\n            wolf.particleSystem.render(ctx, camera)\r\n        }\r\n        \r\n        // Draw UI elements only for close wolves\r\n        if (isReduced) {\r\n            this.drawWolfUI(ctx, wolf)\r\n        }\r\n        \r\n        ctx.restore()\r\n    }\r\n    \r\n    /**\r\n     * Draw simplified wolf for distant LOD\r\n     * @param {CanvasRenderingContext2D} ctx - Canvas context\r\n     * @param {Object} wolf - Wolf object\r\n     */\r\n    drawSimplifiedWolf(ctx, wolf) {\r\n        // Draw simple wolf shape for distant rendering\r\n        ctx.fillStyle = wolf.color || '#8B4513'\r\n        ctx.beginPath()\r\n        ctx.ellipse(0, 0, wolf.size * 20, wolf.size * 12, 0, 0, Math.PI * 2)\r\n        ctx.fill()\r\n        \r\n        // Simple head\r\n        ctx.beginPath()\r\n        ctx.ellipse(wolf.facing * wolf.size * 15, -wolf.size * 8, wolf.size * 8, wolf.size * 6, 0, 0, Math.PI * 2)\r\n        ctx.fill()\r\n    }\r\n    \r\n    drawAnimatedShadow(ctx, wolf) {\r\n        const speed = Math.sqrt((wolf._smVelX||0)**2 + (wolf._smVelY||0)**2)\r\n        const moveScale = 1 + Math.min(speed / (wolf.maxSpeed || 350), 1) * 0.15\r\n        const shadowScale = wolf.state === 'lunging' ? 1.2 * moveScale : moveScale\r\n        const shadowAlpha = wolf.isGrounded ? 0.32 : 0.12\r\n        \r\n        ctx.fillStyle = `rgba(0, 0, 0, ${shadowAlpha})`\r\n        ctx.beginPath()\r\n        ctx.ellipse(0, wolf.height / 2 + 5, wolf.width / 3 * shadowScale, 8, 0, 0, Math.PI * 2)\r\n        ctx.fill()\r\n    }\r\n    \r\n    drawAnimatedTail(ctx, wolf) {\r\n        ctx.save()\r\n        \r\n        // Base tail position\r\n        const baseTailX = -wolf.width * 0.35\r\n        let baseTailY = -wolf.height * 0.1\r\n        \r\n        // Adjust for body lowered (prowling)\r\n        if (wolf.bodyLowered) {\r\n            baseTailY += wolf.bodyLowered * 0.5\r\n        }\r\n        \r\n        ctx.translate(baseTailX, baseTailY)\r\n        \r\n        // Draw segmented tail with physics\r\n        if (wolf.tailSegments) {\r\n            let currentX = 0\r\n            let currentY = 0\r\n            let currentAngle = wolf.tailPosition || 0; // Use WASM tail_angle\r\n            \r\n            wolf.tailSegments.forEach((segment, i) => {\r\n                ctx.save()\r\n                ctx.translate(currentX, currentY)\r\n                ctx.rotate(currentAngle + segment.angle)\r\n                \r\n                // Tail segment\r\n                const segmentWidth = 8 - i * 1.2\r\n                const segmentLength = segment.length\r\n                \r\n                ctx.fillStyle = i % 2 === 0 ? wolf.colors.primary : wolf.colors.secondary\r\n                ctx.fillRect(0, -segmentWidth/2, segmentLength, segmentWidth)\r\n                \r\n                // Update position for next segment\r\n                currentX += Math.cos(currentAngle + segment.angle) * segmentLength\r\n                currentY += Math.sin(currentAngle + segment.angle) * segmentLength\r\n                currentAngle += segment.angle\r\n                \r\n                ctx.restore()\r\n            })\r\n        } else {\r\n            // Fallback simple tail\r\n            ctx.rotate(wolf.tailPosition || 0)\r\n            ctx.fillStyle = wolf.colors.primary\r\n            ctx.beginPath()\r\n            ctx.moveTo(0, 0)\r\n            ctx.quadraticCurveTo(-15, 5, -25, 15)\r\n            ctx.quadraticCurveTo(-20, 20, -10, 18)\r\n            ctx.quadraticCurveTo(-5, 10, 0, 0)\r\n            ctx.fill()\r\n        }\r\n        \r\n        ctx.restore()\r\n    }\r\n    \r\n    drawAnimatedLegs(ctx, wolf, type) {\r\n        const legPositions = wolf.legPositions || [] // Now populated from WASM\r\n        const isHind = type === 'hind'\r\n        const startIndex = isHind ? 0 : 2\r\n        \r\n        for (let i = startIndex; i < startIndex + 2; i++) {\r\n            const legPos = legPositions[i] || { x: 0, y: 0 }\r\n            const baseX = isHind ? \r\n                -wolf.width * (0.25 - (i % 2) * 0.1) : \r\n                wolf.width * (0.15 + (i % 2) * 0.1)\r\n            const baseY = wolf.height * 0.2\r\n            \r\n            ctx.save()\r\n            ctx.translate(baseX + legPos.x * 100, baseY + legPos.y * 100) // Scale WASM values\r\n            \r\n            // Upper leg\r\n            ctx.fillStyle = wolf.colors.primary\r\n            ctx.fillRect(0, 0, 10, 15 - legPos.y * 50) // Adjust size based on WASM y-pos\r\n            \r\n            // Lower leg\r\n            ctx.translate(0, 15 - legPos.y * 50)\r\n            ctx.rotate(legPos.y * 0.05) // Slight rotation based on movement\r\n            ctx.fillRect(0, 0, 8, 10 + legPos.y * 50)\r\n            \r\n            // Paw\r\n            ctx.translate(0, 10 + legPos.y * 50)\r\n            ctx.fillStyle = wolf.colors.secondary\r\n            ctx.fillRect(-1, 0, 10, 5)\r\n            \r\n            // Claws (visible when attacking or lunging)\r\n            if (wolf.clawsOut) {\r\n                ctx.fillStyle = wolf.colors.claws\r\n                for (let j = 0; j < 3; j++) {\r\n                    ctx.fillRect(j * 3, 4, 2, 4)\r\n                }\r\n            }\r\n            \r\n            ctx.restore()\r\n        }\r\n    }\r\n    \r\n    drawAnimatedBody(ctx, wolf) {\r\n        ctx.save()\r\n        \r\n        // Apply body lowered for prowling (now driven by WASM bodyBob)\r\n        if (wolf.bodyBob) {\r\n            ctx.translate(0, wolf.bodyBob * 100); // Scale WASM body_offset_y\r\n        }\r\n        \r\n        // Apply body bob for movement (now directly from WASM bodyBob)\r\n        // No longer need separate wolf.bodyLowered, consolidate to wolf.bodyBob\r\n        \r\n        // Main body with breathing\r\n        const breathY = wolf.breathingOffset || 0\r\n        const chestExpansion = wolf.chestExpansion || 1\r\n        \r\n        ctx.fillStyle = wolf.colors.primary\r\n        ctx.beginPath()\r\n        ctx.ellipse(0, breathY, wolf.width * 0.35 * chestExpansion * (wolf.bodyStretch || 1), wolf.height * 0.25, 0, 0, Math.PI * 2)\r\n        ctx.fill()\r\n        \r\n        // Belly with separate breathing\r\n        const bellyY = breathY + (wolf.bellyOffset || 0)\r\n        ctx.fillStyle = wolf.colors.belly\r\n        ctx.beginPath()\r\n        ctx.ellipse(0, bellyY + wolf.height * 0.1, wolf.width * 0.3 * (wolf.bodyStretch || 1), wolf.height * 0.15, 0, 0, Math.PI)\r\n        ctx.fill()\r\n        \r\n        // Animated fur texture\r\n        if (wolf.furMovement) {\r\n            this.drawAnimatedFur(ctx, wolf, 0, breathY, wolf.width * 0.35, wolf.height * 0.25)\r\n        }\r\n        \r\n        ctx.restore()\r\n    }\r\n    \r\n    drawAnimatedNeck(ctx, wolf) {\r\n        ctx.save()\r\n        \r\n        // Apply head bob (now derived from WASM body_offset_y)\r\n        if (wolf.bodyBob) {\r\n            ctx.translate(0, wolf.bodyBob * 50) // Scale WASM body_offset_y\r\n        }\r\n        \r\n        ctx.fillStyle = wolf.colors.primary\r\n        ctx.beginPath()\r\n        ctx.moveTo(wolf.width * 0.15, -wolf.height * 0.1)\r\n        ctx.quadraticCurveTo(wolf.width * 0.25, -wolf.height * 0.05, wolf.width * 0.3, -wolf.height * 0.15)\r\n        ctx.quadraticCurveTo(wolf.width * 0.25, wolf.height * 0.05, wolf.width * 0.15, wolf.height * 0.1)\r\n        ctx.fill()\r\n        \r\n        ctx.restore()\r\n    }\r\n    \r\n    drawAnimatedHead(ctx, wolf) {\r\n        ctx.save()\r\n        ctx.translate(wolf.width * 0.35, -wolf.height * 0.15)\r\n        \r\n        // Apply head tilt for howling (now driven by WASM head_pitch)\r\n        if (wolf.headPitch) {\r\n            ctx.rotate(wolf.headPitch)\r\n        }\r\n        \r\n        // Apply head shake for attacking (still JS-driven for now)\r\n        if (wolf.headShake) {\r\n            ctx.translate(wolf.headShake, 0)\r\n        }\r\n        \r\n        // Apply head scan for prowling (now driven by WASM head_yaw)\r\n        if (wolf.headYaw) {\r\n            ctx.rotate(wolf.headYaw)\r\n        }\r\n        \r\n        // Apply head bob (now derived from WASM body_offset_y)\r\n        if (wolf.bodyBob) {\r\n            ctx.translate(0, wolf.bodyBob * 50) // Scale WASM body_offset_y\r\n        }\r\n        \r\n        // Head shape\r\n        ctx.fillStyle = wolf.colors.primary\r\n        ctx.beginPath()\r\n        ctx.moveTo(0, 0)\r\n        ctx.quadraticCurveTo(10, -5, 15, 0)\r\n        ctx.quadraticCurveTo(20, 3, 25, 5)\r\n        ctx.lineTo(28, 8)\r\n        ctx.quadraticCurveTo(25, 10, 20, 10)\r\n        ctx.quadraticCurveTo(10, 8, 0, 10)\r\n        ctx.quadraticCurveTo(-5, 5, 0, 0)\r\n        ctx.fill()\r\n        \r\n        // Animated ears\r\n        this.drawAnimatedEars(ctx, wolf)\r\n        \r\n        // Animated mouth\r\n        this.drawAnimatedMouth(ctx, wolf)\r\n        \r\n        // Animated eyes\r\n        this.drawAnimatedEyes(ctx, wolf)\r\n        \r\n        // Sound waves for howling\r\n        if (wolf.soundWavePhase !== null) {\r\n            this.drawSoundWaves(ctx, wolf)\r\n        }\r\n        \r\n        ctx.restore()\r\n    }\r\n    \r\n    drawAnimatedEars(ctx, wolf) {\r\n        const baseRotation = wolf.earRotation || 0 // Use WASM ear_rotation\r\n        const alertness = wolf.earAlertness || 0\r\n        \r\n        // Left ear\r\n        ctx.save()\r\n        ctx.translate(5, -3)\r\n        ctx.rotate(baseRotation - alertness * 0.1)\r\n        \r\n        ctx.fillStyle = wolf.colors.primary\r\n        ctx.beginPath()\r\n        ctx.moveTo(0, 0)\r\n        ctx.lineTo(-3, -8 - alertness * 2)\r\n        ctx.lineTo(3, -8 - alertness * 2)\r\n        ctx.closePath()\r\n        ctx.fill()\r\n        \r\n        // Inner ear\r\n        ctx.fillStyle = wolf.colors.belly\r\n        ctx.beginPath()\r\n        ctx.moveTo(0, -2)\r\n        ctx.lineTo(-1, -6 - alertness)\r\n        ctx.lineTo(1, -6 - alertness)\r\n        ctx.closePath()\r\n        ctx.fill()\r\n        ctx.restore()\r\n        \r\n        // Right ear\r\n        ctx.save()\r\n        ctx.translate(8, -2)\r\n        ctx.rotate(baseRotation + alertness * 0.1)\r\n        \r\n        ctx.fillStyle = wolf.colors.secondary\r\n        ctx.beginPath()\r\n        ctx.moveTo(0, 0)\r\n        ctx.lineTo(-2, -7 - alertness * 2)\r\n        ctx.lineTo(3, -7 - alertness * 2)\r\n        ctx.closePath()\r\n        ctx.fill()\r\n        ctx.restore()\r\n    }\r\n    \r\n    drawAnimatedMouth(ctx, wolf) {\r\n        const mouthOpen = wolf.mouthOpen || wolf.jawOpen || 0\r\n        const mouthVibration = wolf.mouthVibration || 0\r\n        \r\n        // Snout\r\n        ctx.fillStyle = wolf.colors.secondary\r\n        ctx.beginPath()\r\n        ctx.moveTo(20, 5)\r\n        ctx.quadraticCurveTo(25, 6, 28, 8)\r\n        ctx.quadraticCurveTo(25, 9 + mouthOpen * 3, 20, 9 + mouthOpen * 3)\r\n        ctx.fill()\r\n        \r\n        // Open mouth\r\n        if (mouthOpen > 0) {\r\n            // Jaw\r\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.7)'\r\n            ctx.beginPath()\r\n            ctx.moveTo(20, 9)\r\n            ctx.quadraticCurveTo(24, 9 + mouthOpen * 5 + mouthVibration, \r\n                                 28, 9 + mouthOpen * 3 + mouthVibration)\r\n            ctx.quadraticCurveTo(24, 11 + mouthOpen * 5 + mouthVibration, \r\n                                 20, 11 + mouthOpen * 5)\r\n            ctx.fill()\r\n            \r\n            // Teeth\r\n            if (wolf.teethVisible || mouthOpen > 0.5) {\r\n                ctx.fillStyle = '#ffffff'\r\n                \r\n                // Upper fangs\r\n                ctx.beginPath()\r\n                ctx.moveTo(22, 9)\r\n                ctx.lineTo(21, 11 + mouthOpen * 2)\r\n                ctx.lineTo(23, 11 + mouthOpen * 2)\r\n                ctx.closePath()\r\n                ctx.fill()\r\n                \r\n                ctx.beginPath()\r\n                ctx.moveTo(25, 9)\r\n                ctx.lineTo(24, 11 + mouthOpen * 2)\r\n                ctx.lineTo(26, 11 + mouthOpen * 2)\r\n                ctx.closePath()\r\n                ctx.fill()\r\n                \r\n                // Lower fangs\r\n                if (mouthOpen > 0.7) {\r\n                    ctx.beginPath()\r\n                    ctx.moveTo(23, 11 + mouthOpen * 4)\r\n                    ctx.lineTo(22, 9 + mouthOpen * 4)\r\n                    ctx.lineTo(24, 9 + mouthOpen * 4)\r\n                    ctx.closePath()\r\n                    ctx.fill()\r\n                }\r\n            }\r\n            \r\n            // Tongue\r\n            if (mouthOpen > 0.3 && wolf.state !== 'attacking') {\r\n                ctx.fillStyle = 'rgba(255, 100, 100, 0.8)'\r\n                ctx.beginPath()\r\n                ctx.ellipse(24, 10 + mouthOpen * 3, 3, 2 + mouthOpen * 2, 0.2, 0, Math.PI)\r\n                ctx.fill()\r\n            }\r\n        }\r\n        \r\n        // Nose\r\n        ctx.fillStyle = wolf.colors.nose\r\n        ctx.beginPath()\r\n        ctx.arc(28, 8, 2, 0, Math.PI * 2)\r\n        ctx.fill()\r\n    }\r\n    \r\n    drawAnimatedEyes(ctx, wolf) {\r\n        // Check if blinking\r\n        if (wolf.isBlinking) {\r\n            // Closed eye line\r\n            ctx.strokeStyle = wolf.colors.secondary\r\n            ctx.lineWidth = 2\r\n            ctx.beginPath()\r\n            ctx.moveTo(10, 3)\r\n            ctx.lineTo(16, 3)\r\n            ctx.stroke()\r\n            return\r\n        }\r\n        \r\n        // Eye glow effect\r\n        if (wolf.state === 'prowling' || wolf.state === 'lunging' || wolf.state === 'attacking') {\r\n            ctx.shadowColor = wolf.colors.eyes\r\n            ctx.shadowBlur = 8\r\n        }\r\n        \r\n        // Eye white\r\n        ctx.fillStyle = '#ffffff'\r\n        ctx.beginPath()\r\n        ctx.ellipse(12, 3, 4, 3, -0.2, 0, Math.PI * 2)\r\n        ctx.fill()\r\n        \r\n        // Iris with dynamic size\r\n        const pupilDilation = wolf.state === 'attacking' ? 0.7 : \r\n                             wolf.state === 'prowling' ? 0.5 : 0.3\r\n        ctx.fillStyle = wolf.colors.eyes\r\n        ctx.beginPath()\r\n        ctx.arc(13, 3, 2, 0, Math.PI * 2)\r\n        ctx.fill()\r\n        \r\n        // Pupil\r\n        ctx.fillStyle = '#000000'\r\n        ctx.beginPath()\r\n        ctx.arc(13.5, 3, 1 * (1 - pupilDilation), 0, Math.PI * 2)\r\n        ctx.fill()\r\n        \r\n        // Eye shine\r\n        ctx.fillStyle = 'rgba(255, 255, 255, 0.7)'\r\n        ctx.beginPath()\r\n        ctx.arc(12, 2, 0.5, 0, Math.PI * 2)\r\n        ctx.fill()\r\n        \r\n        ctx.shadowBlur = 0\r\n    }\r\n    \r\n    drawAnimatedFur(ctx, wolf, x, y, width, height) {\r\n        ctx.strokeStyle = wolf.colors.secondary\r\n        ctx.lineWidth = 0.5\r\n        ctx.globalAlpha = 0.4\r\n        \r\n        const furLines = 12\r\n        const ripple = (wolf.furMovement?.ripple || 0) + wolf.furRuffle; // Use WASM fur_ruffle\r\n        const flow = wolf.furMovement?.flow || 0\r\n        const ruffled = wolf.furMovement?.ruffled || false\r\n        \r\n        for (let i = 0; i < furLines; i++) {\r\n            const angle = (i / furLines) * Math.PI * 2\r\n            const baseX = x + Math.cos(angle) * width * 0.7\r\n            const baseY = y + Math.sin(angle) * height * 0.7\r\n            \r\n            // Add movement to fur\r\n            const offsetX = Math.sin(wolf.animationTime * 0.01 + i) * ripple * 10\r\n            const offsetY = Math.cos(wolf.animationTime * 0.01 + i) * ripple * 5\r\n            \r\n            ctx.beginPath()\r\n            ctx.moveTo(baseX, baseY)\r\n            \r\n            if (ruffled) {\r\n                // Spiky fur when agitated\r\n                ctx.lineTo(baseX + Math.cos(angle) * 8 + offsetX, \r\n                          baseY + Math.sin(angle) * 8 + offsetY)\r\n            } else {\r\n                // Smooth fur\r\n                ctx.quadraticCurveTo(\r\n                    baseX + Math.cos(angle) * 4 + offsetX * 0.5,\r\n                    baseY + Math.sin(angle) * 4 + offsetY * 0.5,\r\n                    baseX + Math.cos(angle + flow) * 6 + offsetX,\r\n                    baseY + Math.sin(angle + flow) * 6 + offsetY\r\n                )\r\n            }\r\n            ctx.stroke()\r\n        }\r\n        \r\n        ctx.globalAlpha = 1\r\n    }\r\n    \r\n    drawSoundWaves(ctx, wolf) {\r\n        ctx.save()\r\n        ctx.globalAlpha = 0.3\r\n        ctx.strokeStyle = wolf.colors.eyes\r\n        ctx.lineWidth = 2\r\n        \r\n        // Draw expanding circular waves\r\n        for (let i = 0; i < 3; i++) {\r\n            const phase = wolf.soundWavePhase + i * Math.PI / 3\r\n            const radius = 10 + Math.sin(phase) * wolf.soundWaveAmplitude + i * 15\r\n            const alpha = 0.3 - i * 0.1\r\n            \r\n            ctx.globalAlpha = alpha\r\n            ctx.beginPath()\r\n            ctx.arc(30, 5, radius, -Math.PI / 3, Math.PI / 3)\r\n            ctx.stroke()\r\n        }\r\n        \r\n        ctx.restore()\r\n    }\r\n    \r\n    drawWolfUI(ctx, wolf) {\r\n        // Draw health bar for special wolves\r\n        if (wolf.isAlpha || wolf.health < wolf.maxHealth) {\r\n            ctx.save()\r\n            ctx.scale(1 / wolf.size, 1 / wolf.size)\r\n            \r\n            const barWidth = 60\r\n            const barHeight = 6\r\n            const barY = -wolf.height * 0.5 - 20\r\n            \r\n            // Background\r\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.5)'\r\n            ctx.fillRect(-barWidth / 2, barY, barWidth, barHeight)\r\n            \r\n            // Health\r\n            const healthPercent = wolf.health / wolf.maxHealth\r\n            ctx.fillStyle = healthPercent > 0.5 ? '#4caf50' : \r\n                           healthPercent > 0.25 ? '#ff9800' : '#f44336'\r\n            ctx.fillRect(-barWidth / 2, barY, barWidth * healthPercent, barHeight)\r\n            \r\n            // Border\r\n            ctx.strokeStyle = wolf.isAlpha ? '#ffd700' : '#ffffff'\r\n            ctx.lineWidth = 1\r\n            ctx.strokeRect(-barWidth / 2, barY, barWidth, barHeight)\r\n            \r\n            // Status icons\r\n            if (wolf.isAlpha) {\r\n                ctx.font = '12px Arial'\r\n                ctx.textAlign = 'center'\r\n                ctx.fillText('👑', 0, barY - 5)\r\n            }\r\n            \r\n            // State indicator\r\n            if (wolf.state === 'prowling') {\r\n                ctx.fillText('👁', -35, barY + 5)\r\n            } else if (wolf.state === 'howling') {\r\n                ctx.fillText('🔊', -35, barY + 5)\r\n            }\r\n            \r\n            ctx.restore()\r\n        }\r\n        \r\n        // Draw charge indicator for lunge\r\n        if (wolf.lungeState?.charging) {\r\n            ctx.save()\r\n            ctx.globalAlpha = 0.7\r\n            \r\n            const chargePercent = wolf.lungeState.chargeTime / wolf.lungeState.maxChargeTime\r\n            const indicatorRadius = 15\r\n            \r\n            // Charging circle\r\n            ctx.strokeStyle = `hsl(${chargePercent * 60}, 100%, 50%)`\r\n            ctx.lineWidth = 3\r\n            ctx.beginPath()\r\n            ctx.arc(0, -wolf.height * 0.7, indicatorRadius, \r\n                   -Math.PI / 2, -Math.PI / 2 + Math.PI * 2 * chargePercent)\r\n            ctx.stroke()\r\n            \r\n            // Pulse effect\r\n            if (chargePercent >= 1) {\r\n                ctx.globalAlpha = 0.3 + Math.sin(wolf.animationTime * 0.01) * 0.3\r\n                ctx.strokeStyle = '#ff0000'\r\n                ctx.beginPath()\r\n                ctx.arc(0, -wolf.height * 0.7, indicatorRadius + 5, 0, Math.PI * 2)\r\n                ctx.stroke()\r\n            }\r\n            \r\n            ctx.restore()\r\n        }\r\n    }\r\n}\r\n\r\n// Export the animation system\r\nexport default WolfAnimationSystem"],"names":["Particle","constructor","x","y","config","this","vx","vy","ax","ay","life","maxLife","size","sizeDecay","color","r","g","b","alpha","alphaDecay","rotation","rotationSpeed","trail","trailPositions","blendMode","glow","glowSize","shape","friction","bounce","gravity","turbulence","scaleWithVelocity","update","deltaTime","s","Number","globalThis","runSeedForVisuals","n1","n2","push","length","shift","Math","max","min","render","ctx","save","globalCompositeOperation","globalAlpha","strokeStyle","lineWidth","lineCap","beginPath","forEach","pos","i","moveTo","lineTo","stroke","gradient","createRadialGradient","addColorStop","fillStyle","arc","PI","fill","translate","rotate","drawSize","sqrt","fillRect","drawStar","closePath","restore","cx","cy","spikes","outerRadius","innerRadius","rot","step","cos","sin","ParticleEmitter","active","emissionRate","emissionTimer","lifetime","Infinity","age","particleConfig","spread","direction","system","emissionInterval","emit","angle","random","speed","addParticle","setPosition","stop","ParticleSystem","particles","emitters","filter","particle","emitter","particlesByBlendMode","Object","entries","addEmitter","effect","count","round","emitRate","angleMin","emitAngle","angleMax","spdMin","particleSpeed","spdMax","sizeMin","particleSize","sizeMax","lifeSec","particleLife","particleColor","m","match","seed","r1","r2","expanding","createBloodSplatter","rA","rB","floor","createHitSpark","createDustCloud","radius","distance","px","py","createRollDust","offset","createBlockSpark","sparkAngle","createPerfectParryFlash","createEnemyDeathExplosion","createFootstep","clear","createSlashEffect","facing","spreadY","createShieldEffect","createBlockImpact","createBloodEffect","createDeathEffect","createRespawnEffect","startChargingEffect","createChargedSlash","chargePercent","extra","createDashTrail","dirX","dirY","len","nx","ny","createLandingImpact","strength","createSparkle","WolfAnimationSystem","animations","Map","proceduralAnimations","particleEffects","_dt","wasmModule","initializeAnimations","initializeProceduralAnimations","initializeParticleEffects","setWasmModule","_seedWolf","wolf","_animSeed","fx","position","fy","fp","furPattern","_animRngState","_rand","_chance","p","_lerp","a","t","_smoothNumber","current","target","rate","dt","_smoothProp","key","cur","_updateSmoothedVelocity","velocity","_smVelX","_smVelY","set","breathing","amplitude","frequency","earTwitch","probability","duration","maxRotation","tailSway","blinking","legCycle","phaseOffset","bodyBob","headBob","stretchFactor","tailStream","streamEffect","earsPinned","careful","bodyLowered","lowerAmount","sway","headLowered","scanning","scanSpeed","tailStill","tipTwitch","earsForward","alertness","bodyStretch","compressionStart","extensionPeak","legsExtended","frontExtension","rearExtension","clawsOut","mouthOpen","openAmount","teethVisible","earsBack","furRipple","intensity","biteSequence","jaw","headShake","clawSwipe","swipeSpeed","swipeArc","bodyTense","tensionLevel","headTilt","startAngle","endAngle","vibration","chestExpansion","expansionAmount","tailRaised","soundWaves","visible","flinch","earsFlat","tailTucked","tuckAmount","whimper","bodyShake","dampening","collapse","stages","legs","body","final","fadeOut","startDelay","calculateLegPosition","legIndex","time","anim","get","state","cycle","phase","placement","segments","calculateTailCurve","delay","windStrength","windEffect","ripple","flow","ruffled","idle","walking","running","prowling","attacking","hurt","howling","depth","bellyExpansion","applyAnimation","wolfIndex","id","get_wolf_anim_active","wasmExports","get_time_seconds","performance","now","animation","_lastAnimState","_stateBlend","applyProceduralAnimations","applyIdleAnimation","applyLocomotionAnimation","applyProwlingAnimation","applyLungingAnimation","applyAttackingAnimation","applyHowlingAnimation","applyHurtAnimation","updateParticleEffects","animData","leg_x","get_wolf_anim_leg_x","leg_y","get_wolf_anim_leg_y","spine_bend","get_wolf_anim_spine_bend","tail_angle","get_wolf_anim_tail_angle","head_pitch","get_wolf_anim_head_pitch","head_yaw","get_wolf_anim_head_yaw","ear_rotation","get_wolf_anim_ear_rotation","body_stretch","get_wolf_anim_body_stretch","body_offset_y","get_wolf_anim_body_offset_y","fur_ruffle","get_wolf_anim_fur_ruffle","legPositions","map","spineBend","tailPosition","headPitch","headYaw","earRotation","furMovement","breath","calculateBreathing","breathingOffset","bellyOffset","blinkTime","blinkDuration","isBlinking","_time","headScan","frontLegExtension","rearLegExtension","biteSequenceIndex","biteSequenceTime","currentBite","jawOpen","bodyTension","howlStartTime","mouthVibration","soundWavePhase","soundWaveAmplitude","hurtStartTime","hurtElapsed","flinchProgress","flinchOffset","shakeFactor","particleSystem","isGrounded","dustEffect","ex","ey","height","soundEffect","renderAnimatedWolf","camera","isDetailed","isReduced","screenX","screenY","svx","svy","leanAngle","runStretch","maxSpeed","stretchX","stretchY","scale","drawAnimatedShadow","drawAnimatedTail","drawAnimatedLegs","drawAnimatedBody","drawAnimatedNeck","drawAnimatedHead","drawSimplifiedWolf","drawWolfUI","ellipse","moveScale","shadowScale","shadowAlpha","width","baseTailX","baseTailY","tailSegments","currentX","currentY","currentAngle","segment","segmentWidth","segmentLength","colors","primary","secondary","quadraticCurveTo","type","isHind","startIndex","legPos","baseX","baseY","claws","j","breathY","bellyY","belly","drawAnimatedFur","drawAnimatedEars","drawAnimatedMouth","drawAnimatedEyes","drawSoundWaves","baseRotation","earAlertness","nose","shadowColor","eyes","shadowBlur","pupilDilation","furRuffle","offsetX","animationTime","offsetY","isAlpha","health","maxHealth","barWidth","barHeight","barY","healthPercent","strokeRect","font","textAlign","fillText","lungeState","charging","chargeTime","maxChargeTime","indicatorRadius"],"mappings":"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"}