{"version":3,"file":"player-animator.umd.js.map","sources":["../src/animation/animation-system.js","../src/animation/realistic-procedural-animator.js","../src/animation/player-animator.js"],"sourcesContent":["// Advanced Animation System for Smooth Character and Object Animations\r\n// Provides sprite animations, procedural animations, and smooth transitions\r\n\r\nexport class AnimationFrame {\r\n    constructor(x, y, width, height, duration = 100) {\r\n        this.x = x\r\n        this.y = y\r\n        this.width = width\r\n        this.height = height\r\n        this.duration = duration // milliseconds\r\n    }\r\n}\r\n\r\nexport class Animation {\r\n    constructor(name, frames, options = {}) {\r\n        this.name = name\r\n        this.frames = frames\r\n        this.loop = options.loop !== null && options.loop !== void 0 ? options.loop : true\r\n        this.pingPong = options.pingPong || false\r\n        this.speed = options.speed || 1.0\r\n        this.onComplete = options.onComplete || null\r\n        this.onFrame = options.onFrame || null\r\n        \r\n        this.currentFrame = 0\r\n        this.elapsedTime = 0\r\n        this.direction = 1\r\n        this.isPlaying = false\r\n        this.hasCompleted = false\r\n    }\r\n\r\n    play() {\r\n        this.isPlaying = true\r\n        this.hasCompleted = false\r\n        this.currentFrame = 0\r\n        this.elapsedTime = 0\r\n        this.direction = 1\r\n    }\r\n\r\n    stop() {\r\n        this.isPlaying = false\r\n        this.reset()\r\n    }\r\n\r\n    pause() {\r\n        this.isPlaying = false\r\n    }\r\n\r\n    resume() {\r\n        this.isPlaying = true\r\n    }\r\n\r\n    reset() {\r\n        this.currentFrame = 0\r\n        this.elapsedTime = 0\r\n        this.direction = 1\r\n        this.hasCompleted = false\r\n    }\r\n\r\n    update(deltaTime) {\r\n        if (!this.isPlaying || this.frames.length === 0) {\r\n            return\r\n        }\r\n\r\n        this.elapsedTime += deltaTime * this.speed * 1000 // Convert to milliseconds\r\n\r\n        const currentFrameData = this.frames[this.currentFrame]\r\n\r\n        // Handle frames with non-positive duration as indefinite holds\r\n        if (currentFrameData && currentFrameData.duration <= 0) {\r\n            if (!this.loop && this.currentFrame === this.frames.length - 1) {\r\n                this.isPlaying = false\r\n                this.hasCompleted = true\r\n                if (this.onComplete) {this.onComplete()}\r\n            }\r\n            return\r\n        }\r\n\r\n        if (this.elapsedTime >= currentFrameData.duration) {\r\n            this.elapsedTime -= currentFrameData.duration\r\n            \r\n            const previousFrame = this.currentFrame\r\n            this.currentFrame += this.direction\r\n\r\n            if (this.pingPong) {\r\n                if (this.currentFrame >= this.frames.length || this.currentFrame < 0) {\r\n                    this.direction *= -1\r\n                    this.currentFrame += this.direction * 2\r\n                }\r\n            } else if (this.currentFrame >= this.frames.length) {\r\n                    if (this.loop) {\r\n                        this.currentFrame = 0\r\n                    } else {\r\n                        this.currentFrame = this.frames.length - 1\r\n                        this.isPlaying = false\r\n                        this.hasCompleted = true\r\n                        if (this.onComplete) {this.onComplete()}\r\n                    }\r\n                }\r\n\r\n            if (this.onFrame && this.currentFrame !== previousFrame) {\r\n                this.onFrame(this.currentFrame, this.frames[this.currentFrame])\r\n            }\r\n        }\r\n    }\r\n\r\n    getCurrentFrame() {\r\n        if (this.frames.length === 0) {return null}\r\n        if (this.currentFrame < 0 || this.currentFrame >= this.frames.length) {return null}\r\n        return this.frames[this.currentFrame]\r\n    }\r\n\r\n    getProgress() {\r\n        if (this.frames.length <= 1) {return 0}\r\n        return this.currentFrame / (this.frames.length - 1)\r\n    }\r\n\r\n    // Utility: get frame by index with bounds checking\r\n    getFrameAt(index) {\r\n        if (index < 0 || index >= this.frames.length) {return null}\r\n        return this.frames[index]\r\n    }\r\n}\r\n\r\nexport class AnimationController {\r\n    constructor() {\r\n        this.animations = new Map()\r\n        this.currentAnimation = null\r\n        this.transitions = new Map()\r\n        this.blendTime = 0\r\n        this.blendFrom = null\r\n        this.blendProgress = 0\r\n    }\r\n\r\n    addAnimation(nameOrAnimation, maybeAnimation) {\r\n        if (typeof nameOrAnimation === 'string' && maybeAnimation) {\r\n            this.animations.set(nameOrAnimation, maybeAnimation)\r\n            return\r\n        }\r\n        const animation = nameOrAnimation\r\n        this.animations.set(animation.name, animation)\r\n    }\r\n\r\n    play(animationName, options = {}) {\r\n        const animation = this.animations.get(animationName)\r\n        if (!animation) {\r\n            // Animation not found: ${animationName}\r\n            return\r\n        }\r\n\r\n        const transition = options.transition || 0\r\n        \r\n        if (transition > 0 && this.currentAnimation) {\r\n            this.blendFrom = this.currentAnimation\r\n            this.blendTime = transition\r\n            this.blendProgress = 0\r\n        }\r\n\r\n        this.currentAnimation = animation\r\n        animation.play()\r\n    }\r\n\r\n    stop() {\r\n        if (this.currentAnimation) {\r\n            this.currentAnimation.stop()\r\n        }\r\n    }\r\n\r\n    update(deltaTime) {\r\n        if (this.blendTime > 0) {\r\n            this.blendProgress += deltaTime\r\n            if (this.blendProgress >= this.blendTime) {\r\n                this.blendTime = 0\r\n                this.blendFrom = null\r\n                this.blendProgress = 0\r\n            }\r\n        }\r\n\r\n        if (this.currentAnimation) {\r\n            this.currentAnimation.update(deltaTime)\r\n        }\r\n    }\r\n\r\n    getCurrentFrame() {\r\n        if (!this.currentAnimation) {return null}\r\n        return this.currentAnimation.getCurrentFrame()\r\n    }\r\n\r\n    getBlendFrames() {\r\n        if (this.blendTime === 0 || !this.blendFrom) {\r\n            return { current: this.getCurrentFrame(), blend: null, blendFactor: 0 }\r\n        }\r\n\r\n        const blendFactor = this.blendProgress / this.blendTime\r\n        return {\r\n            current: this.currentAnimation.getCurrentFrame(),\r\n            blend: this.blendFrom.getCurrentFrame(),\r\n            blendFactor: blendFactor\r\n        }\r\n    }\r\n\r\n    isPlaying(animationName) {\r\n        return this.currentAnimation && \r\n               this.currentAnimation.name === animationName && \r\n               this.currentAnimation.isPlaying\r\n    }\r\n\r\n    setSpeed(speed) {\r\n        if (this.currentAnimation) {\r\n            this.currentAnimation.speed = speed\r\n        }\r\n    }\r\n}\r\n\r\nexport class ProceduralAnimator {\r\n    constructor() {\r\n        this.animations = new Map()\r\n    }\r\n\r\n    // Enhanced breathing animation with state-based modulation\r\n    createBreathingAnimation(options = {}) {\r\n        const {\r\n            baseScale = 1.0,\r\n            intensity = 0.015,\r\n            speed = 2.0,\r\n            asymmetry = 0.2\r\n        } = options\r\n\r\n        return {\r\n            time: 0,\r\n            phase: 0,\r\n            breathRate: speed,\r\n            currentIntensity: intensity,\r\n            depthMod: 1.0,\r\n            asymmetryOffset: 0,\r\n            _buf: {\r\n                scaleX: baseScale,\r\n                scaleY: baseScale,\r\n                offsetY: 0,\r\n                chestExpansion: 0,\r\n                phase: 0,\r\n                intensity: 0\r\n            },\r\n\r\n            // State-based modulation\r\n            modulateForState(state) {\r\n                switch(state) {\r\n                    case 'running':\r\n                        this.depthMod = 0.3\r\n                        this.breathRate = speed * 3.0\r\n                        break\r\n                    case 'attacking':\r\n                        this.depthMod = 0.5\r\n                        this.breathRate = speed * 1.8\r\n                        break\r\n                    case 'blocking':\r\n                        this.depthMod = 0.2\r\n                        this.breathRate = speed * 1.3\r\n                        break\r\n                    case 'hurt':\r\n                        this.depthMod = 0.1\r\n                        this.breathRate = speed * 0.5\r\n                        break\r\n                    case 'dead':\r\n                        this.depthMod = 0.0\r\n                        this.breathRate = 0.0\r\n                        break\r\n                    default: // idle, rolling\r\n                        this.depthMod = 1.0\r\n                        this.breathRate = speed\r\n                }\r\n            },\r\n\r\n            update(deltaTime) {\r\n                const res = this._buf\r\n\r\n                if (this.breathRate <= 0) {\r\n                    res.scaleX = baseScale\r\n                    res.scaleY = baseScale\r\n                    res.offsetY = 0\r\n                    res.chestExpansion = 0\r\n                    res.phase = 0\r\n                    res.intensity = 0\r\n                    return res\r\n                }\r\n\r\n                this.time += deltaTime * this.breathRate\r\n                this.phase = Math.sin(this.time)\r\n\r\n                // Calculate breathing with realistic parameters\r\n                const currentIntensity = this.currentIntensity * this.depthMod\r\n                const breathScaleX = baseScale + this.phase * currentIntensity\r\n                const breathScaleY = baseScale + this.phase * currentIntensity * 0.7\r\n\r\n                // Add slight asymmetry for more natural feel\r\n                const asymmetryFactor = Math.sin(this.time * 0.7) * asymmetry\r\n                const finalScaleX = breathScaleX + asymmetryFactor * currentIntensity * 0.3\r\n\r\n                // Chest expansion effect (subtle upward movement)\r\n                const chestExpansion = this.phase * currentIntensity * 2\r\n\r\n                // Smooth transitions\r\n                const smoothFactor = 1 - Math.exp(-deltaTime * 5)\r\n                this.currentIntensity = this.currentIntensity + (currentIntensity - this.currentIntensity) * smoothFactor\r\n\r\n                res.scaleX = finalScaleX\r\n                res.scaleY = breathScaleY\r\n                res.offsetY = -chestExpansion * 0.5\r\n                res.chestExpansion = chestExpansion\r\n                res.phase = this.phase\r\n                res.intensity = currentIntensity\r\n                return res\r\n            }\r\n        }\r\n    }\r\n\r\n    // Bobbing animation for floating objects\r\n    createBobbingAnimation(amplitude = 5, speed = 2) {\r\n        return {\r\n            time: 0,\r\n            _buf: { offsetY: 0, rotation: 0 },\r\n            update(deltaTime) {\r\n                this.time += deltaTime * speed\r\n                const res = this._buf\r\n                res.offsetY = Math.sin(this.time) * amplitude\r\n                res.rotation = Math.sin(this.time * 0.5) * 0.05\r\n                return res\r\n            }\r\n        }\r\n    }\r\n\r\n    // Squash and stretch for impacts and jumps\r\n    createSquashStretch(intensity = 0.3, duration = 0.2) {\r\n        return {\r\n            time: 0,\r\n            active: false,\r\n            _buf: { scaleX: 1, scaleY: 1 },\r\n            trigger() {\r\n                this.time = 0\r\n                this.active = true\r\n            },\r\n            update(deltaTime) {\r\n                const res = this._buf\r\n\r\n                if (!this.active) {\r\n                    res.scaleX = 1\r\n                    res.scaleY = 1\r\n                    return res\r\n                }\r\n\r\n                this.time += deltaTime\r\n                const progress = Math.min(this.time / duration, 1)\r\n\r\n                if (progress >= 1) {\r\n                    this.active = false\r\n                    res.scaleX = 1\r\n                    res.scaleY = 1\r\n                    return res\r\n                }\r\n\r\n                // Elastic easing\r\n                const t = progress\r\n                const p = 0.3\r\n                const s = p / 4\r\n                const postFix = 2**(-10 * t) * Math.sin((t - s) * (2 * Math.PI) / p) + 1\r\n\r\n                const squash = 1 - postFix * intensity\r\n                const stretch = 1 + postFix * intensity * 0.5\r\n\r\n                res.scaleX = progress < 0.5 ? stretch : squash\r\n                res.scaleY = progress < 0.5 ? squash : stretch\r\n                return res\r\n            }\r\n        }\r\n    }\r\n\r\n    // Wobble effect for jelly-like movement\r\n    createWobble(frequency = 10, damping = 0.8, intensity = 0.1) {\r\n        return {\r\n            velocity: 0,\r\n            displacement: 0,\r\n            _buf: { scaleX: 1, scaleY: 1, rotation: 0 },\r\n            update(deltaTime, force = 0) {\r\n                // Spring physics\r\n                const springForce = -frequency * this.displacement\r\n                const dampingForce = -damping * this.velocity\r\n\r\n                this.velocity += (springForce + dampingForce + force) * deltaTime\r\n                this.displacement += this.velocity * deltaTime\r\n\r\n                const res = this._buf\r\n                res.scaleX = 1 + this.displacement * intensity\r\n                res.scaleY = 1 - this.displacement * intensity * 0.5\r\n                res.rotation = this.displacement * 0.1\r\n                return res\r\n            },\r\n            impulse(force) {\r\n                this.velocity += force\r\n            }\r\n        }\r\n    }\r\n\r\n    // Anticipation animation for attacks\r\n    createAnticipation(duration = 0.3, intensity = 0.15) {\r\n        return {\r\n            time: 0,\r\n            active: false,\r\n            phase: 'idle', // idle, anticipation, action, recovery\r\n            _buf: { scaleX: 1, scaleY: 1, offsetX: 0 },\r\n            trigger() {\r\n                this.time = 0\r\n                this.active = true\r\n                this.phase = 'anticipation'\r\n            },\r\n            update(deltaTime) {\r\n                const res = this._buf\r\n                if (!this.active) {\r\n                    res.scaleX = 1\r\n                    res.scaleY = 1\r\n                    res.offsetX = 0\r\n                    return res\r\n                }\r\n\r\n                this.time += deltaTime\r\n\r\n                if (this.phase === 'anticipation') {\r\n                    const progress = Math.min(this.time / (duration * 0.4), 1)\r\n                    const eased = 1 - Math.cos(progress * Math.PI * 0.5)\r\n\r\n                    if (progress >= 1) {\r\n                        this.phase = 'action'\r\n                        this.time = 0\r\n                    }\r\n\r\n                    res.scaleX = 1 - eased * intensity\r\n                    res.scaleY = 1 + eased * intensity * 0.5\r\n                    res.offsetX = -eased * 10\r\n                    return res\r\n                } else if (this.phase === 'action') {\r\n                    const progress = Math.min(this.time / (duration * 0.2), 1)\r\n                    const eased = Math.sin(progress * Math.PI * 0.5)\r\n\r\n                    if (progress >= 1) {\r\n                        this.phase = 'recovery'\r\n                        this.time = 0\r\n                    }\r\n\r\n                    res.scaleX = 1 + eased * intensity * 2\r\n                    res.scaleY = 1 - eased * intensity\r\n                    res.offsetX = eased * 20\r\n                    return res\r\n                } else if (this.phase === 'recovery') {\r\n                    const progress = Math.min(this.time / (duration * 0.4), 1)\r\n                    const eased = 1 - (1 - progress)**3\r\n\r\n                    if (progress >= 1) {\r\n                        this.active = false\r\n                        this.phase = 'idle'\r\n                    }\r\n\r\n                    res.scaleX = 1 + (1 - eased) * intensity * 0.5\r\n                    res.scaleY = 1 - (1 - eased) * intensity * 0.25\r\n                    res.offsetX = (1 - eased) * 10\r\n                    return res\r\n                }\r\n\r\n                res.scaleX = 1\r\n                res.scaleY = 1\r\n                res.offsetX = 0\r\n                return res\r\n            }\r\n        }\r\n    }\r\n\r\n    // Advanced Inverse Kinematics for limbs and weapon positioning\r\n    createAdvancedIK(options = {}) {\r\n        const {\r\n            armLength = 25,\r\n            forearmLength = 20,\r\n            damping = 0.8,\r\n            stiffness = 0.5,\r\n            maxReach = 40\r\n        } = options\r\n\r\n        return {\r\n            shoulder: { x: 0, y: 0 },\r\n            elbow: { x: 0, y: 0 },\r\n            hand: { x: 0, y: 0 },\r\n            target: { x: 0, y: 0 },\r\n            targetVelocity: { x: 0, y: 0 },\r\n            _buf: {\r\n                shoulder: { x: 0, y: 0 },\r\n                elbow: { x: 0, y: 0 },\r\n                hand: { x: 0, y: 0 },\r\n                target: { x: 0, y: 0 },\r\n                reach: 0,\r\n                stiffness: 0\r\n            },\r\n\r\n            // Two-bone IK solver (CCD - Cyclic Coordinate Descent)\r\n            solveIK(targetX, targetY, shoulderX, shoulderY) {\r\n                this.target.x = targetX\r\n                this.target.y = targetY\r\n                this.shoulder.x = shoulderX\r\n                this.shoulder.y = shoulderY\r\n\r\n                // Calculate distance to target\r\n                const dx = targetX - shoulderX\r\n                const dy = targetY - shoulderY\r\n                const distance = Math.sqrt(dx * dx + dy * dy)\r\n\r\n                // Clamp to maximum reach\r\n                const clampedDistance = Math.min(distance, maxReach)\r\n                const scale = clampedDistance / distance\r\n                const clampedTargetX = shoulderX + dx * scale\r\n                const clampedTargetY = shoulderY + dy * scale\r\n\r\n                // Solve for elbow and hand positions\r\n                const totalLength = armLength + forearmLength\r\n                const cosAngle = Math.max(-1, Math.min(1, clampedDistance / totalLength))\r\n\r\n                // Law of cosines for elbow angle\r\n                const elbowAngle = Math.acos(cosAngle)\r\n                const shoulderAngle = Math.atan2(clampedTargetY - shoulderY, clampedTargetX - shoulderX)\r\n\r\n                // Position elbow\r\n                this.elbow.x = shoulderX + Math.cos(shoulderAngle - elbowAngle * 0.5) * armLength\r\n                this.elbow.y = shoulderY + Math.sin(shoulderAngle - elbowAngle * 0.5) * armLength\r\n\r\n                // Position hand\r\n                this.hand.x = this.elbow.x + Math.cos(shoulderAngle + elbowAngle * 0.5) * forearmLength\r\n                this.hand.y = this.elbow.y + Math.sin(shoulderAngle + elbowAngle * 0.5) * forearmLength\r\n\r\n                const res = this._buf\r\n                res.shoulder.x = this.shoulder.x\r\n                res.shoulder.y = this.shoulder.y\r\n                res.elbow.x = this.elbow.x\r\n                res.elbow.y = this.elbow.y\r\n                res.hand.x = this.hand.x\r\n                res.hand.y = this.hand.y\r\n                res.target.x = clampedTargetX\r\n                res.target.y = clampedTargetY\r\n                res.reach = clampedDistance / totalLength\r\n                return res\r\n            },\r\n\r\n            // Smooth IK with velocity prediction\r\n            update(deltaTime, targetX, targetY, shoulderX, shoulderY) {\r\n                // Predict target position based on velocity\r\n                const predictedTargetX = targetX + this.targetVelocity.x * deltaTime * 0.1\r\n                const predictedTargetY = targetY + this.targetVelocity.y * deltaTime * 0.1\r\n\r\n                // Update target velocity for smoothing\r\n                this.targetVelocity.x = (predictedTargetX - this.target.x) / deltaTime * damping\r\n                this.targetVelocity.y = (predictedTargetY - this.target.y) / deltaTime * damping\r\n\r\n                // Solve IK with damping\r\n                const solution = this.solveIK(predictedTargetX, predictedTargetY, shoulderX, shoulderY)\r\n\r\n                // Apply stiffness damping to joints\r\n                const stiffnessFactor = 1 - Math.exp(-stiffness * deltaTime)\r\n\r\n                const res = this._buf\r\n                res.shoulder.x = solution.shoulder.x\r\n                res.shoulder.y = solution.shoulder.y\r\n                res.elbow.x = solution.elbow.x\r\n                res.elbow.y = solution.elbow.y\r\n                res.hand.x = solution.hand.x\r\n                res.hand.y = solution.hand.y\r\n                res.target.x = solution.target.x\r\n                res.target.y = solution.target.y\r\n                res.reach = solution.reach\r\n                res.stiffness = stiffnessFactor\r\n                return res\r\n            }\r\n        }\r\n    }\r\n\r\n    // Secondary motion system for cloth, hair, and equipment\r\n    createSecondaryMotion(options = {}) {\r\n        const {\r\n            segments = 5,\r\n            length = 15,\r\n            damping = 0.85,\r\n            gravity = 0.5,\r\n            windStrength = 0.1\r\n        } = options\r\n\r\n        return {\r\n            segments: [],\r\n            anchorPoint: { x: 0, y: 0 },\r\n            windTime: 0,\r\n            _segBuf: [],\r\n\r\n            initialize(anchorX, anchorY) {\r\n                this.anchorPoint = { x: anchorX, y: anchorY }\r\n                this.segments = []\r\n\r\n                // Create chain segments\r\n                for (let i = 0; i < segments; i++) {\r\n                    this.segments.push({\r\n                        x: anchorX,\r\n                        y: anchorY + i * (length / segments),\r\n                        vx: 0,\r\n                        vy: 0,\r\n                        prevX: anchorX,\r\n                        prevY: anchorY + i * (length / segments)\r\n                    })\r\n                }\r\n            },\r\n\r\n            update(deltaTime, anchorX, anchorY, windDirection = 0) {\r\n                this.anchorPoint.x = anchorX\r\n                this.anchorPoint.y = anchorY\r\n                this.windTime += deltaTime\r\n\r\n                // Update anchor point\r\n                this.segments[0].x = anchorX\r\n                this.segments[0].y = anchorY\r\n\r\n                // Simulate chain physics\r\n                for (let i = 1; i < this.segments.length; i++) {\r\n                    const segment = this.segments[i]\r\n                    const prevSegment = this.segments[i - 1]\r\n\r\n                    // Calculate desired position (maintain distance from previous segment)\r\n                    const dx = segment.x - prevSegment.x\r\n                    const dy = segment.y - prevSegment.y\r\n                    const distance = Math.sqrt(dx * dx + dy * dy)\r\n                    const targetDistance = length / segments\r\n\r\n                    if (distance > 0) {\r\n                        const ratio = targetDistance / distance\r\n                        segment.x = prevSegment.x + dx * ratio\r\n                        segment.y = prevSegment.y + dy * ratio\r\n                    }\r\n\r\n                    // Apply gravity\r\n                    segment.vy += gravity * deltaTime\r\n\r\n                    // Apply wind\r\n                    const windX = Math.sin(this.windTime * 2 + windDirection) * windStrength\r\n                    const windY = Math.cos(this.windTime * 1.5 + windDirection) * windStrength * 0.5\r\n                    segment.vx += windX * deltaTime\r\n                    segment.vy += windY * deltaTime\r\n\r\n                    // Verlet integration for smooth movement\r\n                    const tempX = segment.x\r\n                    const tempY = segment.y\r\n                    segment.x += (segment.x - segment.prevX) * damping + segment.vx * deltaTime\r\n                    segment.y += (segment.y - segment.prevY) * damping + segment.vy * deltaTime\r\n                    segment.prevX = tempX\r\n                    segment.prevY = tempY\r\n\r\n                    // Dampen velocity\r\n                    segment.vx *= damping\r\n                    segment.vy *= damping\r\n                }\r\n\r\n                if (!this._segBuf || this._segBuf.length !== this.segments.length) {\r\n                    this._segBuf = new Array(this.segments.length)\r\n                }\r\n                for (let i = 0; i < this.segments.length; i++) {\r\n                    this._segBuf[i] = this.segments[i]\r\n                }\r\n                return this._segBuf\r\n            },\r\n\r\n            applyForce(forceX, forceY, segmentIndex = -1) {\r\n                if (segmentIndex === -1) {\r\n                    // Apply to all segments\r\n                    this.segments.forEach(segment => {\r\n                        segment.vx += forceX\r\n                        segment.vy += forceY\r\n                    })\r\n                } else if (segmentIndex < this.segments.length) {\r\n                    this.segments[segmentIndex].vx += forceX\r\n                    this.segments[segmentIndex].vy += forceY\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Momentum-based animation adjustments\r\n    createMomentumSystem(options = {}) {\r\n        const {\r\n            maxMomentum = 10,\r\n            momentumDecay = 0.9,\r\n            momentumInfluence = 0.3,\r\n            directionSmoothing = 0.8\r\n        } = options\r\n\r\n        return {\r\n            momentum: { x: 0, y: 0 },\r\n            smoothedDirection: { x: 0, y: 0 },\r\n            lastVelocity: { x: 0, y: 0 },\r\n            _buf: {\r\n                momentum: { x: 0, y: 0 },\r\n                smoothedDirection: { x: 0, y: 0 },\r\n                leanAngle: 0,\r\n                bounceFactor: 0,\r\n                stretchFactor: 0\r\n            },\r\n\r\n            update(deltaTime, velocityX, velocityY, isGrounded = true) {\r\n                // Calculate velocity change\r\n                const deltaVx = velocityX - this.lastVelocity.x\r\n                const deltaVy = velocityY - this.lastVelocity.y\r\n                this.lastVelocity = { x: velocityX, y: velocityY }\r\n\r\n                // Build momentum from acceleration\r\n                const acceleration = Math.sqrt(deltaVx * deltaVx + deltaVy * deltaVy)\r\n                if (acceleration > 0.1) {\r\n                    const momentumStrength = Math.min(acceleration * momentumInfluence, maxMomentum)\r\n                    const momentumDirX = deltaVx / acceleration\r\n                    const momentumDirY = deltaVy / acceleration\r\n\r\n                    this.momentum.x += momentumDirX * momentumStrength\r\n                    this.momentum.y += momentumDirY * momentumStrength\r\n                }\r\n\r\n                // Apply momentum decay\r\n                this.momentum.x *= momentumDecay\r\n                this.momentum.y *= momentumDecay\r\n\r\n                // Clamp momentum\r\n                const momentumMagnitude = Math.sqrt(this.momentum.x * this.momentum.x + this.momentum.y * this.momentum.y)\r\n                if (momentumMagnitude > maxMomentum) {\r\n                    this.momentum.x = (this.momentum.x / momentumMagnitude) * maxMomentum\r\n                    this.momentum.y = (this.momentum.y / momentumMagnitude) * maxMomentum\r\n                }\r\n\r\n                // Smooth direction changes\r\n                const currentDirection = { x: velocityX, y: velocityY }\r\n                const directionMagnitude = Math.sqrt(currentDirection.x * currentDirection.x + currentDirection.y * currentDirection.y)\r\n\r\n                if (directionMagnitude > 0.1) {\r\n                    const normalizedDir = {\r\n                        x: currentDirection.x / directionMagnitude,\r\n                        y: currentDirection.y / directionMagnitude\r\n                    }\r\n\r\n                    this.smoothedDirection.x = this.smoothedDirection.x * (1 - directionSmoothing) + normalizedDir.x * directionSmoothing\r\n                    this.smoothedDirection.y = this.smoothedDirection.y * (1 - directionSmoothing) + normalizedDir.y * directionSmoothing\r\n                }\r\n\r\n                const res = this._buf\r\n                res.momentum.x = this.momentum.x\r\n                res.momentum.y = this.momentum.y\r\n                res.smoothedDirection.x = this.smoothedDirection.x\r\n                res.smoothedDirection.y = this.smoothedDirection.y\r\n                res.leanAngle = isGrounded ? Math.atan2(this.momentum.x, Math.abs(this.momentum.y) + 1) * 0.3 : 0\r\n                res.bounceFactor = momentumMagnitude * 0.1\r\n                res.stretchFactor = Math.max(0, momentumMagnitude * 0.05)\r\n                return res\r\n            },\r\n\r\n            addImpulse(impulseX, impulseY) {\r\n                this.momentum.x += impulseX\r\n                this.momentum.y += impulseY\r\n            }\r\n        }\r\n    }\r\n\r\n    // Trail effect for fast movement\r\n    createTrailEffect(maxTrails = 5, fadeSpeed = 0.3) {\r\n        return {\r\n            trails: [],\r\n            lastPosition: null,\r\n            update(deltaTime, currentPosition) {\r\n                // Fade existing trails\r\n                this.trails = this.trails.filter(trail => {\r\n                    trail.alpha -= fadeSpeed * deltaTime\r\n                    return trail.alpha > 0\r\n                })\r\n\r\n                // Add new trail if moved enough\r\n                if (this.lastPosition) {\r\n                    const dx = currentPosition.x - this.lastPosition.x\r\n                    const dy = currentPosition.y - this.lastPosition.y\r\n                    const distance = Math.sqrt(dx * dx + dy * dy)\r\n\r\n                    if (distance > 10) {\r\n                        this.trails.push({\r\n                            x: this.lastPosition.x,\r\n                            y: this.lastPosition.y,\r\n                            alpha: 0.5,\r\n                            scale: 0.8\r\n                        })\r\n\r\n                        if (this.trails.length > maxTrails) {\r\n                            this.trails.shift()\r\n                        }\r\n\r\n                        this.lastPosition = { ...currentPosition }\r\n                    }\r\n                } else {\r\n                    this.lastPosition = { ...currentPosition }\r\n                }\r\n\r\n                return this.trails\r\n            },\r\n            clear() {\r\n                this.trails = []\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class CharacterAnimator {\r\n    constructor() {\r\n        this.controller = new AnimationController()\r\n        this.procedural = new ProceduralAnimator()\r\n\r\n        // Enhanced procedural animation instances\r\n        this.breathing = this.procedural.createBreathingAnimation({\r\n            intensity: 0.012,\r\n            speed: 1.8,\r\n            asymmetry: 0.15\r\n        })\r\n        this.squashStretch = this.procedural.createSquashStretch()\r\n        this.wobble = this.procedural.createWobble()\r\n        this.anticipation = this.procedural.createAnticipation()\r\n        this.trail = this.procedural.createTrailEffect()\r\n\r\n        // New advanced systems\r\n        this.advancedIK = this.procedural.createAdvancedIK({\r\n            armLength: 22,\r\n            forearmLength: 18,\r\n            damping: 0.75,\r\n            stiffness: 0.4\r\n        })\r\n        this.secondaryMotion = this.procedural.createSecondaryMotion({\r\n            segments: 4,\r\n            length: 12,\r\n            damping: 0.82,\r\n            stiffness: 0.25,\r\n            gravity: 0.3,\r\n            windStrength: 0.08\r\n        })\r\n        this.momentumSystem = this.procedural.createMomentumSystem({\r\n            maxMomentum: 8,\r\n            momentumDecay: 0.88,\r\n            momentumInfluence: 0.25,\r\n            directionSmoothing: 0.75\r\n        })\r\n        \r\n        // State\r\n        this.state = 0 // numeric state code; default to idle\r\n        this.stateName = 'idle'\r\n        this.facing = 'right'\r\n        this.moving = false\r\n        this.attacking = false\r\n        this.blocking = false\r\n        this.rolling = false\r\n        this.hurt = false\r\n        this.jumping = false\r\n        this.doubleJumping = false\r\n        this.wallSliding = false\r\n        this.dashing = false\r\n        this.charging = false\r\n        this.dead = false\r\n        this.landing = false\r\n        \r\n        // Animation blending\r\n        this.blendFactors = {\r\n            idle: 1,\r\n            running: 0,\r\n            attacking: 0,\r\n            blocking: 0,\r\n            rolling: 0,\r\n            hurt: 0,\r\n            jumping: 0,\r\n            doubleJumping: 0,\r\n            landing: 0,\r\n            wallSliding: 0,\r\n            dashing: 0,\r\n            chargingAttack: 0,\r\n            dead: 0\r\n        }\r\n        \r\n        this.targetBlendFactors = { ...this.blendFactors }\r\n        this.blendSpeed = 0.2\r\n\r\n        // Internal timers for temporary states\r\n        this.hurtTimer = 0\r\n        this.attackTimer = 0\r\n        this.rollTimer = 0\r\n    }\r\n\r\n    resetActionTimers() {\r\n        this.hurtTimer = 0\r\n        this.attackTimer = 0\r\n        this.rollTimer = 0\r\n    }\r\n\r\n    // Helper function to convert numeric WASM state to string for internal use\r\n    getAnimStateName(state) {\r\n        switch(state) {\r\n            case 0: return 'idle'\r\n            case 1: return 'running'\r\n            case 2: return 'attacking'\r\n            case 3: return 'blocking'\r\n            case 4: return 'rolling'\r\n            case 5: return 'hurt'\r\n            case 6: return 'dead'\r\n            case 7: return 'jumping'\r\n            case 8: return 'doubleJumping'\r\n            case 9: return 'landing'\r\n            case 10: return 'wallSliding'\r\n            case 11: return 'dashing'\r\n            case 12: return 'chargingAttack'\r\n            default: return 'idle'\r\n        }\r\n    }\r\n\r\n    setAnimState(newState) {\r\n        if (this.state === newState) {return}\r\n        this.resetActionTimers()\r\n\r\n        this.state = newState\r\n        this.stateName = this.getAnimStateName(newState)\r\n        \r\n        // Update target blend factors\r\n        Object.keys(this.targetBlendFactors).forEach(key => {\r\n            this.targetBlendFactors[key] = 0\r\n        })\r\n        this.targetBlendFactors[this.stateName] = 1\r\n        \r\n        // Play animation based on state\r\n        this.controller.play(this.stateName, { transition: 0.1 })\r\n        \r\n        // Trigger procedural animations\r\n        switch(newState) {\r\n            case 2: // Attacking\r\n                this.anticipation.trigger()\r\n                break\r\n            case 5: // Hurt\r\n                this.squashStretch.trigger()\r\n                this.wobble.impulse(10)\r\n                break\r\n            case 4: // Rolling\r\n                this.trail.clear()\r\n                break\r\n            case 7: // Jumping\r\n                this.squashStretch.trigger()\r\n                break\r\n            case 8: // DoubleJumping\r\n                this.wobble.impulse(5)\r\n                this.trail.clear()\r\n                break\r\n            case 9: // Landing\r\n                this.squashStretch.trigger()\r\n                this.wobble.impulse(15)\r\n                break\r\n            case 11: // Dashing\r\n                this.trail.clear()\r\n                break\r\n            case 12: // ChargingAttack\r\n                this.anticipation.trigger()\r\n                this.wobble.impulse(3)\r\n                break\r\n            case 6: // Death\r\n                this.squashStretch.trigger()\r\n                this.wobble.impulse(20)\r\n                break\r\n        }\r\n    }\r\n\r\n    update(deltaTime, position, velocity = { x: 0, y: 0 }, isGrounded = true) {\r\n        // Update state timers\r\n        if (this.hurtTimer > 0) {\r\n            this.hurtTimer -= deltaTime\r\n            if (this.hurtTimer <= 0 && this.state === 5) {\r\n                this.setAnimState(0) // Idle\r\n            }\r\n        }\r\n        if (this.attackTimer > 0) {\r\n            this.attackTimer -= deltaTime\r\n            if (this.attackTimer <= 0 && this.state === 2) {\r\n                this.setAnimState(0) // Idle\r\n            }\r\n        }\r\n        if (this.rollTimer > 0) {\r\n            this.rollTimer -= deltaTime\r\n            if (this.rollTimer <= 0 && this.state === 4) {\r\n                this.setAnimState(0) // Idle\r\n            }\r\n        }\r\n\r\n        // Update animation controller\r\n        this.controller.update(deltaTime)\r\n\r\n        // Update blend factors\r\n        Object.keys(this.blendFactors).forEach(key => {\r\n            const diff = this.targetBlendFactors[key] - this.blendFactors[key]\r\n            this.blendFactors[key] += diff * this.blendSpeed\r\n        })\r\n\r\n        // Update enhanced breathing with state modulation\r\n        this.breathing.modulateForState(this.stateName)\r\n        const breathing = this.breathing.update(deltaTime)\r\n\r\n        // Update momentum system\r\n        const momentumData = this.momentumSystem.update(deltaTime, velocity.x, velocity.y, isGrounded)\r\n\r\n        // Update secondary motion (initialize if needed)\r\n        if (this.secondaryMotion.segments.length === 0) {\r\n            this.secondaryMotion.initialize(position.x, position.y - 8)\r\n        }\r\n        const secondaryMotion = this.secondaryMotion.update(deltaTime, position.x, position.y - 8)\r\n\r\n        // Update other procedural animations\r\n        const squashStretch = this.squashStretch.update(deltaTime)\r\n        const wobble = this.wobble.update(deltaTime)\r\n        const anticipation = this.anticipation.update(deltaTime)\r\n        const trails = this.trail.update(deltaTime, position)\r\n\r\n        // Combine all transformations\r\n        const transform = {\r\n            scaleX: 1,\r\n            scaleY: 1,\r\n            rotation: 0,\r\n            offsetX: 0,\r\n            offsetY: 0,\r\n            trails: trails,\r\n            secondaryMotion: secondaryMotion,\r\n            momentum: momentumData,\r\n            ik: null // Will be set if weapon/arms are used\r\n        }\r\n\r\n        // Apply enhanced breathing\r\n        if (this.blendFactors.idle > 0 || this.blendFactors.running > 0) {\r\n            transform.scaleX *= breathing.scaleX\r\n            transform.scaleY *= breathing.scaleY\r\n            transform.offsetY += breathing.offsetY\r\n        }\r\n\r\n        // Apply momentum-based adjustments\r\n        transform.rotation += momentumData.leanAngle\r\n        transform.scaleY *= (1 + momentumData.stretchFactor)\r\n        transform.offsetY += momentumData.bounceFactor * Math.sin(Date.now() * 0.01)\r\n\r\n        // Apply squash/stretch\r\n        transform.scaleX *= squashStretch.scaleX\r\n        transform.scaleY *= squashStretch.scaleY\r\n\r\n        // Apply wobble\r\n        transform.scaleX *= wobble.scaleX\r\n        transform.scaleY *= wobble.scaleY\r\n        transform.rotation += wobble.rotation\r\n\r\n        // Apply anticipation\r\n        if (this.stateName === 'attacking' || this.stateName === 'chargingAttack') {\r\n            transform.scaleX *= anticipation.scaleX\r\n            transform.scaleY *= anticipation.scaleY\r\n            transform.offsetX += anticipation.offsetX\r\n        }\r\n\r\n        // Apply facing direction\r\n        if (this.facing === 'left') {\r\n            transform.scaleX *= -1\r\n        }\r\n\r\n        return transform\r\n    }\r\n\r\n    setFacing(direction) {\r\n        this.facing = direction\r\n    }\r\n\r\n    triggerHurt() {\r\n        this.setAnimState(5) // Hurt\r\n        this.hurtTimer = 300\r\n    }\r\n\r\n    triggerAttack() {\r\n        this.setAnimState(2) // Attack\r\n        this.attackTimer = 400\r\n    }\r\n\r\n    triggerRoll() {\r\n        this.setAnimState(4) // Roll\r\n        this.rollTimer = 400\r\n    }\r\n\r\n    triggerBlock() {\r\n        this.setAnimState(3) // Block\r\n    }\r\n\r\n    releaseBlock() {\r\n        if (this.state === 3) { // Block\r\n            this.setAnimState(0) // Idle\r\n        }\r\n    }\r\n\r\n    setMoving(isMoving) {\r\n        this.moving = isMoving\r\n        if (isMoving && this.state === 0) { // Idle\r\n            this.setAnimState(1) // Run\r\n        } else if (!isMoving && this.state === 1) { // Run\r\n            this.setAnimState(0) // Idle\r\n        }\r\n    }\r\n}\r\n\r\n// Animation presets for common game objects\r\nexport const AnimationPresets = {\r\n    // Character animations\r\n    createPlayerAnimations() {\r\n        return {\r\n            idle: new Animation('idle', [\r\n                new AnimationFrame(0, 0, 32, 32, 200),\r\n                new AnimationFrame(32, 0, 32, 32, 200),\r\n                new AnimationFrame(64, 0, 32, 32, 200),\r\n                new AnimationFrame(96, 0, 32, 32, 200)\r\n            ]),\r\n            running: new Animation('running', [\r\n                new AnimationFrame(0, 32, 32, 32, 100),\r\n                new AnimationFrame(32, 32, 32, 32, 100),\r\n                new AnimationFrame(64, 32, 32, 32, 100),\r\n                new AnimationFrame(96, 32, 32, 32, 100),\r\n                new AnimationFrame(128, 32, 32, 32, 100),\r\n                new AnimationFrame(160, 32, 32, 32, 100)\r\n            ]),\r\n            attacking: new Animation('attacking', [\r\n                new AnimationFrame(0, 64, 32, 32, 50),\r\n                new AnimationFrame(32, 64, 32, 32, 50),\r\n                new AnimationFrame(64, 64, 32, 32, 100),\r\n                new AnimationFrame(96, 64, 32, 32, 50)\r\n            ], { loop: false }),\r\n            blocking: new Animation('blocking', [\r\n                new AnimationFrame(0, 96, 32, 32, 100)\r\n            ], { loop: false }),\r\n            rolling: new Animation('rolling', [\r\n                new AnimationFrame(0, 128, 32, 32, 50),\r\n                new AnimationFrame(32, 128, 32, 32, 50),\r\n                new AnimationFrame(64, 128, 32, 32, 50),\r\n                new AnimationFrame(96, 128, 32, 32, 50)\r\n            ], { loop: false }),\r\n            hurt: new Animation('hurt', [\r\n                new AnimationFrame(0, 160, 32, 32, 100),\r\n                new AnimationFrame(32, 160, 32, 32, 100)\r\n            ], { loop: false }),\r\n            dead: new Animation('dead', [\r\n                new AnimationFrame(0, 192, 32, 32, 100),\r\n                new AnimationFrame(32, 192, 32, 32, 100),\r\n                new AnimationFrame(64, 192, 32, 32, 100),\r\n                new AnimationFrame(96, 192, 32, 32, 200),\r\n                new AnimationFrame(128, 192, 32, 32, -1) // Final frame, holds indefinitely\r\n            ], { loop: false }),\r\n            jumping: new Animation('jumping', [\r\n                new AnimationFrame(0, 224, 32, 32, 100),\r\n                new AnimationFrame(32, 224, 32, 32, 100),\r\n                new AnimationFrame(64, 224, 32, 32, -1) // Hold in air\r\n            ], { loop: false }),\r\n            doubleJumping: new Animation('doubleJumping', [\r\n                new AnimationFrame(0, 256, 32, 32, 50),\r\n                new AnimationFrame(32, 256, 32, 32, 50),\r\n                new AnimationFrame(64, 256, 32, 32, 50),\r\n                new AnimationFrame(96, 256, 32, 32, 50),\r\n                new AnimationFrame(128, 256, 32, 32, 50),\r\n                new AnimationFrame(160, 256, 32, 32, 50),\r\n                new AnimationFrame(192, 256, 32, 32, 50),\r\n                new AnimationFrame(224, 256, 32, 32, -1) // Complete flip\r\n            ], { loop: false }),\r\n            landing: new Animation('landing', [\r\n                new AnimationFrame(0, 288, 32, 32, 50),\r\n                new AnimationFrame(32, 288, 32, 32, 50),\r\n                new AnimationFrame(64, 288, 32, 32, 100)\r\n            ], { loop: false }),\r\n            wallSliding: new Animation('wallSliding', [\r\n                new AnimationFrame(0, 320, 32, 32, 100),\r\n                new AnimationFrame(32, 320, 32, 32, 100)\r\n            ], { loop: true }),\r\n            dashing: new Animation('dashing', [\r\n                new AnimationFrame(0, 352, 32, 32, 50),\r\n                new AnimationFrame(32, 352, 32, 32, 50),\r\n                new AnimationFrame(64, 352, 32, 32, 100),\r\n                new AnimationFrame(96, 352, 32, 32, 50)\r\n            ], { loop: false }),\r\n            chargingAttack: new Animation('chargingAttack', [\r\n                new AnimationFrame(0, 384, 32, 32, 100),\r\n                new AnimationFrame(32, 384, 32, 32, 100),\r\n                new AnimationFrame(64, 384, 32, 32, 100),\r\n                new AnimationFrame(96, 384, 32, 32, 50),\r\n                new AnimationFrame(128, 384, 32, 32, 50),\r\n                new AnimationFrame(160, 384, 32, 32, 100)\r\n            ], { loop: false })\r\n        }\r\n    },\r\n\r\n    // Enemy animations\r\n    createWolfAnimations() {\r\n        return {\r\n            idle: new Animation('idle', [\r\n                new AnimationFrame(0, 0, 48, 32, 300),\r\n                new AnimationFrame(48, 0, 48, 32, 300)\r\n            ]),\r\n            prowl: new Animation('prowl', [\r\n                new AnimationFrame(0, 32, 48, 32, 150),\r\n                new AnimationFrame(48, 32, 48, 32, 150),\r\n                new AnimationFrame(96, 32, 48, 32, 150),\r\n                new AnimationFrame(144, 32, 48, 32, 150)\r\n            ]),\r\n            lunge: new Animation('lunge', [\r\n                new AnimationFrame(0, 64, 48, 32, 50),\r\n                new AnimationFrame(48, 64, 48, 32, 100),\r\n                new AnimationFrame(96, 64, 48, 32, 50)\r\n            ], { loop: false }),\r\n            hurt: new Animation('hurt', [\r\n                new AnimationFrame(0, 96, 48, 32, 100)\r\n            ], { loop: false }),\r\n            howl: new Animation('howl', [\r\n                new AnimationFrame(0, 128, 48, 32, 200),\r\n                new AnimationFrame(48, 128, 48, 32, 300),\r\n                new AnimationFrame(96, 128, 48, 32, 400),\r\n                new AnimationFrame(144, 128, 48, 32, 300),\r\n                new AnimationFrame(192, 128, 48, 32, 200)\r\n            ], { loop: false }),\r\n            death: new Animation('death', [\r\n                new AnimationFrame(0, 160, 48, 32, 100),\r\n                new AnimationFrame(48, 160, 48, 32, 100),\r\n                new AnimationFrame(96, 160, 48, 32, 100),\r\n                new AnimationFrame(144, 160, 48, 32, 200),\r\n                new AnimationFrame(192, 160, 48, 32, -1) // Final frame\r\n            ], { loop: false }),\r\n            packRun: new Animation('packRun', [\r\n                new AnimationFrame(0, 192, 48, 32, 80),\r\n                new AnimationFrame(48, 192, 48, 32, 80),\r\n                new AnimationFrame(96, 192, 48, 32, 80),\r\n                new AnimationFrame(144, 192, 48, 32, 80),\r\n                new AnimationFrame(192, 192, 48, 32, 80),\r\n                new AnimationFrame(240, 192, 48, 32, 80)\r\n            ], { loop: true })\r\n        }\r\n    },\r\n\r\n    // Effect animations\r\n    createEffectAnimations() {\r\n        return {\r\n            explosion: new Animation('explosion', [\r\n                new AnimationFrame(0, 0, 64, 64, 50),\r\n                new AnimationFrame(64, 0, 64, 64, 50),\r\n                new AnimationFrame(128, 0, 64, 64, 50),\r\n                new AnimationFrame(192, 0, 64, 64, 50),\r\n                new AnimationFrame(256, 0, 64, 64, 50)\r\n            ], { loop: false }),\r\n            spark: new Animation('spark', [\r\n                new AnimationFrame(0, 64, 32, 32, 30),\r\n                new AnimationFrame(32, 64, 32, 32, 30),\r\n                new AnimationFrame(64, 64, 32, 32, 30)\r\n            ], { loop: false }),\r\n            projectileSpawn: new Animation('projectileSpawn', [\r\n                new AnimationFrame(0, 128, 16, 16, 30),\r\n                new AnimationFrame(16, 128, 16, 16, 30),\r\n                new AnimationFrame(32, 128, 16, 16, 30)\r\n            ], { loop: false }),\r\n            projectileImpact: new Animation('projectileImpact', [\r\n                new AnimationFrame(0, 144, 32, 32, 40),\r\n                new AnimationFrame(32, 144, 32, 32, 40),\r\n                new AnimationFrame(64, 144, 32, 32, 40),\r\n                new AnimationFrame(96, 144, 32, 32, 40)\r\n            ], { loop: false }),\r\n            itemPickup: new Animation('itemPickup', [\r\n                new AnimationFrame(0, 176, 32, 32, 50),\r\n                new AnimationFrame(32, 176, 32, 32, 50),\r\n                new AnimationFrame(64, 176, 32, 32, 50),\r\n                new AnimationFrame(96, 176, 32, 32, 50),\r\n                new AnimationFrame(128, 176, 32, 32, 50)\r\n            ], { loop: false }),\r\n            powerUp: new Animation('powerUp', [\r\n                new AnimationFrame(0, 208, 64, 64, 60),\r\n                new AnimationFrame(64, 208, 64, 64, 60),\r\n                new AnimationFrame(128, 208, 64, 64, 60),\r\n                new AnimationFrame(192, 208, 64, 64, 60),\r\n                new AnimationFrame(256, 208, 64, 64, 60),\r\n                new AnimationFrame(320, 208, 64, 64, 60)\r\n            ], { loop: false })\r\n        }\r\n    }\r\n}\r\n\r\nexport class WolfAnimator {\r\n    constructor() {\r\n        this.controller = new AnimationController()\r\n        this.procedural = new ProceduralAnimator()\r\n        // ... other procedural animations for wolf\r\n        this.sniffing = this.procedural.createBreathingAnimation({intensity: 0.008, speed: 0.5});\r\n        this.howling = this.procedural.createAnticipation({duration: 0.5, intensity: 0.2});\r\n\r\n        this.state = 'idle';\r\n        this.facing = 'right';\r\n    }\r\n\r\n    setWolfState(newState) {\r\n        if (this.state === newState) {\r\n            return;\r\n        }\r\n        this.state = newState;\r\n        this.controller.play(newState);\r\n        // Trigger procedural effects specific to wolf\r\n        switch(newState) {\r\n            case 'lunge':\r\n                this.sniffing.modulateForState('attacking');\r\n                break;\r\n            case 'howl':\r\n                this.howling.trigger();\r\n                this.sniffing.modulateForState('idle'); // Breathing for howl anticipation\r\n                break;\r\n            case 'prowl':\r\n                this.sniffing.modulateForState('running');\r\n                break;\r\n            case 'hurt':\r\n                this.sniffing.modulateForState('hurt');\r\n                break;\r\n            case 'death':\r\n                this.sniffing.modulateForState('dead');\r\n                break;\r\n            default:\r\n                this.sniffing.modulateForState('idle');\r\n        }\r\n    }\r\n\r\n    update(deltaTime) {\r\n        this.controller.update(deltaTime);\r\n        \r\n        const breathing = this.sniffing.update(deltaTime);\r\n        const howling = this.howling.update(deltaTime);\r\n\r\n        const transform = {\r\n            scaleX: 1,\r\n            scaleY: 1,\r\n            rotation: 0,\r\n            offsetX: 0,\r\n            offsetY: 0\r\n        };\r\n\r\n        // Apply breathing\r\n        transform.scaleX *= breathing.scaleX;\r\n        transform.scaleY *= breathing.scaleY;\r\n        transform.offsetY += breathing.offsetY;\r\n\r\n        // Apply howling anticipation\r\n        transform.scaleX *= howling.scaleX;\r\n        transform.scaleY *= howling.scaleY;\r\n        transform.offsetX += howling.offsetX;\r\n\r\n        // Facing direction\r\n        if (this.facing === 'left') {\r\n            transform.scaleX *= -1;\r\n        }\r\n\r\n        return transform;\r\n    }\r\n\r\n    setFacing(direction) {\r\n        this.facing = direction;\r\n    }\r\n}\r\n\r\nexport default {\r\n    Animation,\r\n    AnimationController,\r\n    AnimationFrame,\r\n    ProceduralAnimator,\r\n    CharacterAnimator,\r\n    AnimationPresets,\r\n    WolfAnimator\r\n}","/**\r\n * Realistic Procedural Animation System\r\n * Advanced physics-based animation that integrates with WASM for realistic character movement\r\n * Features: IK, secondary motion, environmental responses, and anatomically correct movement\r\n */\r\n\r\nexport class RealisticProceduralAnimator {\r\n    constructor(options = {}) {\r\n        // Configuration\r\n        this.config = {\r\n            // IK System\r\n            ikEnabled: options.ikEnabled !== false,\r\n            armLength: options.armLength || 20,\r\n            forearmLength: options.forearmLength || 16,\r\n            thighLength: options.thighLength || 18,\r\n            shinLength: options.shinLength || 16,\r\n            \r\n            // Physics\r\n            gravity: options.gravity || 0.3,\r\n            damping: options.damping || 0.85,\r\n            stiffness: options.stiffness || 0.4,\r\n            \r\n            // Visual\r\n            renderSkeleton: options.renderSkeleton || false,\r\n            renderIKTargets: options.renderIKTargets || false,\r\n            renderSecondaryMotion: options.renderSecondaryMotion || false,\r\n            \r\n            // Performance\r\n            updateRate: options.updateRate || 60,\r\n            enableOptimizations: options.enableOptimizations !== false\r\n        };\r\n        \r\n        // Animation state\r\n        this.state = {\r\n            position: { x: 0, y: 0 },\r\n            velocity: { x: 0, y: 0 },\r\n            facing: 1,\r\n            isGrounded: true,\r\n            \r\n            // Body segments\r\n            head: { x: 0, y: -25, rotation: 0 },\r\n            torso: { x: 0, y: -15, rotation: 0 },\r\n            pelvis: { x: 0, y: 0, rotation: 0 },\r\n            \r\n            // Arms\r\n            leftShoulder: { x: -8, y: -20 },\r\n            leftElbow: { x: -12, y: -10 },\r\n            leftHand: { x: -15, y: 0 },\r\n            rightShoulder: { x: 8, y: -20 },\r\n            rightElbow: { x: 12, y: -10 },\r\n            rightHand: { x: 15, y: 0 },\r\n            \r\n            // Legs\r\n            leftHip: { x: -4, y: 0 },\r\n            leftKnee: { x: -6, y: 10 },\r\n            leftFoot: { x: -8, y: 20 },\r\n            rightHip: { x: 4, y: 0 },\r\n            rightKnee: { x: 6, y: 10 },\r\n            rightFoot: { x: 8, y: 20 }\r\n        };\r\n        \r\n        // IK Solver\r\n        this.ikSolver = new AdvancedIKSolver({\r\n            armLength: this.config.armLength,\r\n            forearmLength: this.config.forearmLength,\r\n            thighLength: this.config.thighLength,\r\n            shinLength: this.config.shinLength\r\n        });\r\n        \r\n        // Secondary motion systems\r\n        this.secondaryMotion = new SecondaryMotionSystem();\r\n        this.clothPhysics = new ClothPhysicsSystem();\r\n        this.facialAnimator = new FacialAnimationSystem();\r\n        \r\n        // Performance optimization\r\n        this.frameCount = 0;\r\n        this.lastUpdate = 0;\r\n        this.cachedTransforms = new Map();\r\n        \r\n        // Environmental response\r\n        this.environmentalResponses = new EnvironmentalResponseSystem();\r\n    }\r\n    \r\n    update(deltaTime, wasmData = {}) {\r\n        this.frameCount++;\r\n        const now = performance.now();\r\n        \r\n        // Performance throttling\r\n        if (this.config.enableOptimizations && (now - this.lastUpdate) < (1000 / this.config.updateRate)) {\r\n            return this.getCachedTransform();\r\n        }\r\n        this.lastUpdate = now;\r\n        \r\n        // Get enhanced animation data from WASM\r\n        const wasmAnimData = this.getWasmAnimationData(wasmData);\r\n        \r\n        // Update base position and orientation\r\n        this.updateBaseTransform(wasmAnimData, deltaTime);\r\n        \r\n        // Update skeletal system with IK\r\n        this.updateSkeletalSystem(wasmAnimData, deltaTime);\r\n        \r\n        // Apply secondary motion\r\n        this.updateSecondaryMotion(wasmAnimData, deltaTime);\r\n        \r\n        // Apply environmental responses\r\n        this.updateEnvironmentalResponses(wasmAnimData, deltaTime);\r\n        \r\n        // Generate final transform\r\n        const transform = this.generateTransform(wasmAnimData);\r\n        \r\n        // Cache for performance\r\n        this.cacheTransform(transform);\r\n        \r\n        return transform;\r\n    }\r\n    \r\n    getWasmAnimationData(_wasmData) {\r\n        // Extract enhanced animation data from WASM exports\r\n        const exports = globalThis.wasmExports || {};\r\n        \r\n        return {\r\n            // Base transform (existing)\r\n            scaleX: exports.get_anim_scale_x?.() || 1.0,\r\n            scaleY: exports.get_anim_scale_y?.() || 1.0,\r\n            rotation: exports.get_anim_rotation?.() || 0.0,\r\n            offsetX: exports.get_anim_offset_x?.() || 0.0,\r\n            offsetY: exports.get_anim_offset_y?.() || 0.0,\r\n            pelvisY: exports.get_anim_pelvis_y?.() || 0.0,\r\n            \r\n            // Enhanced animation data (new)\r\n            spineCurve: exports.get_anim_spine_curve?.() || 0.0,\r\n            shoulderRotation: exports.get_anim_shoulder_rotation?.() || 0.0,\r\n            headBobX: exports.get_anim_head_bob_x?.() || 0.0,\r\n            headBobY: exports.get_anim_head_bob_y?.() || 0.0,\r\n            armSwingLeft: exports.get_anim_arm_swing_left?.() || 0.0,\r\n            armSwingRight: exports.get_anim_arm_swing_right?.() || 0.0,\r\n            legLiftLeft: exports.get_anim_leg_lift_left?.() || 0.0,\r\n            legLiftRight: exports.get_anim_leg_lift_right?.() || 0.0,\r\n            torsoTwist: exports.get_anim_torso_twist?.() || 0.0,\r\n            breathingIntensity: exports.get_anim_breathing_intensity?.() || 1.0,\r\n            fatigueFactor: exports.get_anim_fatigue_factor?.() || 0.0,\r\n            momentumX: exports.get_anim_momentum_x?.() || 0.0,\r\n            momentumY: exports.get_anim_momentum_y?.() || 0.0,\r\n            \r\n            // Secondary motion\r\n            clothSway: exports.get_anim_cloth_sway?.() || 0.0,\r\n            hairBounce: exports.get_anim_hair_bounce?.() || 0.0,\r\n            equipmentJiggle: exports.get_anim_equipment_jiggle?.() || 0.0,\r\n            \r\n            // Environmental\r\n            windResponse: exports.get_anim_wind_response?.() || 0.0,\r\n            groundAdapt: exports.get_anim_ground_adapt?.() || 0.0,\r\n            temperatureShiver: exports.get_anim_temperature_shiver?.() || 0.0,\r\n            \r\n            // Game state\r\n            position: {\r\n                x: exports.get_x?.() || 0.5,\r\n                y: exports.get_y?.() || 0.5\r\n            },\r\n            velocity: {\r\n                x: exports.get_vel_x?.() || 0.0,\r\n                y: exports.get_vel_y?.() || 0.0\r\n            },\r\n            isGrounded: exports.get_is_grounded?.() === 1,\r\n            stamina: exports.get_stamina?.() || 1.0,\r\n            health: exports.get_hp?.() || 1.0,\r\n            animState: exports.get_player_anim_state?.() || 0\r\n        };\r\n    }\r\n    \r\n    updateBaseTransform(wasmData, _deltaTime) {\r\n        // Update base position and facing\r\n        this.state.position.x = wasmData.position.x;\r\n        this.state.position.y = wasmData.position.y;\r\n        this.state.velocity.x = wasmData.velocity.x;\r\n        this.state.velocity.y = wasmData.velocity.y;\r\n        this.state.isGrounded = wasmData.isGrounded;\r\n        \r\n        // Determine facing direction\r\n        if (Math.abs(wasmData.velocity.x) > 0.01) {\r\n            this.state.facing = wasmData.velocity.x > 0 ? 1 : -1;\r\n        }\r\n        \r\n        // Update core body segments with WASM data\r\n        this.state.torso.rotation = wasmData.torsoTwist;\r\n        this.state.pelvis.y = wasmData.pelvisY;\r\n        \r\n        // Head positioning with realistic constraints\r\n        this.state.head.x = wasmData.headBobX;\r\n        this.state.head.y = -25 + wasmData.headBobY;\r\n        this.state.head.rotation = wasmData.spineCurve * 0.3; // Head follows spine curve\r\n    }\r\n    \r\n    updateSkeletalSystem(wasmData, _deltaTime) {\r\n        if (!this.config.ikEnabled) {return;}\r\n        \r\n        // Calculate IK targets for arms based on WASM animation data\r\n        const leftArmTarget = this.calculateArmTarget('left', wasmData);\r\n        const rightArmTarget = this.calculateArmTarget('right', wasmData);\r\n        \r\n        // Solve IK for arms\r\n        const leftArmSolution = this.ikSolver.solveArm(\r\n            this.state.leftShoulder,\r\n            leftArmTarget,\r\n            this.config.armLength,\r\n            this.config.forearmLength\r\n        );\r\n        \r\n        const rightArmSolution = this.ikSolver.solveArm(\r\n            this.state.rightShoulder,\r\n            rightArmTarget,\r\n            this.config.armLength,\r\n            this.config.forearmLength\r\n        );\r\n        \r\n        // Apply arm solutions\r\n        if (leftArmSolution) {\r\n            this.state.leftElbow = leftArmSolution.elbow;\r\n            this.state.leftHand = leftArmSolution.hand;\r\n        }\r\n        \r\n        if (rightArmSolution) {\r\n            this.state.rightElbow = rightArmSolution.elbow;\r\n            this.state.rightHand = rightArmSolution.hand;\r\n        }\r\n        \r\n        // Calculate IK targets for legs\r\n        const leftLegTarget = this.calculateLegTarget('left', wasmData);\r\n        const rightLegTarget = this.calculateLegTarget('right', wasmData);\r\n        \r\n        // Solve IK for legs\r\n        const leftLegSolution = this.ikSolver.solveLeg(\r\n            this.state.leftHip,\r\n            leftLegTarget,\r\n            this.config.thighLength,\r\n            this.config.shinLength\r\n        );\r\n        \r\n        const rightLegSolution = this.ikSolver.solveLeg(\r\n            this.state.rightHip,\r\n            rightLegTarget,\r\n            this.config.thighLength,\r\n            this.config.shinLength\r\n        );\r\n        \r\n        // Apply leg solutions\r\n        if (leftLegSolution) {\r\n            this.state.leftKnee = leftLegSolution.knee;\r\n            this.state.leftFoot = leftLegSolution.foot;\r\n        }\r\n        \r\n        if (rightLegSolution) {\r\n            this.state.rightKnee = rightLegSolution.knee;\r\n            this.state.rightFoot = rightLegSolution.foot;\r\n        }\r\n    }\r\n    \r\n    calculateArmTarget(side, wasmData) {\r\n        const isLeft = side === 'left';\r\n        const sideMultiplier = isLeft ? -1 : 1;\r\n        const armSwing = isLeft ? wasmData.armSwingLeft : wasmData.armSwingRight;\r\n        \r\n        // Base arm position\r\n        let targetX = sideMultiplier * 12;\r\n        let targetY = 5;\r\n        \r\n        // Apply natural arm swing\r\n        targetX += Math.sin(armSwing) * 8;\r\n        targetY += Math.cos(armSwing) * 4 - 2; // Arms swing forward/back and up/down\r\n        \r\n        // Adjust for shoulder rotation\r\n        const shoulderOffset = wasmData.shoulderRotation * sideMultiplier;\r\n        targetX += shoulderOffset * 3;\r\n        \r\n        // Adjust for momentum\r\n        targetX += wasmData.momentumX * 0.3;\r\n        targetY += wasmData.momentumY * 0.2;\r\n        \r\n        // Add some natural variation based on breathing\r\n        targetY += Math.sin(Date.now() * 0.001 * wasmData.breathingIntensity) * 0.5;\r\n        \r\n        return { x: targetX, y: targetY };\r\n    }\r\n    \r\n    calculateLegTarget(side, wasmData) {\r\n        const isLeft = side === 'left';\r\n        const sideMultiplier = isLeft ? -1 : 1;\r\n        const legLift = isLeft ? wasmData.legLiftLeft : wasmData.legLiftRight;\r\n        \r\n        // Base leg position (foot placement)\r\n        let targetX = sideMultiplier * 6;\r\n        let targetY = 20; // Ground level\r\n        \r\n        // Apply leg lift for walking animation\r\n        targetY -= legLift * 8; // Lift foot during walk cycle\r\n        targetX += legLift * 2 * sideMultiplier; // Slight forward movement when lifted\r\n        \r\n        // Ground adaptation\r\n        targetY += wasmData.groundAdapt;\r\n        \r\n        // Momentum-based foot placement\r\n        targetX += wasmData.momentumX * 0.2;\r\n        \r\n        // Fatigue effect - less precise foot placement\r\n        // Apply a deterministic offset based on fatigue level\r\n        const fatigueOffset = wasmData.fatigueFactor * sideMultiplier * 0.5;\r\n        targetX += fatigueOffset;\r\n        \r\n        return { x: targetX, y: targetY };\r\n    }\r\n    \r\n    updateSecondaryMotion(wasmData, deltaTime) {\r\n        // Update cloth physics\r\n        this.clothPhysics.update(deltaTime, {\r\n            sway: wasmData.clothSway,\r\n            windResponse: wasmData.windResponse,\r\n            momentum: { x: wasmData.momentumX, y: wasmData.momentumY }\r\n        });\r\n        \r\n        // Update hair physics\r\n        this.secondaryMotion.updateHair(deltaTime, {\r\n            bounce: wasmData.hairBounce,\r\n            windResponse: wasmData.windResponse,\r\n            headMovement: { x: wasmData.headBobX, y: wasmData.headBobY }\r\n        });\r\n        \r\n        // Update equipment physics\r\n        this.secondaryMotion.updateEquipment(deltaTime, {\r\n            jiggle: wasmData.equipmentJiggle,\r\n            momentum: { x: wasmData.momentumX, y: wasmData.momentumY }\r\n        });\r\n    }\r\n    \r\n    updateEnvironmentalResponses(wasmData, _deltaTime) {\r\n        // Temperature response\r\n        if (wasmData.temperatureShiver > 0) {\r\n            this.environmentalResponses.applyShivering(this.state, wasmData.temperatureShiver);\r\n        }\r\n        \r\n        // Wind response\r\n        if (wasmData.windResponse !== 0) {\r\n            this.environmentalResponses.applyWindEffects(this.state, wasmData.windResponse);\r\n        }\r\n    }\r\n    \r\n    generateTransform(wasmData) {\r\n        return {\r\n            // Base transform from WASM\r\n            scaleX: wasmData.scaleX,\r\n            scaleY: wasmData.scaleY,\r\n            rotation: wasmData.rotation,\r\n            offsetX: wasmData.offsetX,\r\n            offsetY: wasmData.offsetY,\r\n            \r\n            // Enhanced skeletal data\r\n            skeleton: {\r\n                head: this.state.head,\r\n                torso: this.state.torso,\r\n                pelvis: this.state.pelvis,\r\n                leftArm: {\r\n                    shoulder: this.state.leftShoulder,\r\n                    elbow: this.state.leftElbow,\r\n                    hand: this.state.leftHand\r\n                },\r\n                rightArm: {\r\n                    shoulder: this.state.rightShoulder,\r\n                    elbow: this.state.rightElbow,\r\n                    hand: this.state.rightHand\r\n                },\r\n                leftLeg: {\r\n                    hip: this.state.leftHip,\r\n                    knee: this.state.leftKnee,\r\n                    foot: this.state.leftFoot\r\n                },\r\n                rightLeg: {\r\n                    hip: this.state.rightHip,\r\n                    knee: this.state.rightKnee,\r\n                    foot: this.state.rightFoot\r\n                }\r\n            },\r\n            \r\n            // Secondary motion data\r\n            secondaryMotion: {\r\n                cloth: this.clothPhysics.getState(),\r\n                hair: this.secondaryMotion.getHairState(),\r\n                equipment: this.secondaryMotion.getEquipmentState()\r\n            },\r\n            \r\n            // Environmental effects\r\n            environmental: {\r\n                windResponse: wasmData.windResponse,\r\n                temperatureShiver: wasmData.temperatureShiver,\r\n                groundAdapt: wasmData.groundAdapt\r\n            },\r\n            \r\n            // Debug information\r\n            debug: {\r\n                frameCount: this.frameCount,\r\n                animState: wasmData.animState,\r\n                fatigue: wasmData.fatigueFactor,\r\n                breathing: wasmData.breathingIntensity\r\n            }\r\n        };\r\n    }\r\n    \r\n    cacheTransform(transform) {\r\n        const cacheKey = `${this.frameCount}_${this.lastUpdate}`;\r\n        this.cachedTransforms.set(cacheKey, transform);\r\n        \r\n        // Limit cache size\r\n        if (this.cachedTransforms.size > 10) {\r\n            const firstKey = this.cachedTransforms.keys().next().value;\r\n            this.cachedTransforms.delete(firstKey);\r\n        }\r\n    }\r\n    \r\n    getCachedTransform() {\r\n        const keys = Array.from(this.cachedTransforms.keys());\r\n        const latestKey = keys[keys.length - 1];\r\n        return this.cachedTransforms.get(latestKey) || this.generateDefaultTransform();\r\n    }\r\n    \r\n    generateDefaultTransform() {\r\n        return {\r\n            scaleX: 1, scaleY: 1, rotation: 0, offsetX: 0, offsetY: 0,\r\n            skeleton: null, secondaryMotion: null, environmental: null, debug: null\r\n        };\r\n    }\r\n    \r\n    // Rendering method for debug visualization\r\n    renderDebug(ctx, x, y, scale = 1) {\r\n        if (!this.config.renderSkeleton) {return;}\r\n        \r\n        ctx.save();\r\n        ctx.translate(x, y);\r\n        ctx.scale(scale, scale);\r\n        \r\n        // Render skeleton\r\n        this.renderSkeleton(ctx);\r\n        \r\n        // Render IK targets\r\n        if (this.config.renderIKTargets) {\r\n            this.renderIKTargets(ctx);\r\n        }\r\n        \r\n        // Render secondary motion\r\n        if (this.config.renderSecondaryMotion) {\r\n            this.renderSecondaryMotion(ctx);\r\n        }\r\n        \r\n        ctx.restore();\r\n    }\r\n    \r\n    renderSkeleton(ctx) {\r\n        ctx.strokeStyle = '#00ff88';\r\n        ctx.lineWidth = 2;\r\n        \r\n        // Draw bones\r\n        this.drawBone(ctx, this.state.torso, this.state.head);\r\n        this.drawBone(ctx, this.state.torso, this.state.pelvis);\r\n        \r\n        // Arms\r\n        this.drawBone(ctx, this.state.leftShoulder, this.state.leftElbow);\r\n        this.drawBone(ctx, this.state.leftElbow, this.state.leftHand);\r\n        this.drawBone(ctx, this.state.rightShoulder, this.state.rightElbow);\r\n        this.drawBone(ctx, this.state.rightElbow, this.state.rightHand);\r\n        \r\n        // Legs\r\n        this.drawBone(ctx, this.state.leftHip, this.state.leftKnee);\r\n        this.drawBone(ctx, this.state.leftKnee, this.state.leftFoot);\r\n        this.drawBone(ctx, this.state.rightHip, this.state.rightKnee);\r\n        this.drawBone(ctx, this.state.rightKnee, this.state.rightFoot);\r\n        \r\n        // Draw joints\r\n        ctx.fillStyle = '#ffff44';\r\n        Object.values(this.state).forEach(joint => {\r\n            if (typeof joint.x !== \"undefined\" && typeof joint.y !== \"undefined\") {\r\n                ctx.beginPath();\r\n                ctx.arc(joint.x, joint.y, 2, 0, Math.PI * 2);\r\n                ctx.fill();\r\n            }\r\n        });\r\n    }\r\n    \r\n    drawBone(ctx, start, end) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(start.x, start.y);\r\n        ctx.lineTo(end.x, end.y);\r\n        ctx.stroke();\r\n    }\r\n    \r\n    renderIKTargets(ctx) {\r\n        // Render IK target positions for debugging\r\n        ctx.fillStyle = '#ff4444';\r\n        // Implementation would show where IK is trying to reach\r\n    }\r\n    \r\n    renderSecondaryMotion(ctx) {\r\n        // Render cloth, hair, and equipment physics\r\n        this.clothPhysics.render(ctx);\r\n        this.secondaryMotion.renderHair(ctx);\r\n        this.secondaryMotion.renderEquipment(ctx);\r\n    }\r\n}\r\n\r\n// Advanced IK Solver for realistic limb movement\r\nclass AdvancedIKSolver {\r\n    constructor(options = {}) {\r\n        this.armLength = options.armLength || 20;\r\n        this.forearmLength = options.forearmLength || 16;\r\n        this.thighLength = options.thighLength || 18;\r\n        this.shinLength = options.shinLength || 16;\r\n        \r\n        // IK solving parameters\r\n        this.maxIterations = options.maxIterations || 10;\r\n        this.tolerance = options.tolerance || 0.1;\r\n        this.damping = options.damping || 0.8;\r\n    }\r\n    \r\n    solveArm(shoulder, target, upperLength, lowerLength) {\r\n        const distance = Math.sqrt(\r\n            (target.x - shoulder.x)**2 + \r\n            (target.y - shoulder.y)**2\r\n        );\r\n        \r\n        const maxReach = upperLength + lowerLength;\r\n        \r\n        // Check if target is reachable\r\n        if (distance > maxReach) {\r\n            // Stretch towards target at maximum reach\r\n            const angle = Math.atan2(target.y - shoulder.y, target.x - shoulder.x);\r\n            return {\r\n                elbow: {\r\n                    x: shoulder.x + Math.cos(angle) * upperLength,\r\n                    y: shoulder.y + Math.sin(angle) * upperLength\r\n                },\r\n                hand: {\r\n                    x: shoulder.x + Math.cos(angle) * maxReach,\r\n                    y: shoulder.y + Math.sin(angle) * maxReach\r\n                }\r\n            };\r\n        }\r\n        \r\n        // Two-bone IK solution using law of cosines\r\n        const a = upperLength;\r\n        const b = lowerLength;\r\n        const c = distance;\r\n        \r\n        // Calculate angles\r\n        const angleA = Math.acos((b * b + c * c - a * a) / (2 * b * c));\r\n        const angleB = Math.acos((a * a + c * c - b * b) / (2 * a * c));\r\n        \r\n        const targetAngle = Math.atan2(target.y - shoulder.y, target.x - shoulder.x);\r\n        \r\n        // Calculate elbow position\r\n        const elbowAngle = targetAngle + angleB;\r\n        const elbow = {\r\n            x: shoulder.x + Math.cos(elbowAngle) * upperLength,\r\n            y: shoulder.y + Math.sin(elbowAngle) * upperLength\r\n        };\r\n        \r\n        return {\r\n            elbow: elbow,\r\n            hand: target\r\n        };\r\n    }\r\n    \r\n    solveLeg(hip, target, upperLength, lowerLength) {\r\n        // Similar to arm IK but with different constraints for legs\r\n        return this.solveArm(hip, target, upperLength, lowerLength);\r\n    }\r\n}\r\n\r\n// Secondary motion system for cloth, hair, and equipment\r\nclass SecondaryMotionSystem {\r\n    constructor() {\r\n        this.hairSegments = [];\r\n        this.equipmentItems = [];\r\n        this.initializeHair();\r\n        this.initializeEquipment();\r\n    }\r\n    \r\n    initializeHair() {\r\n        // Create hair segments for physics simulation\r\n        for (let i = 0; i < 5; i++) {\r\n            this.hairSegments.push({\r\n                position: { x: 0, y: -25 - i * 3 },\r\n                velocity: { x: 0, y: 0 },\r\n                restLength: 3\r\n            });\r\n        }\r\n    }\r\n    \r\n    initializeEquipment() {\r\n        // Initialize equipment items (sword, pouch, etc.)\r\n        this.equipmentItems = [\r\n            { type: 'sword', position: { x: 8, y: 5 }, velocity: { x: 0, y: 0 } },\r\n            { type: 'pouch', position: { x: -6, y: 8 }, velocity: { x: 0, y: 0 } }\r\n        ];\r\n    }\r\n    \r\n    updateHair(deltaTime, forces) {\r\n        // Simple verlet integration for hair physics\r\n        this.hairSegments.forEach((segment, index) => {\r\n            if (index === 0) {return;} // Root segment is fixed to head\r\n            \r\n            // Apply forces\r\n            segment.velocity.x += forces.windResponse * 0.1;\r\n            segment.velocity.y += 0.1; // Gravity\r\n            \r\n            // Apply bounce from head movement\r\n            if (index === 1) {\r\n                segment.velocity.x += forces.headMovement.x * 0.05;\r\n                segment.velocity.y += forces.headMovement.y * 0.05;\r\n            }\r\n            \r\n            // Update position\r\n            segment.position.x += segment.velocity.x * deltaTime;\r\n            segment.position.y += segment.velocity.y * deltaTime;\r\n            \r\n            // Apply damping\r\n            segment.velocity.x *= 0.95;\r\n            segment.velocity.y *= 0.95;\r\n            \r\n            // Constraint to previous segment\r\n            if (index > 0) {\r\n                const prev = this.hairSegments[index - 1];\r\n                const dx = segment.position.x - prev.position.x;\r\n                const dy = segment.position.y - prev.position.y;\r\n                const distance = Math.sqrt(dx * dx + dy * dy);\r\n                \r\n                if (distance > segment.restLength) {\r\n                    const correction = (distance - segment.restLength) / distance * 0.5;\r\n                    segment.position.x -= dx * correction;\r\n                    segment.position.y -= dy * correction;\r\n                }\r\n            }\r\n        });\r\n    }\r\n    \r\n    updateEquipment(deltaTime, forces) {\r\n        this.equipmentItems.forEach(item => {\r\n            // ARCHITECTURAL VIOLATION FIXED: Jiggle forces should be deterministic from WASM\r\n            // Apply jiggle forces\r\n            // item.velocity.x += (Math.random() - 0.5) * forces.jiggle * 0.1;\r\n            // item.velocity.y += (Math.random() - 0.5) * forces.jiggle * 0.1;\r\n            \r\n            // Apply momentum\r\n            item.velocity.x += forces.momentum.x * 0.02;\r\n            item.velocity.y += forces.momentum.y * 0.02;\r\n            \r\n            // Update position\r\n            item.position.x += item.velocity.x * deltaTime;\r\n            item.position.y += item.velocity.y * deltaTime;\r\n            \r\n            // Apply damping\r\n            item.velocity.x *= 0.9;\r\n            item.velocity.y *= 0.9;\r\n        });\r\n    }\r\n    \r\n    getHairState() {\r\n        return this.hairSegments;\r\n    }\r\n    \r\n    getEquipmentState() {\r\n        return this.equipmentItems;\r\n    }\r\n    \r\n    renderHair(ctx) {\r\n        ctx.strokeStyle = '#8B4513';\r\n        ctx.lineWidth = 2;\r\n        ctx.beginPath();\r\n        this.hairSegments.forEach((segment, index) => {\r\n            if (index === 0) {\r\n                ctx.moveTo(segment.position.x, segment.position.y);\r\n            } else {\r\n                ctx.lineTo(segment.position.x, segment.position.y);\r\n            }\r\n        });\r\n        ctx.stroke();\r\n    }\r\n    \r\n    renderEquipment(ctx) {\r\n        this.equipmentItems.forEach(item => {\r\n            ctx.fillStyle = item.type === 'sword' ? '#C0C0C0' : '#8B4513';\r\n            ctx.fillRect(item.position.x - 2, item.position.y - 1, 4, 2);\r\n        });\r\n    }\r\n}\r\n\r\n// Cloth physics system\r\nclass ClothPhysicsSystem {\r\n    constructor() {\r\n        this.clothPoints = [];\r\n        this.constraints = [];\r\n        this.initializeCloth();\r\n    }\r\n    \r\n    initializeCloth() {\r\n        // Create a simple cloth simulation for capes/cloaks\r\n        const width = 3;\r\n        const height = 4;\r\n        \r\n        for (let y = 0; y < height; y++) {\r\n            for (let x = 0; x < width; x++) {\r\n                this.clothPoints.push({\r\n                    position: { x: x * 3 - 3, y: y * 3 + 5 },\r\n                    oldPosition: { x: x * 3 - 3, y: y * 3 + 5 },\r\n                    pinned: y === 0 // Pin top row\r\n                });\r\n            }\r\n        }\r\n        \r\n        // Create constraints between neighboring points\r\n        for (let y = 0; y < height; y++) {\r\n            for (let x = 0; x < width; x++) {\r\n                if (x < width - 1) {\r\n                    this.constraints.push({\r\n                        p1: y * width + x,\r\n                        p2: y * width + x + 1,\r\n                        restLength: 3\r\n                    });\r\n                }\r\n                if (y < height - 1) {\r\n                    this.constraints.push({\r\n                        p1: y * width + x,\r\n                        p2: (y + 1) * width + x,\r\n                        restLength: 3\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    update(deltaTime, forces) {\r\n        // Verlet integration\r\n        this.clothPoints.forEach(point => {\r\n            if (point.pinned) {return;}\r\n            \r\n            const velX = point.position.x - point.oldPosition.x;\r\n            const velY = point.position.y - point.oldPosition.y;\r\n            \r\n            point.oldPosition.x = point.position.x;\r\n            point.oldPosition.y = point.position.y;\r\n            \r\n            // Apply forces\r\n            point.position.x += velX + forces.sway * 0.1 + forces.windResponse * 0.2;\r\n            point.position.y += velY + 0.2; // Gravity\r\n        });\r\n        \r\n        // Satisfy constraints\r\n        for (let i = 0; i < 2; i++) { // Multiple iterations for stability\r\n            this.constraints.forEach(constraint => {\r\n                const p1 = this.clothPoints[constraint.p1];\r\n                const p2 = this.clothPoints[constraint.p2];\r\n                \r\n                const dx = p2.position.x - p1.position.x;\r\n                const dy = p2.position.y - p1.position.y;\r\n                const distance = Math.sqrt(dx * dx + dy * dy);\r\n                const difference = constraint.restLength - distance;\r\n                const percent = difference / distance / 2;\r\n                \r\n                const offsetX = dx * percent;\r\n                const offsetY = dy * percent;\r\n                \r\n                if (!p1.pinned) {\r\n                    p1.position.x -= offsetX;\r\n                    p1.position.y -= offsetY;\r\n                }\r\n                if (!p2.pinned) {\r\n                    p2.position.x += offsetX;\r\n                    p2.position.y += offsetY;\r\n                }\r\n            });\r\n        }\r\n    }\r\n    \r\n    getState() {\r\n        return this.clothPoints;\r\n    }\r\n    \r\n    render(ctx) {\r\n        // Render cloth as a mesh\r\n        ctx.strokeStyle = '#4A4A4A';\r\n        ctx.lineWidth = 1;\r\n        \r\n        this.constraints.forEach(constraint => {\r\n            const p1 = this.clothPoints[constraint.p1];\r\n            const p2 = this.clothPoints[constraint.p2];\r\n            \r\n            ctx.beginPath();\r\n            ctx.moveTo(p1.position.x, p1.position.y);\r\n            ctx.lineTo(p2.position.x, p2.position.y);\r\n            ctx.stroke();\r\n        });\r\n    }\r\n}\r\n\r\n// Facial animation system\r\nclass FacialAnimationSystem {\r\n    constructor() {\r\n        this.expressions = {\r\n            neutral: { eyeOpenness: 1.0, mouthCurve: 0.0, eyebrowHeight: 0.0 },\r\n            happy: { eyeOpenness: 0.8, mouthCurve: 0.5, eyebrowHeight: 0.2 },\r\n            angry: { eyeOpenness: 0.6, mouthCurve: -0.3, eyebrowHeight: -0.4 },\r\n            surprised: { eyeOpenness: 1.2, mouthCurve: -0.2, eyebrowHeight: 0.6 },\r\n            tired: { eyeOpenness: 0.4, mouthCurve: -0.1, eyebrowHeight: -0.1 }\r\n        };\r\n        \r\n        this.currentExpression = 'neutral';\r\n        this.blendWeight = 0.0;\r\n    }\r\n    \r\n    setExpression(expression, blendTime = 0.5) {\r\n        this.targetExpression = expression;\r\n        this.blendTime = blendTime;\r\n        this.blendWeight = 0.0;\r\n    }\r\n    \r\n    update(deltaTime, emotionalState) {\r\n        // Determine expression based on game state\r\n        if (emotionalState.stamina < 0.3) {\r\n            this.setExpression('tired');\r\n        } else if (emotionalState.health < 0.5) {\r\n            this.setExpression('angry');\r\n        } else {\r\n            this.setExpression('neutral');\r\n        }\r\n        \r\n        // Blend towards target expression\r\n        if (this.blendWeight < 1.0) {\r\n            this.blendWeight += deltaTime / this.blendTime;\r\n            this.blendWeight = Math.min(this.blendWeight, 1.0);\r\n        }\r\n    }\r\n}\r\n\r\n// Environmental response system\r\nclass EnvironmentalResponseSystem {\r\n    applyShivering(state, _intensity) {\r\n        // ARCHITECTURAL VIOLATION FIXED: Shivering should be deterministic from WASM\r\n        // Apply small deterministic movements to simulate shivering\r\n        const shiver = 0; // Should be calculated deterministically in WASM\r\n        \r\n        Object.values(state).forEach(joint => {\r\n            if (typeof joint.x !== \"undefined\") {\r\n                joint.x += shiver * 0.5;\r\n                joint.y += shiver * 0.3;\r\n            }\r\n        });\r\n    }\r\n    \r\n    applyWindEffects(state, windStrength) {\r\n        // Apply wind forces to extremities\r\n        state.head.x += windStrength * 0.5;\r\n        state.leftHand.x += windStrength * 0.8;\r\n        state.rightHand.x += windStrength * 0.8;\r\n    }\r\n}\r\n\r\nexport default RealisticProceduralAnimator;\r\n","// Enhanced Player with Animation System Integration\r\n// Provides a complete player character with roll, attack, block, and hurt animations\r\n\r\nimport { CharacterAnimator, AnimationPresets } from './animation-system.js'\r\nimport RealisticProceduralAnimator from './realistic-procedural-animator.js'\r\n// SoundSystem and ParticleSystem imports removed - not used in this file\r\n\r\nexport class AnimatedPlayer {\r\n    constructor(x = 400, y = 300, options = {}) {\r\n        // Position - driven by WASM (normalized 0-1 coordinates)\r\n        this.x = x\r\n        this.y = y\r\n        this.facing = 1 // 1 for right, -1 for left\r\n        \r\n        // Player stats - WASM will manage the core stats\r\n        this.health = options.health || 100\r\n        this.maxHealth = options.maxHealth || 100\r\n        this.stamina = options.stamina || 100\r\n        this.maxStamina = options.maxStamina || 100\r\n        this.speed = options.speed || 250 // Base speed, actual speed is WASM-driven\r\n        this.rollSpeed = options.rollSpeed || 500 // Base roll speed, actual speed is WASM-driven\r\n        \r\n        // State management - now primarily WASM-driven, this is for JS animation state\r\n        this.state = 'idle' // idle, running, attacking, blocking, rolling, hurt, dead, jumping, doubleJumping, landing, wallSliding, dashing, chargingAttack\r\n        this.previousState = 'idle'\r\n        this.stateTimer = 0 // Managed by WASM now for core actions\r\n        this.stateTime = 0 // Managed by WASM now\r\n        this.stateDuration = 0 // Managed by WASM now\r\n        this._prevNormTime = 0 // Managed by WASM now\r\n        this._comboQueued = false // Logic related to combos will move to WASM\r\n        this._currentAttackType = 'light' // Managed by WASM now\r\n        this.invulnerable = false // Managed by WASM\r\n        this.invulnerabilityTimer = 0 // Managed by WASM\r\n        this.isGrounded = true // Driven by WASM\r\n        this.jumpCount = 0 // Driven by WASM\r\n        this.nearWall = false // Will be WASM-driven or removed\r\n        this.dashCooldown = 0 // Will be WASM-driven or removed\r\n        this.chargeTime = 0 // Will be WASM-driven or removed\r\n        this.maxChargeTime = 1.5 // Will be WASM-driven or removed\r\n\r\n        // Deterministic animation/event parameters - these are mostly cues for animation\r\n        this.params = {\r\n            roll: {\r\n                duration: 0.4,\r\n                iFrameStart: 0.08,\r\n                iFrameEnd: 0.36,\r\n                staminaCost: 25,\r\n                cooldown: 0.8\r\n            },\r\n            attackLight: {\r\n                duration: 0.4,\r\n                activeStart: 0.28,\r\n                activeEnd: 0.38,\r\n                staminaCost: 12,\r\n                cooldown: 0.5\r\n            },\r\n            attackHeavy: {\r\n                duration: 0.62,\r\n                activeStart: 0.32,\r\n                activeEnd: 0.48,\r\n                staminaCost: 24,\r\n                cooldown: 0.8\r\n            },\r\n            comboWindow: { start: 0.55, end: 0.75 },\r\n            parry: { duration: 0.22, window: 0.18, staminaCost: 10 }\r\n        }\r\n        \r\n        // Animation system\r\n        this.animator = new CharacterAnimator()\r\n        this.animations = AnimationPresets.createPlayerAnimations()\r\n        this.setupAnimations()\r\n        \r\n        // Realistic Procedural Animator - NEW!\r\n        this.proceduralAnimator = new RealisticProceduralAnimator({\r\n            ikEnabled: options.enableIK !== false,\r\n            renderSkeleton: options.debugMode || false,\r\n            renderIKTargets: options.debugMode || false,\r\n            renderSecondaryMotion: options.debugMode || false,\r\n            enableOptimizations: options.enableOptimizations !== false\r\n        })\r\n        \r\n        // Action cooldowns - now WASM-driven\r\n        this.attackCooldown = 0\r\n        this.rollCooldown = 0\r\n        this.blockHeld = false // WASM will manage the actual block state\r\n        \r\n        // Visual properties\r\n        this.width = options.width || 32\r\n        this.height = options.height || 32\r\n        this.color = options.color || '#00ff88'\r\n        this.sprite = options.sprite || null\r\n\r\n        // Load sprite sheet if not provided\r\n        if (!this.sprite) {\r\n            this.loadSpriteSheet()\r\n        }\r\n        \r\n        // Effects\r\n        this.particleSystem = options.particleSystem || null\r\n        this.soundSystem = options.soundSystem || null\r\n        \r\n        // Combat properties - now WASM-driven\r\n        this.attackDamage = options.attackDamage || 20\r\n        this.attackDamageHeavy = options.attackDamageHeavy || 35\r\n        this.attackRange = options.attackRange || 60\r\n        this.attackRangeHeavy = options.attackRangeHeavy || 80\r\n        this.blockDamageReduction = options.blockDamageReduction || 0.5\r\n\r\n        // Locomotion cadence and footsteps - these will be driven by WASM velocity feedback\r\n        this.stridePhase = 0\r\n        this.gaitRate = 1.4\r\n        this._lastFootFlag = 0 // 0 left, 1 right alternating\r\n        this.footstepIntervalBase = 0.28\r\n\r\n        // Minimal IK proxy values (pelvis bob and foot locks for readability) - driven by WASM\r\n        this.ik = {\r\n            pelvisY: 0,\r\n            pelvisRate: 10,\r\n            left: { locked: false, y: 0 },\r\n            right: { locked: false, y: 0 },\r\n            stepHeight: 2\r\n        }\r\n\r\n        // Debug flag\r\n        this.debugMode = false\r\n\r\n        // Optional WASM module injection support for testing/integration\r\n        try {\r\n            if (options.wasmModule && !globalThis.wasmExports) {\r\n                globalThis.wasmExports = options.wasmModule\r\n            }\r\n        } catch {\r\n            // Ignore WASM module loading errors - fallback handling elsewhere\r\n        }\r\n    }\r\n\r\n    loadSpriteSheet() {\r\n        // Try to load sprite sheet\r\n        this.sprite = new Image()\r\n        this.sprite.src = './src/images/player-sprites.png'\r\n\r\n        this.sprite.onload = () => {\r\n            console.log('Player sprite sheet loaded successfully')\r\n        }\r\n\r\n        this.sprite.onerror = () => {\r\n            console.warn('Player sprite sheet not found at ./src/images/player-sprites.png, using fallback rendering')\r\n            console.log('To fix this: Run \"node scripts/generate-sprite-sheet.js\" or use create-sprite-sheet.html')\r\n            this.sprite = null\r\n        }\r\n    }\r\n    \r\n    setupAnimations() {\r\n        // Add all animations to the controller\r\n        Object.values(this.animations).forEach(animation => {\r\n            this.animator.controller.addAnimation(animation)\r\n        })\r\n        \r\n        // Start with idle animation\r\n        this.animator.controller.play('idle')\r\n    }\r\n    \r\n    update(deltaTime, input = {}) {\r\n        // Update timers - WASM manages core game timers\r\n        this._prevNormTime = this.getNormalizedTime()\r\n        this.attackCooldown = Math.max(0, this.attackCooldown - deltaTime)\r\n        this.rollCooldown = Math.max(0, this.rollCooldown - deltaTime)\r\n        \r\n        // Update invulnerability\r\n        if (this.invulnerable) {\r\n            this.invulnerabilityTimer -= deltaTime // WASM manages invulnerability timer\r\n            if (this.invulnerabilityTimer <= 0) {\r\n                this.invulnerable = false\r\n            }\r\n        }\r\n        \r\n        // Handle state transitions\r\n        // this.handleStateTransitions(input) // WASM now handles state transitions\r\n        \r\n        // Update based on current state\r\n        // this.updateState(deltaTime, input) // WASM now handles state updates\r\n\r\n        // Deterministic state event windows (hitboxes, i-frames)\r\n        // this.applyStateEvents() // WASM now handles state events\r\n        \r\n        // Update simple IK before composing overlay\r\n        this.updateIK(deltaTime)\r\n\r\n        // 1. Forward inputs to WASM - 5-button combat system\r\n        let inputX = 0; let inputY = 0\r\n        if (input.left) {inputX -= 1}\r\n        if (input.right) {inputX += 1}\r\n        if (input.up) {inputY -= 1}\r\n        if (input.down) {inputY += 1}\r\n        \r\n        // New 5-button combat system: A1(light), A2(heavy), Block, Roll, Special\r\n        globalThis.wasmExports?.set_player_input?.(\r\n            inputX, inputY, \r\n            input.roll ? 1 : 0, \r\n            input.jump ? 1 : 0, \r\n            input.lightAttack ? 1 : 0, \r\n            input.heavyAttack ? 1 : 0, \r\n            input.block ? 1 : 0, \r\n            input.special ? 1 : 0\r\n        )\r\n\r\n        // 2. Read state for rendering\r\n        // Assuming 800x600 canvas for now. Convert WASM's 0-1 range to world coordinates.\r\n        // The game-renderer.js is responsible for this scaling when passing player position to render.\r\n        // For now, we'll directly set x and y, and let the renderer handle scaling.\r\n        // WASM provides normalized coordinates; guard against NaN/Infinity\r\n        const rx = globalThis.wasmExports?.get_x?.()\r\n        const ry = globalThis.wasmExports?.get_y?.()\r\n        this.x = (typeof rx === 'number' && Number.isFinite(rx)) ? rx : 0.5\r\n        this.y = (typeof ry === 'number' && Number.isFinite(ry)) ? ry : 0.5\r\n\r\n        this.isGrounded = (globalThis.wasmExports?.get_is_grounded?.() === 1);\r\n        this.jumpCount = globalThis.wasmExports?.get_jump_count?.();\r\n\r\n        // Update animation system and cache transform\r\n        // WASM will determine facing direction implicitly from movement and actions\r\n        // Infer facing from velocity if available; preserve when nearly still\r\n        const fx = globalThis.wasmExports?.get_vel_x?.()\r\n        const fy = globalThis.wasmExports?.get_vel_y?.()\r\n        if (typeof fx === 'number' && typeof fy === 'number') {\r\n            const speed = Math.hypot(fx, fy)\r\n            if (speed > 0.001) {\r\n                this.facing = fx >= 0 ? 1 : -1\r\n            }\r\n        }\r\n\r\n        if (this.animator && typeof this.animator.setFacing === 'function') {\r\n            this.animator.setFacing(this.facing >= 0 ? 'right' : 'left')\r\n        }\r\n        // Query WASM overlay values if available\r\n        const wx = (globalThis.wasmExports?.get_anim_offset_x?.() ?? 0)\r\n        const wy = (globalThis.wasmExports?.get_anim_offset_y?.() ?? 0)\r\n        const wsx = (globalThis.wasmExports?.get_anim_scale_x?.() ?? 1)\r\n        const wsy = (globalThis.wasmExports?.get_anim_scale_y?.() ?? 1)\r\n        const wrot = (globalThis.wasmExports?.get_anim_rotation?.() ?? 0)\r\n        const wpelvis = (globalThis.wasmExports?.get_anim_pelvis_y?.() ?? 0)\r\n        \r\n        // Get the animation state from WASM and set it in the CharacterAnimator\r\n        const wasmAnimState = globalThis.wasmExports?.get_player_anim_state?.()\r\n        if (typeof wasmAnimState === 'number') {\r\n            this.setState(this.getAnimStateName(wasmAnimState), true) // Pass true to indicate WASM-driven state\r\n        }\r\n\r\n        const baseTransform = this.animator.update(\r\n            deltaTime,\r\n            { x: this.x, y: this.y },\r\n            // Pass WASM-driven velocity to CharacterAnimator\r\n            { x: globalThis.wasmExports?.get_vel_x?.() ?? 0, y: globalThis.wasmExports?.get_vel_y?.() ?? 0 },\r\n            this.isGrounded\r\n        ) || { scaleX: 1, scaleY: 1, rotation: 0, offsetX: 0, offsetY: 0 }\r\n        \r\n        // Update realistic procedural animator with WASM data\r\n        const proceduralTransform = this.proceduralAnimator.update(deltaTime, {\r\n            // Pass any additional context the procedural animator might need\r\n            playerState: this.state,\r\n            inputState: input,\r\n            debugMode: this.debugMode\r\n        });\r\n        \r\n        // Prefer WASM-driven overlay when available; fallback to local\r\n        const overlay = (globalThis.wasmExports && typeof wx === 'number') ? {\r\n            scaleX: wsx,\r\n            scaleY: wsy,\r\n            rotation: wrot,\r\n            offsetX: wx,\r\n            offsetY: wy\r\n        } : this.computePoseOverlay(input)\r\n        \r\n        // Combine all transforms: base + procedural + overlay\r\n        this.currentTransform = {\r\n            scaleX: baseTransform.scaleX * overlay.scaleX * proceduralTransform.scaleX,\r\n            scaleY: baseTransform.scaleY * overlay.scaleY * proceduralTransform.scaleY,\r\n            rotation: baseTransform.rotation + overlay.rotation + proceduralTransform.rotation,\r\n            offsetX: baseTransform.offsetX + overlay.offsetX + proceduralTransform.offsetX,\r\n            offsetY: baseTransform.offsetY + overlay.offsetY + proceduralTransform.offsetY,\r\n            trails: baseTransform.trails || [],\r\n            \r\n            // Enhanced data from procedural animator\r\n            skeleton: proceduralTransform.skeleton,\r\n            secondaryMotion: proceduralTransform.secondaryMotion,\r\n            environmental: proceduralTransform.environmental,\r\n            debug: proceduralTransform.debug\r\n        }\r\n        \r\n        // Physics handled by WASM\r\n\r\n        // Stamina regeneration handled by WASM\r\n    }\r\n\r\n    // Returns a normalized [0,1] progress for the current player action/animation\r\n    // Prefer authoritative WASM timers; fallback to current animation controller progress\r\n    getNormalizedTime() {\r\n        try {\r\n            // If WASM provides an explicit attack state machine, derive normalized phase\r\n            const get = (fn) => (typeof globalThis.wasmExports?.[fn] === 'function') ? globalThis.wasmExports[fn]() : void 0\r\n            const attackState = get('get_attack_state') // 0 Idle, 1 Windup, 2 Active, 3 Recovery\r\n            const stateStartTime = get('get_attack_state_time')\r\n            const now = get('get_time_seconds')\r\n            if (typeof attackState === 'number' && typeof stateStartTime === 'number' && typeof now === 'number') {\r\n                const elapsed = Math.max(0, now - stateStartTime)\r\n                let duration = 0\r\n                if (attackState === 1) {duration = get('get_attack_windup_sec') ?? this.params.attackLight.duration}\r\n                else if (attackState === 2) {duration = get('get_attack_active_sec') ?? this.params.attackLight.duration}\r\n                else if (attackState === 3) {duration = get('get_attack_recovery_sec') ?? this.params.attackLight.duration}\r\n                if (duration && duration > 0) {\r\n                    return Math.max(0, Math.min(1, elapsed / duration))\r\n                }\r\n            }\r\n\r\n            // Rolling phase if available\r\n            const isRolling = get('get_is_rolling')\r\n            if (isRolling === 1) {\r\n                const rollDur = get('get_roll_duration') || this.params.roll.duration\r\n                const playerStateTimer = get('get_player_state_timer')\r\n                if (typeof playerStateTimer === 'number' && rollDur > 0) {\r\n                    return Math.max(0, Math.min(1, playerStateTimer / rollDur))\r\n                }\r\n            }\r\n\r\n            // Generic state timer normalization when duration is known locally\r\n            const playerStateTimer = get('get_player_state_timer')\r\n            if (typeof playerStateTimer === 'number') {\r\n                let duration = 0\r\n                switch (this.state) {\r\n                    case 'rolling': duration = this.params.roll.duration; break\r\n                    case 'attacking':\r\n                        duration = this._currentAttackType === 'heavy' ? this.params.attackHeavy.duration : this.params.attackLight.duration\r\n                        break\r\n                    default:\r\n                        duration = 0\r\n                }\r\n                if (duration > 0) {\r\n                    return Math.max(0, Math.min(1, playerStateTimer / duration))\r\n                }\r\n            }\r\n        } catch {\r\n            // Ignore WASM timing errors - fallback to animation controller\r\n        }\r\n\r\n        // Fallback: use current animation controller progress\r\n        try {\r\n            const anim = this.animator?.controller?.currentAnimation\r\n            if (anim && Array.isArray(anim.frames) && anim.frames.length > 1) {\r\n                // Use frame index over total as coarse progress\r\n                const coarse = anim.currentFrame / (anim.frames.length - 1)\r\n                return Math.max(0, Math.min(1, coarse))\r\n            }\r\n        } catch {\r\n            // Ignore animation controller errors - return default\r\n        }\r\n\r\n        return 0\r\n    }\r\n\r\n    startRoll(input) {\r\n        // Trigger WASM roll action and handle visual/audio effects\r\n        if (!globalThis.wasmExports?.on_roll_start?.()) {\r\n            // WASM determined roll could not start (e.g., stamina, cooldown)\r\n            return;\r\n        }\r\n\r\n        // Determine roll direction for local effects and WASM input\r\n        let dirX = 0; let dirY = 0\r\n        \r\n        if (input.left) {dirX -= 1}\r\n        if (input.right) {dirX += 1}\r\n        if (input.up) {dirY -= 1}\r\n        if (input.down) {dirY += 1}\r\n        \r\n        // If no direction input, roll in facing direction\r\n        if (dirX === 0 && dirY === 0) {\r\n            dirX = this.facing\r\n        }\r\n        \r\n        // Normalize direction\r\n        const length = Math.hypot(dirX, dirY)\r\n        if (length > 0) {\r\n            dirX /= length\r\n            dirY /= length\r\n        }\r\n        \r\n        this.rollDirection = { x: dirX, y: dirY }\r\n        // Visual and audio effects only - core logic handled by WASM\r\n        \r\n        // Create roll effect\r\n        if (this.particleSystem) {\r\n            this.particleSystem.createDustCloud(this.x, this.y)\r\n        }\r\n        \r\n        // Play roll sound\r\n        if (this.soundSystem) {\r\n            this.soundSystem.play('roll')\r\n        }\r\n    }\r\n    \r\n    startAttack(type = 'light') {\r\n        // Trigger WASM attack action and handle visual/audio effects\r\n        const p = type === 'heavy' ? this.params.attackHeavy : this.params.attackLight\r\n        this._currentAttackType = type\r\n\r\n        if (!globalThis.wasmExports?.on_attack?.(type === 'heavy' ? 1 : 0)) {\r\n            // WASM determined attack could not start (e.g., stamina, cooldown)\r\n            return;\r\n        }\r\n        \r\n        // Play attack sound\r\n        if (this.soundSystem) {\r\n            this.soundSystem.play('attack')\r\n        }\r\n    }\r\n\r\n    // Public input API helpers\r\n    queueAttack(type = 'light') {\r\n        // This logic is now handled in WASM\r\n        if (this.canAttack()) { // This check will still use local state, but the actual decision is WASM's\r\n            this.startAttack(type)\r\n        } else if (this.state === 'attacking') {\r\n            // This combo queuing needs to be moved to WASM if it affects gameplay\r\n            this._comboQueued = true\r\n        }\r\n    }\r\n\r\n    tryRoll(dir = null) {\r\n        // dir: {x,y} optional; if absent uses current input/facing via startRoll caller\r\n        // This logic is now handled by WASM, just call startRoll\r\n        const input = {}\r\n        if (dir && (dir.x || dir.y)) {\r\n            input.left = dir.x < -0.5\r\n            input.right = dir.x > 0.5\r\n            input.up = dir.y < -0.5\r\n            input.down = dir.y > 0.5\r\n        }\r\n        this.startRoll(input);\r\n    }\r\n\r\n    tryParry() {\r\n        // Parry logic is now handled in WASM\r\n        if (this.state === 'dead') { return }\r\n        // Stamina check is now done in WASM\r\n        // if (this.stamina < this.params.parry.staminaCost) { return }\r\n        // Enter a brief blocking-like state with a success window; integrate with combat later\r\n        // this.setState('blocking') // State is WASM-driven\r\n        // this.stateTimer = this.params.parry.duration // State timing is WASM-driven\r\n        // this.stateTime = 0 // State timing is WASM-driven\r\n        // this.stateDuration = this.params.parry.duration // State timing is WASM-driven\r\n        // this.stamina -= this.params.parry.staminaCost // Stamina cost is WASM-driven\r\n        if (!globalThis.wasmExports?.on_parry?.()) { // Assuming a new WASM on_parry function\r\n            return; // Parry failed in WASM\r\n        }\r\n        // Optional sfx\r\n        if (this.soundSystem) { this.soundSystem.play('parry') }\r\n    }\r\n    \r\n    executeAttack() {\r\n        // This method will be simplified as WASM handles attack logic.\r\n        // It will primarily be for visual effects and returning hit data for JS enemies.\r\n        const isHeavy = this._currentAttackType === 'heavy'\r\n        const range = isHeavy ? this.attackRangeHeavy : this.attackRange\r\n        const damage = isHeavy ? this.attackDamageHeavy : this.attackDamage\r\n        const hitboxX = this.x + (this.facing * range / 2)\r\n        const hitboxY = this.y\r\n        \r\n        // Create attack effect\r\n        if (this.particleSystem) {\r\n            if (isHeavy) {\r\n                this.particleSystem.createChargedSlash?.(hitboxX, hitboxY, this.facing, 1)\r\n            } else {\r\n                this.particleSystem.createSlashEffect(hitboxX, hitboxY, this.facing)\r\n            }\r\n        }\r\n        \r\n        // Return attack hitbox for collision detection (for JS-managed enemies)\r\n        return {\r\n            x: hitboxX,\r\n            y: hitboxY,\r\n            width: range,\r\n            height: this.height,\r\n            damage: damage\r\n        }\r\n    }\r\n    \r\n    startBlock() {\r\n        // This function now primarily triggers the WASM block action and handles local effects\r\n        if (!globalThis.wasmExports?.set_blocking?.(1, this.facing, 0)) {\r\n            return; // Block failed in WASM (e.g., stamina)\r\n        }\r\n        // this.setState('blocking') // State is WASM-driven\r\n        this.blockHeld = true\r\n        \r\n        // Create block effect\r\n        if (this.particleSystem) {\r\n            this.particleSystem.createShieldEffect(this.x, this.y)\r\n        }\r\n        \r\n        // Play block sound\r\n        if (this.soundSystem) {\r\n            this.soundSystem.play('block')\r\n        }\r\n    }\r\n    \r\n    stopBlock() {\r\n        // This function now primarily triggers the WASM block action\r\n        globalThis.wasmExports?.set_blocking?.(0, this.facing, 0);\r\n        // this.setState('idle') // State is WASM-driven\r\n        this.blockHeld = false\r\n    }\r\n    \r\n    takeDamage(damage, knockbackX = 0, knockbackY = 0) {\r\n        // Damage calculation is now primarily WASM-driven\r\n        // This function will be simplified or removed if WASM handles all damage and effects\r\n        if (this.invulnerable || this.state === 'dead') {return false} // Invulnerable state is WASM-driven\r\n\r\n        const actualDamage = damage\r\n        \r\n        // Reduce damage if blocking - WASM handles this logic\r\n        if (this.state === 'blocking') {\r\n            // actualDamage *= this.blockDamageReduction\r\n            \r\n            // Create block impact effect\r\n            if (this.particleSystem) {\r\n                this.particleSystem.createBlockImpact(this.x, this.y)\r\n            }\r\n            \r\n            // Play block impact sound\r\n            if (this.soundSystem) {\r\n                this.soundSystem.play('blockImpact')\r\n            }\r\n        } else {\r\n            // Not blocking, take full damage - visual/audio effects only\r\n            if (this.particleSystem) {\r\n                this.particleSystem.createBloodEffect(this.x, this.y)\r\n            }\r\n\r\n            if (this.soundSystem) {\r\n                this.soundSystem.play('hurt')\r\n            }\r\n        }\r\n\r\n        // Damage application and death check handled by WASM\r\n        \r\n        return true\r\n    }\r\n    \r\n    die() {\r\n        // Visual and audio effects only - death state handled by WASM\r\n        if (this.particleSystem) {\r\n            this.particleSystem.createDeathEffect(this.x, this.y)\r\n        }\r\n\r\n        if (this.soundSystem) {\r\n            this.soundSystem.play('death')\r\n        }\r\n    }\r\n    \r\n    respawn(_x, _y) {\r\n        // Visual and audio effects only - respawn logic handled by WASM\r\n        if (this.particleSystem) {\r\n            this.particleSystem.createRespawnEffect(this.x, this.y)\r\n        }\r\n\r\n        if (this.soundSystem) {\r\n            this.soundSystem.play('respawn')\r\n        }\r\n    }\r\n    \r\n    setState(newState, wasmDriven = false) { // Added wasmDriven parameter\r\n        if (this.state === newState) {return} // Prevent redundant state changes regardless of source\r\n\r\n        this.previousState = this.state\r\n        this.state = newState\r\n        this.stateTime = 0\r\n        this.stateDuration = 0\r\n        this._prevNormTime = 0\r\n\r\n        // Convert string state to numeric state for CharacterAnimator\r\n        const numericState = this.stateNameToNumber(newState)\r\n\r\n        // Update animation using CharacterAnimator's setAnimState method\r\n        this.animator.setAnimState(numericState)\r\n    }\r\n    \r\n    canAttack() {\r\n        // This check is now primarily WASM-driven, this local version is for UI/client-side prediction\r\n        const minCost = Math.min(this.params.attackLight.staminaCost, this.params.attackHeavy.staminaCost)\r\n        return this.attackCooldown <= 0 && \r\n               this.stamina >= minCost && // Stamina also comes from WASM\r\n               this.state !== 'dead' &&\r\n               this.state !== 'rolling' &&\r\n               this.state !== 'hurt'\r\n    }\r\n    \r\n    canRoll() {\r\n        // This check is now primarily WASM-driven, this local version is for UI/client-side prediction\r\n        return this.rollCooldown <= 0 && \r\n               this.stamina >= this.params.roll.staminaCost && // Stamina also comes from WASM\r\n               this.state !== 'dead' &&\r\n               this.state !== 'attacking' &&\r\n               this.state !== 'hurt'\r\n    }\r\n    \r\n    canBlock() {\r\n        // This check is now primarily WASM-driven, this local version is for UI/client-side prediction\r\n        return this.stamina > 0 && // Stamina also comes from WASM\r\n               this.state !== 'dead' &&\r\n               this.state !== 'rolling' &&\r\n               this.state !== 'attacking' &&\r\n               this.state !== 'hurt'\r\n    }\r\n    \r\n    render(ctx, camera = null) {\r\n        // Compute screen position from WASM-normalized coords using GameRenderer mapping if available\r\n        let screenX = 0\r\n        let screenY = 0\r\n        const camX = camera?.x || 0\r\n        const camY = camera?.y || 0\r\n        \r\n        // Debug logging for position tracking\r\n        const debugPositions = false; // Set to true for debugging\r\n        if (debugPositions && Math.random() < 0.01) { // Log occasionally to avoid spam\r\n            console.log('AnimatedPlayer.render:', {\r\n                playerPos: { x: this.x, y: this.y },\r\n                camera: { x: camX, y: camY },\r\n                hasGameRenderer: !!globalThis.gameRenderer,\r\n                hasWasmToWorld: !!(globalThis.gameRenderer?.wasmToWorld)\r\n            });\r\n        }\r\n        \r\n        if (globalThis.gameRenderer && typeof globalThis.gameRenderer.wasmToWorld === 'function') {\r\n            const pos = globalThis.gameRenderer.wasmToWorld(this.x || 0.5, this.y || 0.5)\r\n            screenX = pos.x - camX\r\n            screenY = pos.y - camY\r\n        } else {\r\n            // Fallback scaling if renderer mapping is unavailable\r\n            const worldWidth = 800\r\n            const worldHeight = 600\r\n            screenX = (this.x || 0) * worldWidth - camX\r\n            screenY = (this.y || 0) * worldHeight - camY\r\n        }\r\n        \r\n        ctx.save()\r\n        \r\n        // Apply invulnerability flashing - this will be driven by WASM\r\n        if (globalThis.wasmExports?.get_is_invulnerable?.() === 1) { // Assuming a WASM export for invulnerability\r\n            ctx.globalAlpha = 0.5 + Math.sin(Date.now() * 0.02) * 0.3\r\n        }\r\n        \r\n        // Get current animation frame\r\n        const frame = this.animator.controller.getCurrentFrame()\r\n        \r\n        if (this.sprite && frame) {\r\n            // Draw sprite animation with enhanced procedural transform\r\n            ctx.save()\r\n            const t = this.currentTransform || { scaleX: 1, scaleY: 1, rotation: 0, offsetX: 0, offsetY: 0 }\r\n            const centerX = screenX + t.offsetX\r\n            const centerY = screenY + t.offsetY\r\n            ctx.translate(centerX, centerY)\r\n            ctx.rotate(t.rotation)\r\n            ctx.scale(this.facing < 0 ? -t.scaleX : t.scaleX, t.scaleY)\r\n            \r\n            // Render secondary motion effects first (behind character)\r\n            if (t.secondaryMotion && this.debugMode) {\r\n                this.renderSecondaryMotion(ctx, t.secondaryMotion)\r\n            }\r\n            \r\n            // Draw main character sprite\r\n            ctx.drawImage(\r\n                this.sprite,\r\n                frame.x, frame.y, frame.width, frame.height,\r\n                -this.width/2, -this.height/2,\r\n                this.width, this.height\r\n            )\r\n            \r\n            // Render enhanced skeletal overlay if available and in debug mode\r\n            if (t.skeleton && this.debugMode) {\r\n                this.renderSkeletalOverlay(ctx, t.skeleton)\r\n            }\r\n            \r\n            ctx.restore()\r\n        } else {\r\n            // Fallback to colored rectangle - ensure it's always visible\r\n            ctx.fillStyle = this.color || '#4a90e2' // Default blue color\r\n            \r\n            // Apply state-based visual effects\r\n            if (this.state === 'hurt') {\r\n                ctx.fillStyle = '#ff4444'\r\n            } else if (this.state === 'blocking') {\r\n                ctx.fillStyle = '#4444ff'\r\n            } else if (this.state === 'rolling') {\r\n                ctx.fillStyle = '#ffff44'\r\n            }\r\n            \r\n            // Draw a more visible rectangle\r\n            const rectWidth = this.width || 32;\r\n            const rectHeight = this.height || 32;\r\n            \r\n            ctx.fillRect(\r\n                screenX - rectWidth/2,\r\n                screenY - rectHeight/2,\r\n                rectWidth,\r\n                rectHeight\r\n            );\r\n            \r\n            // Add a border to make it more visible\r\n            ctx.strokeStyle = '#ffffff';\r\n            ctx.lineWidth = 2;\r\n            ctx.strokeRect(\r\n                screenX - rectWidth/2,\r\n                screenY - rectHeight/2,\r\n                rectWidth,\r\n                rectHeight\r\n            );\r\n            \r\n            // Add a center dot to show exact position\r\n            ctx.fillStyle = '#ffffff';\r\n            ctx.beginPath();\r\n            ctx.arc(screenX, screenY, 3, 0, Math.PI * 2);\r\n            ctx.fill();\r\n        }\r\n        \r\n        // Draw health bar\r\n        const barWidth = 40\r\n        const barHeight = 4\r\n        const barY = screenY - this.height/2 - 10\r\n        \r\n        // Background\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.5)'\r\n        ctx.fillRect(screenX - barWidth/2, barY, barWidth, barHeight)\r\n        \r\n        // Health - get from WASM\r\n        const currentHealth = globalThis.wasmExports?.get_hp?.() ?? globalThis.wasmExports?.get_health?.() ?? this.health;\r\n        const maxHealth = this.maxHealth; // Max health can still be local or WASM-driven if dynamic\r\n        const healthPercent = currentHealth / maxHealth\r\n        ctx.fillStyle = healthPercent > 0.5 ? '#00ff00' : \r\n                       healthPercent > 0.25 ? '#ffff00' : '#ff0000'\r\n        ctx.fillRect(screenX - barWidth/2, barY, barWidth * healthPercent, barHeight)\r\n        \r\n        // Stamina bar - get from WASM\r\n        const staminaY = barY + 5\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.5)'\r\n        ctx.fillRect(screenX - barWidth/2, staminaY, barWidth, 2)\r\n        \r\n        const currentStamina = globalThis.wasmExports?.get_stamina?.() ?? this.stamina;\r\n        const maxStamina = this.maxStamina; // Max stamina can still be local or WASM-driven if dynamic\r\n        const staminaPercent = currentStamina / maxStamina\r\n        ctx.fillStyle = '#00aaff'\r\n        ctx.fillRect(screenX - barWidth/2, staminaY, barWidth * staminaPercent, 2)\r\n        \r\n        // Debug overlays\r\n        if (this.debugMode) {\r\n            this.renderDebug(ctx, camera, screenX, screenY)\r\n        }\r\n\r\n        ctx.restore()\r\n    }\r\n\r\n    computePoseOverlay(_input) {\r\n        // Simple procedural layers approximation for readability and responsiveness\r\n        // This can still be done in JS as it's purely visual\r\n        const t = this.getNormalizedTime() // This needs to be driven by WASM state timings\r\n        let scaleX = 1\r\n        let scaleY = 1\r\n        let rotation = 0\r\n        const offsetX = 0\r\n        let offsetY = this.ik?.pelvisY || 0\r\n\r\n        // Lean with velocity when running - velocity should come from WASM\r\n        // For now, using this.vx from CharacterAnimator.update's velocity parameter. This needs to be cleaned up.\r\n        // The CharacterAnimator.update is already being passed vx, vy, which are currently local.\r\n        // These local vx, vy are not updated from WASM, which is an issue.\r\n        // Need to pass WASM-driven velocity to CharacterAnimator.update as well.\r\n        // For now, let's assume CharacterAnimator is updated with correct velocity from WASM.\r\n        // We need an export for WASM player velocity (get_vel_x, get_vel_y)\r\n        const currentVx = globalThis.wasmExports?.get_vel_x?.() ?? 0;\r\n        const currentVy = globalThis.wasmExports?.get_vel_y?.() ?? 0;\r\n        const currentSpeed = Math.hypot(currentVx, currentVy);\r\n        const playerSpeed = globalThis.wasmExports?.get_speed?.() ?? this.speed; // Assuming WASM provides player speed\r\n\r\n        if (this.state === 'running') {\r\n            const lean = Math.max(-0.15, Math.min(0.15, (currentVx / (playerSpeed || 1)) * 0.25))\r\n            rotation += lean\r\n        }\r\n\r\n        // Block hunch\r\n        if (this.state === 'blocking') {\r\n            scaleY *= 0.98\r\n            offsetY += 1\r\n        }\r\n\r\n        // Roll tuck\r\n        if (this.state === 'rolling') {\r\n            const w = (t < 0.5 ? t * 2 : (1 - t) * 2)\r\n            scaleY *= 1 - 0.06 * w\r\n            scaleX *= 1 + 0.04 * w\r\n            rotation += (this.facing >= 0 ? 1 : -1) * 0.12 * w\r\n        }\r\n\r\n        // Attack slight forward push and recoil feel\r\n        // These will be driven by WASM attack state timings and forces\r\n        if (this.state === 'attacking') {\r\n            // Placeholder: These values should come from WASM's animation overlay exports\r\n            // if (t < 0.3) {\r\n            //     offsetX += this.facing * 2 * (t / 0.3)\r\n            // } else if (t > 0.6) {\r\n            //     offsetX -= this.facing * 2 * ((t - 0.6) / 0.4)\r\n            // }\r\n        }\r\n\r\n        return { scaleX, scaleY, rotation, offsetX, offsetY }\r\n    }\r\n\r\n    updateIK(deltaTime) {\r\n        // Pelvis bob from WASM overlay if available\r\n        const wasmPelvis = globalThis.wasmExports?.get_anim_pelvis_y?.()\r\n        if (typeof wasmPelvis === 'number') {\r\n            this.ik.pelvisY = wasmPelvis\r\n        } else {\r\n            this.ik.pelvisY = 0; // Fallback to 0 if WASM value not available\r\n        }\r\n\r\n        // Foot lock flags (alternating with steps) for future mask usage\r\n        // These should also be driven by WASM if precise synchronization is needed\r\n        const currentVx = globalThis.wasmExports?.get_vel_x?.() ?? 0;\r\n        const currentVy = globalThis.wasmExports?.get_vel_y?.() ?? 0;\r\n        const isMovingNow = Math.hypot(currentVx, currentVy) > 10\r\n        if (isMovingNow) {\r\n            // left foot considered planted near stridePhase ~ 0.0; right near ~0.5\r\n            // The stridePhase needs to be driven by WASM's locomotion state.\r\n            // For now, let's keep a local stridePhase but eventually it should be removed.\r\n            this.stridePhase = (this.stridePhase + deltaTime * this.gaitRate) % 1; // Keep local for now\r\n            const lf = (this.stridePhase < 0.25 || this.stridePhase > 0.75)\r\n            this.ik.left.locked = lf\r\n            this.ik.right.locked = !lf\r\n        } else {\r\n            this.ik.left.locked = false\r\n            this.ik.right.locked = false\r\n            this.stridePhase = 0; // Reset stride phase when idle\r\n        }\r\n    }\r\n\r\n    renderDebug(ctx, camera, screenX, screenY) {\r\n        const x = screenX\r\n        const y = screenY - this.height / 2 - 18\r\n        // Stride phase bar - needs to be updated based on WASM if stridePhase moves to WASM\r\n        ctx.save()\r\n        ctx.fillStyle = 'rgba(0,0,0,0.35)'\r\n        ctx.fillRect(x - 24, y, 48, 4)\r\n        ctx.fillStyle = '#00ffaa'\r\n        ctx.fillRect(x - 24, y, 48 * (this.stridePhase % 1), 4)\r\n\r\n        // Pelvis offset marker\r\n        ctx.strokeStyle = '#ffaa00'\r\n        ctx.beginPath()\r\n        ctx.moveTo(x + 30, y + 2)\r\n        ctx.lineTo(x + 30, y + 2 - (this.ik?.pelvisY || 0))\r\n        ctx.stroke()\r\n\r\n        // Event windows (attack/roll) - these timings are now WASM-driven\r\n        // This will require WASM exports for current attack/roll state durations and normalized times\r\n        const currentAttackState = globalThis.wasmExports?.get_attack_state?.() ?? 0; // Assuming a WASM export\r\n        const currentAttackStateTime = globalThis.wasmExports?.get_attack_state_time?.() ?? 0; // Assuming a WASM export\r\n        const totalGameTime = globalThis.wasmExports?.get_time_seconds?.() ?? 0; // Assuming a WASM export\r\n        \r\n        let norm = 0;\r\n        if (currentAttackState === 1) { // Windup\r\n            norm = (totalGameTime - currentAttackStateTime) / (globalThis.wasmExports?.get_attack_windup_sec?.() ?? this.params.attackLight.duration);\r\n        } else if (currentAttackState === 2) { // Active\r\n            norm = (totalGameTime - currentAttackStateTime) / (globalThis.wasmExports?.get_attack_active_sec?.() ?? this.params.attackLight.duration);\r\n        } else if (currentAttackState === 3) { // Recovery\r\n            norm = (totalGameTime - currentAttackStateTime) / (globalThis.wasmExports?.get_attack_recovery_sec?.() ?? this.params.attackLight.duration);\r\n        }\r\n\r\n        const barY = y + 8\r\n        ctx.fillStyle = 'rgba(0,0,0,0.35)'\r\n        ctx.fillRect(x - 24, barY, 48, 3)\r\n\r\n        // These ranges should be driven by WASM exports if precise\r\n        if (currentAttackState === 2) { // Active attack phase\r\n            ctx.fillStyle = '#ff4477'\r\n            // Placeholder: actual activeStart/End should come from WASM\r\n            ctx.fillRect(x - 24 + 48 * 0.28, barY, 48 * (0.38 - 0.28), 3)\r\n        }\r\n        if (globalThis.wasmExports?.get_is_rolling?.() === 1) { // If rolling\r\n            ctx.fillStyle = '#ffee55'\r\n            // Placeholder: iFrameStart/End should come from WASM\r\n            ctx.fillRect(x - 24 + 48 * 0.08, barY, 48 * (0.36 - 0.08), 3)\r\n        }\r\n        // Current norm marker\r\n        ctx.fillStyle = '#ffffff'\r\n        ctx.fillRect(x - 24 + 48 * norm - 1, barY - 1, 2, 5)\r\n\r\n        ctx.restore()\r\n    }\r\n    \r\n    // Helper function to convert numeric WASM state to string for internal use\r\n    getAnimStateName(state) {\r\n        switch(state) {\r\n            case 0: return 'idle'\r\n            case 1: return 'running'\r\n            case 2: return 'attacking'\r\n            case 3: return 'blocking'\r\n            case 4: return 'rolling'\r\n            case 5: return 'hurt'\r\n            case 6: return 'dead'\r\n            case 7: return 'jumping'\r\n            case 8: return 'doubleJumping'\r\n            case 9: return 'landing'\r\n            case 10: return 'wallSliding'\r\n            case 11: return 'dashing'\r\n            case 12: return 'chargingAttack'\r\n            default: return 'idle'\r\n        }\r\n    }\r\n\r\n    // Helper function to convert string state to numeric for CharacterAnimator\r\n    stateNameToNumber(stateName) {\r\n        switch(stateName) {\r\n            case 'idle': return 0\r\n            case 'running': return 1\r\n            case 'attacking': return 2\r\n            case 'blocking': return 3\r\n            case 'rolling': return 4\r\n            case 'hurt': return 5\r\n            case 'dead': return 6\r\n            case 'jumping': return 7\r\n            case 'doubleJumping': return 8\r\n            case 'landing': return 9\r\n            case 'wallSliding': return 10\r\n            case 'dashing': return 11\r\n            case 'chargingAttack': return 12\r\n            default: return 0\r\n        }\r\n    }\r\n    \r\n    // Get current animation info for debugging\r\n    getAnimationInfo() {\r\n        return {\r\n            state: this.state, // Now directly reflecting the local state derived from WASM\r\n            animation: this.animator.controller.currentAnimation?.name,\r\n            frame: this.animator.controller.getCurrentFrame(),\r\n            stateTimer: globalThis.wasmExports?.get_player_state_timer?.() ?? 0, // Assuming WASM exports player state timer\r\n            invulnerable: globalThis.wasmExports?.get_is_invulnerable?.() === 1,\r\n            \r\n            // Enhanced procedural animation info\r\n            proceduralData: this.currentTransform?.debug || null,\r\n            skeletalData: this.currentTransform?.skeleton || null,\r\n            secondaryMotion: this.currentTransform?.secondaryMotion || null,\r\n            environmental: this.currentTransform?.environmental || null\r\n        }\r\n    }\r\n    \r\n    // Render secondary motion effects (cloth, hair, equipment)\r\n    renderSecondaryMotion(ctx, secondaryMotion) {\r\n        if (!secondaryMotion) {return}\r\n        \r\n        ctx.save()\r\n        ctx.globalAlpha = 0.8\r\n        \r\n        // Render cloth physics\r\n        if (secondaryMotion.cloth) {\r\n            ctx.strokeStyle = '#4A4A4A'\r\n            ctx.lineWidth = 2\r\n            ctx.beginPath()\r\n            secondaryMotion.cloth.forEach((point, index) => {\r\n                if (index === 0) {\r\n                    ctx.moveTo(point.position.x, point.position.y)\r\n                } else {\r\n                    ctx.lineTo(point.position.x, point.position.y)\r\n                }\r\n            })\r\n            ctx.stroke()\r\n        }\r\n        \r\n        // Render hair physics\r\n        if (secondaryMotion.hair) {\r\n            ctx.strokeStyle = '#8B4513'\r\n            ctx.lineWidth = 3\r\n            ctx.lineCap = 'round'\r\n            ctx.beginPath()\r\n            secondaryMotion.hair.forEach((segment, index) => {\r\n                if (index === 0) {\r\n                    ctx.moveTo(segment.position.x, segment.position.y)\r\n                } else {\r\n                    ctx.lineTo(segment.position.x, segment.position.y)\r\n                }\r\n            })\r\n            ctx.stroke()\r\n        }\r\n        \r\n        // Render equipment physics\r\n        if (secondaryMotion.equipment) {\r\n            secondaryMotion.equipment.forEach(item => {\r\n                ctx.fillStyle = item.type === 'sword' ? '#C0C0C0' : '#8B4513'\r\n                ctx.fillRect(item.position.x - 2, item.position.y - 1, 4, 2)\r\n            })\r\n        }\r\n        \r\n        ctx.restore()\r\n    }\r\n    \r\n    // Render skeletal overlay for debugging and enhanced visualization\r\n    renderSkeletalOverlay(ctx, skeleton) {\r\n        if (!skeleton) {return}\r\n        \r\n        ctx.save()\r\n        ctx.strokeStyle = '#00ff88'\r\n        ctx.fillStyle = '#ffff44'\r\n        ctx.lineWidth = 1\r\n        ctx.globalAlpha = 0.6\r\n        \r\n        // Draw bones\r\n        this.drawBone(ctx, skeleton.torso, skeleton.head)\r\n        this.drawBone(ctx, skeleton.torso, skeleton.pelvis)\r\n        \r\n        // Draw arms\r\n        this.drawBone(ctx, skeleton.leftArm.shoulder, skeleton.leftArm.elbow)\r\n        this.drawBone(ctx, skeleton.leftArm.elbow, skeleton.leftArm.hand)\r\n        this.drawBone(ctx, skeleton.rightArm.shoulder, skeleton.rightArm.elbow)\r\n        this.drawBone(ctx, skeleton.rightArm.elbow, skeleton.rightArm.hand)\r\n        \r\n        // Draw legs\r\n        this.drawBone(ctx, skeleton.leftLeg.hip, skeleton.leftLeg.knee)\r\n        this.drawBone(ctx, skeleton.leftLeg.knee, skeleton.leftLeg.foot)\r\n        this.drawBone(ctx, skeleton.rightLeg.hip, skeleton.rightLeg.knee)\r\n        this.drawBone(ctx, skeleton.rightLeg.knee, skeleton.rightLeg.foot)\r\n        \r\n        // Draw joints\r\n        const joints = [\r\n            skeleton.head, skeleton.torso, skeleton.pelvis,\r\n            skeleton.leftArm.shoulder, skeleton.leftArm.elbow, skeleton.leftArm.hand,\r\n            skeleton.rightArm.shoulder, skeleton.rightArm.elbow, skeleton.rightArm.hand,\r\n            skeleton.leftLeg.hip, skeleton.leftLeg.knee, skeleton.leftLeg.foot,\r\n            skeleton.rightLeg.hip, skeleton.rightLeg.knee, skeleton.rightLeg.foot\r\n        ]\r\n        \r\n        joints.forEach(joint => {\r\n            if (joint && typeof joint.x !== \"undefined\" && typeof joint.y !== \"undefined\") {\r\n                ctx.beginPath()\r\n                ctx.arc(joint.x, joint.y, 2, 0, Math.PI * 2)\r\n                ctx.fill()\r\n            }\r\n        })\r\n        \r\n        ctx.restore()\r\n    }\r\n    \r\n    // Helper method to draw bones\r\n    drawBone(ctx, start, end) {\r\n        if (!start || !end || typeof start.x === \"undefined\" || typeof end.x === \"undefined\") {return}\r\n        \r\n        ctx.beginPath()\r\n        ctx.moveTo(start.x, start.y)\r\n        ctx.lineTo(end.x, end.y)\r\n        ctx.stroke()\r\n    }\r\n    \r\n    // Input helper to convert keyboard to player input - 5-button combat system\r\n    static createInputFromKeys(keys) {\r\n        return {\r\n            // Movement\r\n            left: keys.a || keys.arrowleft,\r\n            right: keys.d || keys.arrowright,\r\n            up: keys.w || keys.arrowup,\r\n            down: keys.s || keys.arrowdown,\r\n            \r\n            // 5-Button Combat System\r\n            lightAttack: keys.j || keys['1'],        // A1 = Light Attack\r\n            heavyAttack: keys.k || keys['2'],        // A2 = Heavy Attack  \r\n            block: keys.shift || keys['3'],          // Block = Hold to guard, tap to parry\r\n            roll: keys.control || keys['4'],         // Roll = Dodge with i-frames\r\n            special: keys.l || keys['5'],            // Special = Hero move\r\n            \r\n            // Legacy support\r\n            attack: keys.j || keys[' '],             // Maps to light attack\r\n            jump: keys.space || keys.z\r\n        }\r\n    }\r\n    \r\n    // New movement methods for enhanced animations\r\n    // These methods now just trigger actions, WASM will handle state changes\r\n    jump() {\r\n        // WASM will drive the jump state, so we just trigger the action\r\n        globalThis.wasmExports?.on_jump?.(); // New WASM function call for jumping\r\n        if (this.particleSystem) {\r\n            this.particleSystem.createDustCloud(this.x, this.y + this.height/2)\r\n        }\r\n        \r\n        if (this.soundSystem) {\r\n            this.soundSystem.play('jump')\r\n        }\r\n    }\r\n    \r\n}\r\n\r\nexport default AnimatedPlayer\r\n\r\n// Static helper: attach a key to toggle debug overlays for a given player instance\r\nAnimatedPlayer.attachDebugToggle = function(playerInstance, key = 'F3') {\r\n    if (!playerInstance || playerInstance.__debugToggleAttached) { return }\r\n    const targetKey = (key || 'F3').toLowerCase()\r\n    const handler = (e) => {\r\n        const k = (e.key || '').toLowerCase()\r\n        if (k === targetKey.toLowerCase()) {\r\n            playerInstance.debugMode = !playerInstance.debugMode\r\n        }\r\n    }\r\n    try {\r\n        addEventListener('keydown', handler)\r\n        playerInstance.__debugToggleAttached = true\r\n    } catch {\r\n        // Ignore debug handler attachment errors\r\n    }\r\n}"],"names":[],"mappings":"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"}