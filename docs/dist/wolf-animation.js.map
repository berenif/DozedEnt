{"version":3,"file":"wolf-animation.js","sources":["../src/wolf-animation.js"],"sourcesContent":["// Enhanced Wolf Animation System\n// Provides advanced animations, procedural movements, and visual effects for wolves\n\nimport { Animation, AnimationFrame } from './animation-system.js'\nimport { ParticleSystem } from './particle-system.js'\n\nexport class WolfAnimationSystem {\n    constructor() {\n        // Animation definitions for different wolf states\n        this.animations = new Map()\n        this.proceduralAnimations = new Map()\n        this.particleEffects = new Map()\n        \n        this.initializeAnimations()\n        this.initializeProceduralAnimations()\n        this.initializeParticleEffects()\n    }\n    \n    initializeAnimations() {\n        // Idle animation - subtle breathing and ear twitches\n        this.animations.set('idle', {\n            breathing: {\n                amplitude: 2,\n                frequency: 0.002,\n                offset: 0\n            },\n            earTwitch: {\n                probability: 0.001,\n                duration: 300,\n                maxRotation: 0.2\n            },\n            tailSway: {\n                amplitude: 0.1,\n                frequency: 0.003\n            },\n            blinking: {\n                probability: 0.002,\n                duration: 150\n            }\n        })\n        \n        // Walking animation\n        this.animations.set('walking', {\n            legCycle: {\n                frequency: 0.008,\n                amplitude: 8,\n                phaseOffset: Math.PI\n            },\n            bodyBob: {\n                amplitude: 2,\n                frequency: 0.016\n            },\n            headBob: {\n                amplitude: 1.5,\n                frequency: 0.008\n            },\n            tailSway: {\n                amplitude: 0.2,\n                frequency: 0.008\n            }\n        })\n        \n        // Running animation\n        this.animations.set('running', {\n            legCycle: {\n                frequency: 0.015,\n                amplitude: 12,\n                phaseOffset: Math.PI,\n                stretchFactor: 1.2\n            },\n            bodyBob: {\n                amplitude: 4,\n                frequency: 0.03\n            },\n            headBob: {\n                amplitude: 3,\n                frequency: 0.015\n            },\n            tailStream: {\n                amplitude: 0.4,\n                frequency: 0.02,\n                streamEffect: true\n            },\n            earsPinned: true\n        })\n        \n        // Prowling animation (stalking)\n        this.animations.set('prowling', {\n            legCycle: {\n                frequency: 0.004,\n                amplitude: 5,\n                phaseOffset: Math.PI,\n                careful: true // Careful foot placement\n            },\n            bodyLowered: {\n                lowerAmount: 10,\n                sway: 1\n            },\n            headLowered: {\n                lowerAmount: 5,\n                scanning: true,\n                scanSpeed: 0.002\n            },\n            tailStill: {\n                tipTwitch: 0.01,\n                frequency: 0.005\n            },\n            earsForward: {\n                rotation: -0.3,\n                alertness: 1.0\n            }\n        })\n        \n        // Lunging animation\n        this.animations.set('lunging', {\n            bodyStretch: {\n                stretchFactor: 1.3,\n                compressionStart: 0.8, // Compress before launch\n                extensionPeak: 1.5\n            },\n            legsExtended: {\n                frontExtension: 20,\n                rearExtension: 15,\n                clawsOut: true\n            },\n            mouthOpen: {\n                openAmount: 0.8,\n                teethVisible: true\n            },\n            earsBack: {\n                rotation: 0.5\n            },\n            furRipple: {\n                intensity: 0.3,\n                speed: 0.02\n            }\n        })\n        \n        // Attacking animation\n        this.animations.set('attacking', {\n            biteSequence: [\n                { jaw: 0, duration: 100 },\n                { jaw: 0.9, duration: 50 },\n                { jaw: 0.7, duration: 100 },\n                { jaw: 0, duration: 150 }\n            ],\n            headShake: {\n                amplitude: 5,\n                frequency: 0.05\n            },\n            clawSwipe: {\n                swipeSpeed: 0.03,\n                swipeArc: Math.PI / 3\n            },\n            bodyTense: {\n                tensionLevel: 0.8\n            }\n        })\n        \n        // Howling animation\n        this.animations.set('howling', {\n            headTilt: {\n                startAngle: 0,\n                endAngle: -Math.PI / 4,\n                duration: 1000\n            },\n            mouthOpen: {\n                openAmount: 0.6,\n                vibration: 0.02\n            },\n            chestExpansion: {\n                expansionAmount: 1.2,\n                frequency: 0.003\n            },\n            tailRaised: {\n                angle: 0.3\n            },\n            soundWaves: {\n                frequency: 0.01,\n                amplitude: 2,\n                visible: true\n            }\n        })\n        \n        // Hurt animation\n        this.animations.set('hurt', {\n            flinch: {\n                intensity: 10,\n                duration: 200,\n                direction: 'away'\n            },\n            earsFlat: {\n                rotation: 0.6\n            },\n            tailTucked: {\n                tuckAmount: 0.8\n            },\n            whimper: {\n                mouthOpen: 0.2,\n                duration: 300\n            },\n            bodyShake: {\n                amplitude: 3,\n                frequency: 0.1,\n                dampening: 0.9\n            }\n        })\n        \n        // Death animation\n        this.animations.set('death', {\n            collapse: {\n                stages: [\n                    { legs: 'buckle', duration: 300 },\n                    { body: 'fall', duration: 400 },\n                    { final: 'limp', duration: 500 }\n                ]\n            },\n            fadeOut: {\n                startDelay: 1000,\n                duration: 2000\n            }\n        })\n    }\n    \n    initializeProceduralAnimations() {\n        // Procedural leg movement system\n        this.proceduralAnimations.set('legIK', {\n            calculateLegPosition: (wolf, legIndex, time) => {\n                const anim = this.animations.get(wolf.state)\n                if (!anim || !anim.legCycle) return { x: 0, y: 0 }\n                \n                const cycle = anim.legCycle\n                const phase = legIndex % 2 === 0 ? 0 : cycle.phaseOffset\n                const t = time * cycle.frequency + phase\n                \n                // Create realistic leg movement pattern\n                const x = Math.sin(t) * cycle.amplitude * 0.5\n                const y = Math.max(0, Math.sin(t * 2)) * cycle.amplitude\n                \n                // Add careful foot placement for prowling\n                if (cycle.careful) {\n                    return {\n                        x: x * 0.5,\n                        y: y * 0.7,\n                        placement: 'careful'\n                    }\n                }\n                \n                return { x, y }\n            }\n        })\n        \n        // Procedural tail physics\n        this.proceduralAnimations.set('tailPhysics', {\n            segments: 5,\n            calculateTailCurve: (wolf, time) => {\n                const anim = this.animations.get(wolf.state)\n                const segments = []\n                \n                for (let i = 0; i < 5; i++) {\n                    const delay = i * 0.1\n                    let angle = 0\n                    \n                    if (anim?.tailSway) {\n                        angle = Math.sin(time * anim.tailSway.frequency - delay) * \n                               anim.tailSway.amplitude * (1 - i * 0.15)\n                    } else if (anim?.tailStream) {\n                        // Streaming effect for running\n                        angle = Math.sin(time * anim.tailStream.frequency - delay) * \n                               anim.tailStream.amplitude * (1 + i * 0.1)\n                    } else if (anim?.tailTucked) {\n                        angle = anim.tailTucked.tuckAmount * (1 + i * 0.2)\n                    }\n                    \n                    segments.push({\n                        angle,\n                        length: 8 - i * 0.5\n                    })\n                }\n                \n                return segments\n            }\n        })\n        \n        // Procedural fur animation\n        this.proceduralAnimations.set('furDynamics', {\n            calculateFurMovement: (wolf, time, windStrength = 0) => {\n                const speed = Math.sqrt(wolf.velocity.x ** 2 + wolf.velocity.y ** 2)\n                const windEffect = Math.sin(time * 0.005) * windStrength\n                \n                return {\n                    ripple: speed > 200 ? Math.sin(time * 0.02) * 0.2 : 0,\n                    flow: windEffect + (speed / 1000),\n                    ruffled: wolf.state === 'hurt' || wolf.state === 'attacking'\n                }\n            }\n        })\n        \n        // Procedural breathing\n        this.proceduralAnimations.set('breathing', {\n            calculateBreathing: (wolf, time) => {\n                const baseRate = 0.002\n                const stateMultiplier = {\n                    idle: 1,\n                    walking: 1.2,\n                    running: 2,\n                    prowling: 0.8,\n                    attacking: 1.5,\n                    hurt: 1.8,\n                    howling: 1.3\n                }\n                \n                const rate = baseRate * (stateMultiplier[wolf.state] || 1)\n                const depth = wolf.state === 'running' ? 4 : 2\n                \n                return {\n                    chestExpansion: Math.sin(time * rate) * depth,\n                    bellyExpansion: Math.sin(time * rate - 0.2) * depth * 0.7\n                }\n            }\n        })\n    }\n    \n    initializeParticleEffects() {\n        // Dust particles for running\n        this.particleEffects.set('runDust', {\n            emitRate: 5,\n            particleLife: 500,\n            particleSpeed: { min: 20, max: 50 },\n            particleSize: { min: 2, max: 5 },\n            particleColor: 'rgba(139, 115, 85, 0.4)',\n            emitAngle: { min: Math.PI * 0.4, max: Math.PI * 0.6 },\n            gravity: 50\n        })\n        \n        // Blood particles for attacks\n        this.particleEffects.set('bloodSplatter', {\n            emitRate: 20,\n            particleLife: 800,\n            particleSpeed: { min: 100, max: 200 },\n            particleSize: { min: 1, max: 3 },\n            particleColor: 'rgba(139, 0, 0, 0.7)',\n            emitAngle: { min: 0, max: Math.PI * 2 },\n            gravity: 200\n        })\n        \n        // Saliva/foam for attacking\n        this.particleEffects.set('attackFoam', {\n            emitRate: 8,\n            particleLife: 300,\n            particleSpeed: { min: 50, max: 100 },\n            particleSize: { min: 1, max: 2 },\n            particleColor: 'rgba(255, 255, 255, 0.6)',\n            emitAngle: { min: -Math.PI / 6, max: Math.PI / 6 },\n            gravity: 100\n        })\n        \n        // Sound waves for howling\n        this.particleEffects.set('soundWaves', {\n            emitRate: 2,\n            particleLife: 1500,\n            particleSpeed: { min: 100, max: 100 },\n            particleSize: { min: 20, max: 40 },\n            particleColor: 'rgba(255, 255, 255, 0.2)',\n            emitAngle: { min: -Math.PI / 8, max: Math.PI / 8 },\n            gravity: 0,\n            expanding: true\n        })\n    }\n    \n    // Apply animation to wolf\n    applyAnimation(wolf, deltaTime) {\n        const time = wolf.animationTime\n        const state = wolf.state\n        const animation = this.animations.get(state)\n        \n        if (!animation) return\n        \n        // Apply procedural animations\n        this.applyProceduralAnimations(wolf, time)\n        \n        // Apply state-specific animations\n        switch (state) {\n            case 'idle':\n                this.applyIdleAnimation(wolf, animation, time)\n                break\n            case 'walking':\n            case 'running':\n                this.applyLocomotionAnimation(wolf, animation, time)\n                break\n            case 'prowling':\n                this.applyProwlingAnimation(wolf, animation, time)\n                break\n            case 'lunging':\n                this.applyLungingAnimation(wolf, animation, time)\n                break\n            case 'attacking':\n                this.applyAttackingAnimation(wolf, animation, time)\n                break\n            case 'howling':\n                this.applyHowlingAnimation(wolf, animation, time)\n                break\n            case 'hurt':\n                this.applyHurtAnimation(wolf, animation, time)\n                break\n        }\n        \n        // Update particle effects\n        this.updateParticleEffects(wolf, deltaTime)\n    }\n    \n    applyProceduralAnimations(wolf, time) {\n        // Apply breathing\n        const breathing = this.proceduralAnimations.get('breathing')\n        const breath = breathing.calculateBreathing(wolf, time)\n        wolf.breathingOffset = breath.chestExpansion\n        wolf.bellyOffset = breath.bellyExpansion\n        \n        // Apply fur dynamics\n        const furDynamics = this.proceduralAnimations.get('furDynamics')\n        wolf.furMovement = furDynamics.calculateFurMovement(wolf, time, 0.3)\n        \n        // Apply tail physics\n        const tailPhysics = this.proceduralAnimations.get('tailPhysics')\n        wolf.tailSegments = tailPhysics.calculateTailCurve(wolf, time)\n    }\n    \n    applyIdleAnimation(wolf, animation, time) {\n        // Ear twitching\n        if (Math.random() < animation.earTwitch.probability) {\n            wolf.earTwitchTime = time\n            wolf.earTwitchDuration = animation.earTwitch.duration\n        }\n        \n        if (wolf.earTwitchTime && time - wolf.earTwitchTime < wolf.earTwitchDuration) {\n            const progress = (time - wolf.earTwitchTime) / wolf.earTwitchDuration\n            wolf.earRotation = Math.sin(progress * Math.PI) * animation.earTwitch.maxRotation\n        } else {\n            wolf.earRotation = 0\n        }\n        \n        // Blinking\n        if (Math.random() < animation.blinking.probability) {\n            wolf.blinkTime = time\n            wolf.blinkDuration = animation.blinking.duration\n        }\n        \n        wolf.isBlinking = wolf.blinkTime && time - wolf.blinkTime < wolf.blinkDuration\n    }\n    \n    applyLocomotionAnimation(wolf, animation, time) {\n        // Leg animation\n        const legIK = this.proceduralAnimations.get('legIK')\n        wolf.legPositions = []\n        \n        for (let i = 0; i < 4; i++) {\n            wolf.legPositions[i] = legIK.calculateLegPosition(wolf, i, time)\n        }\n        \n        // Body bobbing\n        wolf.bodyBob = Math.sin(time * animation.bodyBob.frequency) * animation.bodyBob.amplitude\n        wolf.headBob = Math.sin(time * animation.headBob.frequency) * animation.headBob.amplitude\n        \n        // Ears pinned back when running fast\n        if (animation.earsPinned) {\n            wolf.earRotation = 0.4\n        }\n    }\n    \n    applyProwlingAnimation(wolf, animation, time) {\n        // Lower body position\n        wolf.bodyLowered = animation.bodyLowered.lowerAmount\n        wolf.bodySway = Math.sin(time * 0.002) * animation.bodyLowered.sway\n        \n        // Head scanning movement\n        if (animation.headLowered.scanning) {\n            wolf.headScan = Math.sin(time * animation.headLowered.scanSpeed) * 0.3\n        }\n        \n        // Alert ears\n        wolf.earRotation = animation.earsForward.rotation\n        wolf.earAlertness = animation.earsForward.alertness\n        \n        // Careful leg placement\n        const legIK = this.proceduralAnimations.get('legIK')\n        wolf.legPositions = []\n        for (let i = 0; i < 4; i++) {\n            wolf.legPositions[i] = legIK.calculateLegPosition(wolf, i, time)\n        }\n    }\n    \n    applyLungingAnimation(wolf, animation, time) {\n        const progress = wolf.lungeState.lungeProgress / wolf.lungeState.lungeDuration\n        \n        // Body stretch effect\n        let stretch = 1\n        if (progress < 0.2) {\n            // Compression phase\n            stretch = 1 - (progress / 0.2) * (1 - animation.bodyStretch.compressionStart)\n        } else {\n            // Extension phase\n            const extProgress = (progress - 0.2) / 0.8\n            stretch = animation.bodyStretch.compressionStart + \n                     extProgress * (animation.bodyStretch.extensionPeak - animation.bodyStretch.compressionStart)\n        }\n        wolf.bodyStretch = stretch\n        \n        // Legs extended\n        wolf.frontLegExtension = animation.legsExtended.frontExtension * progress\n        wolf.rearLegExtension = animation.legsExtended.rearExtension * progress\n        wolf.clawsOut = animation.legsExtended.clawsOut\n        \n        // Mouth open with teeth\n        wolf.mouthOpen = animation.mouthOpen.openAmount\n        wolf.teethVisible = animation.mouthOpen.teethVisible\n        \n        // Fur ripple effect\n        wolf.furRipple = Math.sin(time * 0.02) * animation.furRipple.intensity\n    }\n    \n    applyAttackingAnimation(wolf, animation, time) {\n        // Bite sequence\n        if (!wolf.biteSequenceIndex) wolf.biteSequenceIndex = 0\n        if (!wolf.biteSequenceTime) wolf.biteSequenceTime = time\n        \n        const currentBite = animation.biteSequence[wolf.biteSequenceIndex]\n        const elapsed = time - wolf.biteSequenceTime\n        \n        if (elapsed < currentBite.duration) {\n            wolf.jawOpen = currentBite.jaw\n        } else {\n            wolf.biteSequenceIndex = (wolf.biteSequenceIndex + 1) % animation.biteSequence.length\n            wolf.biteSequenceTime = time\n        }\n        \n        // Head shake\n        wolf.headShake = Math.sin(time * animation.headShake.frequency) * animation.headShake.amplitude\n        \n        // Body tension\n        wolf.bodyTension = animation.bodyTense.tensionLevel\n    }\n    \n    applyHowlingAnimation(wolf, animation, time) {\n        if (!wolf.howlStartTime) wolf.howlStartTime = time\n        \n        const howlProgress = Math.min((time - wolf.howlStartTime) / animation.headTilt.duration, 1)\n        \n        // Head tilting back\n        wolf.headTilt = animation.headTilt.startAngle + \n                       (animation.headTilt.endAngle - animation.headTilt.startAngle) * howlProgress\n        \n        // Mouth vibration\n        wolf.mouthOpen = animation.mouthOpen.openAmount\n        wolf.mouthVibration = Math.sin(time * 0.05) * animation.mouthOpen.vibration\n        \n        // Chest expansion for breath\n        wolf.chestExpansion = 1 + Math.sin(time * animation.chestExpansion.frequency) * \n                             (animation.chestExpansion.expansionAmount - 1)\n        \n        // Sound wave effect\n        if (animation.soundWaves.visible) {\n            wolf.soundWavePhase = time * animation.soundWaves.frequency\n            wolf.soundWaveAmplitude = animation.soundWaves.amplitude\n        }\n    }\n    \n    applyHurtAnimation(wolf, animation, time) {\n        if (!wolf.hurtStartTime) wolf.hurtStartTime = time\n        \n        const hurtElapsed = time - wolf.hurtStartTime\n        \n        // Flinch effect\n        if (hurtElapsed < animation.flinch.duration) {\n            const flinchProgress = hurtElapsed / animation.flinch.duration\n            wolf.flinchOffset = animation.flinch.intensity * (1 - flinchProgress)\n        }\n        \n        // Body shake with dampening\n        const shakeFactor = Math.pow(animation.bodyShake.dampening, hurtElapsed / 100)\n        wolf.bodyShake = Math.sin(time * animation.bodyShake.frequency) * \n                        animation.bodyShake.amplitude * shakeFactor\n        \n        // Ears and tail position\n        wolf.earRotation = animation.earsFlat.rotation\n        wolf.tailTucked = animation.tailTucked.tuckAmount\n    }\n    \n    updateParticleEffects(wolf, deltaTime) {\n        if (!wolf.particleSystem) {\n            wolf.particleSystem = new ParticleSystem()\n        }\n        \n        // Emit dust when running\n        if (wolf.state === 'running' && wolf.isGrounded) {\n            const dustEffect = this.particleEffects.get('runDust')\n            wolf.particleSystem.emit(\n                wolf.position.x - wolf.facing * 20,\n                wolf.position.y + wolf.height / 2,\n                dustEffect\n            )\n        }\n        \n        // Emit sound waves when howling\n        if (wolf.state === 'howling') {\n            const soundEffect = this.particleEffects.get('soundWaves')\n            wolf.particleSystem.emit(\n                wolf.position.x + wolf.facing * 30,\n                wolf.position.y - wolf.height / 4,\n                soundEffect\n            )\n        }\n        \n        // Update all particles\n        wolf.particleSystem.update(deltaTime)\n    }\n    \n    // Enhanced rendering with all animation effects\n    renderAnimatedWolf(ctx, wolf, camera) {\n        ctx.save()\n        \n        // Calculate screen position\n        const screenX = wolf.position.x - camera.x\n        const screenY = wolf.position.y - camera.y\n        \n        // Apply transformations\n        ctx.translate(screenX, screenY)\n        \n        // Apply body stretch for lunging\n        const stretchX = wolf.bodyStretch || 1\n        const stretchY = 2 - stretchX // Inverse stretch to maintain volume\n        ctx.scale(wolf.size * wolf.facing * stretchX, wolf.size * stretchY)\n        \n        // Apply body shake for hurt animation\n        if (wolf.bodyShake) {\n            ctx.translate(wolf.bodyShake, 0)\n        }\n        \n        // Apply flinch offset\n        if (wolf.flinchOffset) {\n            ctx.translate(-wolf.facing * wolf.flinchOffset, -wolf.flinchOffset * 0.5)\n        }\n        \n        // Draw shadow with animation\n        this.drawAnimatedShadow(ctx, wolf)\n        \n        // Draw animated body parts\n        this.drawAnimatedTail(ctx, wolf)\n        this.drawAnimatedLegs(ctx, wolf, 'hind')\n        this.drawAnimatedBody(ctx, wolf)\n        this.drawAnimatedLegs(ctx, wolf, 'front')\n        this.drawAnimatedNeck(ctx, wolf)\n        this.drawAnimatedHead(ctx, wolf)\n        \n        // Draw particle effects\n        if (wolf.particleSystem) {\n            wolf.particleSystem.render(ctx, camera)\n        }\n        \n        // Draw UI elements\n        this.drawWolfUI(ctx, wolf)\n        \n        ctx.restore()\n    }\n    \n    drawAnimatedShadow(ctx, wolf) {\n        const shadowScale = wolf.state === 'lunging' ? 1.3 : 1\n        const shadowAlpha = wolf.isGrounded ? 0.3 : 0.1\n        \n        ctx.fillStyle = `rgba(0, 0, 0, ${shadowAlpha})`\n        ctx.beginPath()\n        ctx.ellipse(0, wolf.height / 2 + 5, wolf.width / 3 * shadowScale, 8, 0, 0, Math.PI * 2)\n        ctx.fill()\n    }\n    \n    drawAnimatedTail(ctx, wolf) {\n        ctx.save()\n        \n        // Base tail position\n        let baseTailX = -wolf.width * 0.35\n        let baseTailY = -wolf.height * 0.1\n        \n        // Adjust for body lowered (prowling)\n        if (wolf.bodyLowered) {\n            baseTailY += wolf.bodyLowered * 0.5\n        }\n        \n        ctx.translate(baseTailX, baseTailY)\n        \n        // Draw segmented tail with physics\n        if (wolf.tailSegments) {\n            let currentX = 0\n            let currentY = 0\n            let currentAngle = 0\n            \n            wolf.tailSegments.forEach((segment, i) => {\n                ctx.save()\n                ctx.translate(currentX, currentY)\n                ctx.rotate(currentAngle + segment.angle)\n                \n                // Tail segment\n                const segmentWidth = 8 - i * 1.2\n                const segmentLength = segment.length\n                \n                ctx.fillStyle = i % 2 === 0 ? wolf.colors.primary : wolf.colors.secondary\n                ctx.fillRect(0, -segmentWidth/2, segmentLength, segmentWidth)\n                \n                // Update position for next segment\n                currentX += Math.cos(currentAngle + segment.angle) * segmentLength\n                currentY += Math.sin(currentAngle + segment.angle) * segmentLength\n                currentAngle += segment.angle\n                \n                ctx.restore()\n            })\n        } else {\n            // Fallback simple tail\n            ctx.rotate(wolf.tailPosition || 0)\n            ctx.fillStyle = wolf.colors.primary\n            ctx.beginPath()\n            ctx.moveTo(0, 0)\n            ctx.quadraticCurveTo(-15, 5, -25, 15)\n            ctx.quadraticCurveTo(-20, 20, -10, 18)\n            ctx.quadraticCurveTo(-5, 10, 0, 0)\n            ctx.fill()\n        }\n        \n        ctx.restore()\n    }\n    \n    drawAnimatedLegs(ctx, wolf, type) {\n        const legPositions = wolf.legPositions || []\n        const isHind = type === 'hind'\n        const startIndex = isHind ? 0 : 2\n        \n        for (let i = startIndex; i < startIndex + 2; i++) {\n            const legPos = legPositions[i] || { x: 0, y: 0 }\n            const baseX = isHind ? \n                -wolf.width * (0.25 - (i % 2) * 0.1) : \n                wolf.width * (0.15 + (i % 2) * 0.1)\n            const baseY = wolf.height * 0.2\n            \n            ctx.save()\n            ctx.translate(baseX + legPos.x, baseY)\n            \n            // Upper leg\n            ctx.fillStyle = wolf.colors.primary\n            ctx.fillRect(0, 0, 10, 15 - legPos.y * 0.5)\n            \n            // Lower leg\n            ctx.translate(0, 15 - legPos.y * 0.5)\n            ctx.rotate(legPos.y * 0.02) // Slight rotation based on movement\n            ctx.fillRect(0, 0, 8, 10 + legPos.y)\n            \n            // Paw\n            ctx.translate(0, 10 + legPos.y)\n            ctx.fillStyle = wolf.colors.secondary\n            ctx.fillRect(-1, 0, 10, 5)\n            \n            // Claws (visible when attacking or lunging)\n            if (wolf.clawsOut) {\n                ctx.fillStyle = wolf.colors.claws\n                for (let j = 0; j < 3; j++) {\n                    ctx.fillRect(j * 3, 4, 2, 4)\n                }\n            }\n            \n            ctx.restore()\n        }\n    }\n    \n    drawAnimatedBody(ctx, wolf) {\n        ctx.save()\n        \n        // Apply body lowered for prowling\n        if (wolf.bodyLowered) {\n            ctx.translate(0, wolf.bodyLowered)\n        }\n        \n        // Apply body bob for movement\n        if (wolf.bodyBob) {\n            ctx.translate(0, wolf.bodyBob)\n        }\n        \n        // Main body with breathing\n        const breathY = wolf.breathingOffset || 0\n        const chestExpansion = wolf.chestExpansion || 1\n        \n        ctx.fillStyle = wolf.colors.primary\n        ctx.beginPath()\n        ctx.ellipse(0, breathY, wolf.width * 0.35 * chestExpansion, wolf.height * 0.25, 0, 0, Math.PI * 2)\n        ctx.fill()\n        \n        // Belly with separate breathing\n        const bellyY = breathY + (wolf.bellyOffset || 0)\n        ctx.fillStyle = wolf.colors.belly\n        ctx.beginPath()\n        ctx.ellipse(0, bellyY + wolf.height * 0.1, wolf.width * 0.3, wolf.height * 0.15, 0, 0, Math.PI)\n        ctx.fill()\n        \n        // Animated fur texture\n        if (wolf.furMovement) {\n            this.drawAnimatedFur(ctx, wolf, 0, breathY, wolf.width * 0.35, wolf.height * 0.25)\n        }\n        \n        ctx.restore()\n    }\n    \n    drawAnimatedNeck(ctx, wolf) {\n        ctx.save()\n        \n        // Apply head bob\n        if (wolf.headBob) {\n            ctx.translate(0, wolf.headBob * 0.5)\n        }\n        \n        ctx.fillStyle = wolf.colors.primary\n        ctx.beginPath()\n        ctx.moveTo(wolf.width * 0.15, -wolf.height * 0.1)\n        ctx.quadraticCurveTo(wolf.width * 0.25, -wolf.height * 0.05, wolf.width * 0.3, -wolf.height * 0.15)\n        ctx.quadraticCurveTo(wolf.width * 0.25, wolf.height * 0.05, wolf.width * 0.15, wolf.height * 0.1)\n        ctx.fill()\n        \n        ctx.restore()\n    }\n    \n    drawAnimatedHead(ctx, wolf) {\n        ctx.save()\n        ctx.translate(wolf.width * 0.35, -wolf.height * 0.15)\n        \n        // Apply head tilt for howling\n        if (wolf.headTilt) {\n            ctx.rotate(wolf.headTilt)\n        }\n        \n        // Apply head shake for attacking\n        if (wolf.headShake) {\n            ctx.translate(wolf.headShake, 0)\n        }\n        \n        // Apply head scan for prowling\n        if (wolf.headScan) {\n            ctx.rotate(wolf.headScan)\n        }\n        \n        // Apply head bob\n        if (wolf.headBob) {\n            ctx.translate(0, wolf.headBob)\n        }\n        \n        // Head shape\n        ctx.fillStyle = wolf.colors.primary\n        ctx.beginPath()\n        ctx.moveTo(0, 0)\n        ctx.quadraticCurveTo(10, -5, 15, 0)\n        ctx.quadraticCurveTo(20, 3, 25, 5)\n        ctx.lineTo(28, 8)\n        ctx.quadraticCurveTo(25, 10, 20, 10)\n        ctx.quadraticCurveTo(10, 8, 0, 10)\n        ctx.quadraticCurveTo(-5, 5, 0, 0)\n        ctx.fill()\n        \n        // Animated ears\n        this.drawAnimatedEars(ctx, wolf)\n        \n        // Animated mouth\n        this.drawAnimatedMouth(ctx, wolf)\n        \n        // Animated eyes\n        this.drawAnimatedEyes(ctx, wolf)\n        \n        // Sound waves for howling\n        if (wolf.soundWavePhase !== undefined) {\n            this.drawSoundWaves(ctx, wolf)\n        }\n        \n        ctx.restore()\n    }\n    \n    drawAnimatedEars(ctx, wolf) {\n        const baseRotation = wolf.earRotation || 0\n        const alertness = wolf.earAlertness || 0\n        \n        // Left ear\n        ctx.save()\n        ctx.translate(5, -3)\n        ctx.rotate(baseRotation - alertness * 0.1)\n        \n        ctx.fillStyle = wolf.colors.primary\n        ctx.beginPath()\n        ctx.moveTo(0, 0)\n        ctx.lineTo(-3, -8 - alertness * 2)\n        ctx.lineTo(3, -8 - alertness * 2)\n        ctx.closePath()\n        ctx.fill()\n        \n        // Inner ear\n        ctx.fillStyle = wolf.colors.belly\n        ctx.beginPath()\n        ctx.moveTo(0, -2)\n        ctx.lineTo(-1, -6 - alertness)\n        ctx.lineTo(1, -6 - alertness)\n        ctx.closePath()\n        ctx.fill()\n        ctx.restore()\n        \n        // Right ear\n        ctx.save()\n        ctx.translate(8, -2)\n        ctx.rotate(baseRotation + alertness * 0.1)\n        \n        ctx.fillStyle = wolf.colors.secondary\n        ctx.beginPath()\n        ctx.moveTo(0, 0)\n        ctx.lineTo(-2, -7 - alertness * 2)\n        ctx.lineTo(3, -7 - alertness * 2)\n        ctx.closePath()\n        ctx.fill()\n        ctx.restore()\n    }\n    \n    drawAnimatedMouth(ctx, wolf) {\n        const mouthOpen = wolf.mouthOpen || wolf.jawOpen || 0\n        const mouthVibration = wolf.mouthVibration || 0\n        \n        // Snout\n        ctx.fillStyle = wolf.colors.secondary\n        ctx.beginPath()\n        ctx.moveTo(20, 5)\n        ctx.quadraticCurveTo(25, 6, 28, 8)\n        ctx.quadraticCurveTo(25, 9 + mouthOpen * 3, 20, 9 + mouthOpen * 3)\n        ctx.fill()\n        \n        // Open mouth\n        if (mouthOpen > 0) {\n            // Jaw\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.7)'\n            ctx.beginPath()\n            ctx.moveTo(20, 9)\n            ctx.quadraticCurveTo(24, 9 + mouthOpen * 5 + mouthVibration, \n                                 28, 9 + mouthOpen * 3 + mouthVibration)\n            ctx.quadraticCurveTo(24, 11 + mouthOpen * 5 + mouthVibration, \n                                 20, 11 + mouthOpen * 5)\n            ctx.fill()\n            \n            // Teeth\n            if (wolf.teethVisible || mouthOpen > 0.5) {\n                ctx.fillStyle = '#ffffff'\n                \n                // Upper fangs\n                ctx.beginPath()\n                ctx.moveTo(22, 9)\n                ctx.lineTo(21, 11 + mouthOpen * 2)\n                ctx.lineTo(23, 11 + mouthOpen * 2)\n                ctx.closePath()\n                ctx.fill()\n                \n                ctx.beginPath()\n                ctx.moveTo(25, 9)\n                ctx.lineTo(24, 11 + mouthOpen * 2)\n                ctx.lineTo(26, 11 + mouthOpen * 2)\n                ctx.closePath()\n                ctx.fill()\n                \n                // Lower fangs\n                if (mouthOpen > 0.7) {\n                    ctx.beginPath()\n                    ctx.moveTo(23, 11 + mouthOpen * 4)\n                    ctx.lineTo(22, 9 + mouthOpen * 4)\n                    ctx.lineTo(24, 9 + mouthOpen * 4)\n                    ctx.closePath()\n                    ctx.fill()\n                }\n            }\n            \n            // Tongue\n            if (mouthOpen > 0.3 && wolf.state !== 'attacking') {\n                ctx.fillStyle = 'rgba(255, 100, 100, 0.8)'\n                ctx.beginPath()\n                ctx.ellipse(24, 10 + mouthOpen * 3, 3, 2 + mouthOpen * 2, 0.2, 0, Math.PI)\n                ctx.fill()\n            }\n        }\n        \n        // Nose\n        ctx.fillStyle = wolf.colors.nose\n        ctx.beginPath()\n        ctx.arc(28, 8, 2, 0, Math.PI * 2)\n        ctx.fill()\n    }\n    \n    drawAnimatedEyes(ctx, wolf) {\n        // Check if blinking\n        if (wolf.isBlinking) {\n            // Closed eye line\n            ctx.strokeStyle = wolf.colors.secondary\n            ctx.lineWidth = 2\n            ctx.beginPath()\n            ctx.moveTo(10, 3)\n            ctx.lineTo(16, 3)\n            ctx.stroke()\n            return\n        }\n        \n        // Eye glow effect\n        if (wolf.state === 'prowling' || wolf.state === 'lunging' || wolf.state === 'attacking') {\n            ctx.shadowColor = wolf.colors.eyes\n            ctx.shadowBlur = 8\n        }\n        \n        // Eye white\n        ctx.fillStyle = '#ffffff'\n        ctx.beginPath()\n        ctx.ellipse(12, 3, 4, 3, -0.2, 0, Math.PI * 2)\n        ctx.fill()\n        \n        // Iris with dynamic size\n        const pupilDilation = wolf.state === 'attacking' ? 0.7 : \n                             wolf.state === 'prowling' ? 0.5 : 0.3\n        ctx.fillStyle = wolf.colors.eyes\n        ctx.beginPath()\n        ctx.arc(13, 3, 2, 0, Math.PI * 2)\n        ctx.fill()\n        \n        // Pupil\n        ctx.fillStyle = '#000000'\n        ctx.beginPath()\n        ctx.arc(13.5, 3, 1 * (1 - pupilDilation), 0, Math.PI * 2)\n        ctx.fill()\n        \n        // Eye shine\n        ctx.fillStyle = 'rgba(255, 255, 255, 0.7)'\n        ctx.beginPath()\n        ctx.arc(12, 2, 0.5, 0, Math.PI * 2)\n        ctx.fill()\n        \n        ctx.shadowBlur = 0\n    }\n    \n    drawAnimatedFur(ctx, wolf, x, y, width, height) {\n        ctx.strokeStyle = wolf.colors.secondary\n        ctx.lineWidth = 0.5\n        ctx.globalAlpha = 0.4\n        \n        const furLines = 12\n        const ripple = wolf.furRipple || 0\n        const flow = wolf.furMovement?.flow || 0\n        const ruffled = wolf.furMovement?.ruffled || false\n        \n        for (let i = 0; i < furLines; i++) {\n            const angle = (i / furLines) * Math.PI * 2\n            const baseX = x + Math.cos(angle) * width * 0.7\n            const baseY = y + Math.sin(angle) * height * 0.7\n            \n            // Add movement to fur\n            const offsetX = Math.sin(wolf.animationTime * 0.01 + i) * ripple * 10\n            const offsetY = Math.cos(wolf.animationTime * 0.01 + i) * ripple * 5\n            \n            ctx.beginPath()\n            ctx.moveTo(baseX, baseY)\n            \n            if (ruffled) {\n                // Spiky fur when agitated\n                ctx.lineTo(baseX + Math.cos(angle) * 8 + offsetX, \n                          baseY + Math.sin(angle) * 8 + offsetY)\n            } else {\n                // Smooth fur\n                ctx.quadraticCurveTo(\n                    baseX + Math.cos(angle) * 4 + offsetX * 0.5,\n                    baseY + Math.sin(angle) * 4 + offsetY * 0.5,\n                    baseX + Math.cos(angle + flow) * 6 + offsetX,\n                    baseY + Math.sin(angle + flow) * 6 + offsetY\n                )\n            }\n            ctx.stroke()\n        }\n        \n        ctx.globalAlpha = 1\n    }\n    \n    drawSoundWaves(ctx, wolf) {\n        ctx.save()\n        ctx.globalAlpha = 0.3\n        ctx.strokeStyle = wolf.colors.eyes\n        ctx.lineWidth = 2\n        \n        // Draw expanding circular waves\n        for (let i = 0; i < 3; i++) {\n            const phase = wolf.soundWavePhase + i * Math.PI / 3\n            const radius = 10 + Math.sin(phase) * wolf.soundWaveAmplitude + i * 15\n            const alpha = 0.3 - i * 0.1\n            \n            ctx.globalAlpha = alpha\n            ctx.beginPath()\n            ctx.arc(30, 5, radius, -Math.PI / 3, Math.PI / 3)\n            ctx.stroke()\n        }\n        \n        ctx.restore()\n    }\n    \n    drawWolfUI(ctx, wolf) {\n        // Draw health bar for special wolves\n        if (wolf.isAlpha || wolf.health < wolf.maxHealth) {\n            ctx.save()\n            ctx.scale(1 / wolf.size, 1 / wolf.size)\n            \n            const barWidth = 60\n            const barHeight = 6\n            const barY = -wolf.height * 0.5 - 20\n            \n            // Background\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.5)'\n            ctx.fillRect(-barWidth / 2, barY, barWidth, barHeight)\n            \n            // Health\n            const healthPercent = wolf.health / wolf.maxHealth\n            ctx.fillStyle = healthPercent > 0.5 ? '#4caf50' : \n                           healthPercent > 0.25 ? '#ff9800' : '#f44336'\n            ctx.fillRect(-barWidth / 2, barY, barWidth * healthPercent, barHeight)\n            \n            // Border\n            ctx.strokeStyle = wolf.isAlpha ? '#ffd700' : '#ffffff'\n            ctx.lineWidth = 1\n            ctx.strokeRect(-barWidth / 2, barY, barWidth, barHeight)\n            \n            // Status icons\n            if (wolf.isAlpha) {\n                ctx.font = '12px Arial'\n                ctx.textAlign = 'center'\n                ctx.fillText('👑', 0, barY - 5)\n            }\n            \n            // State indicator\n            if (wolf.state === 'prowling') {\n                ctx.fillText('👁', -35, barY + 5)\n            } else if (wolf.state === 'howling') {\n                ctx.fillText('🔊', -35, barY + 5)\n            }\n            \n            ctx.restore()\n        }\n        \n        // Draw charge indicator for lunge\n        if (wolf.lungeState?.charging) {\n            ctx.save()\n            ctx.globalAlpha = 0.7\n            \n            const chargePercent = wolf.lungeState.chargeTime / wolf.lungeState.maxChargeTime\n            const indicatorRadius = 15\n            \n            // Charging circle\n            ctx.strokeStyle = `hsl(${chargePercent * 60}, 100%, 50%)`\n            ctx.lineWidth = 3\n            ctx.beginPath()\n            ctx.arc(0, -wolf.height * 0.7, indicatorRadius, \n                   -Math.PI / 2, -Math.PI / 2 + Math.PI * 2 * chargePercent)\n            ctx.stroke()\n            \n            // Pulse effect\n            if (chargePercent >= 1) {\n                ctx.globalAlpha = 0.3 + Math.sin(wolf.animationTime * 0.01) * 0.3\n                ctx.strokeStyle = '#ff0000'\n                ctx.beginPath()\n                ctx.arc(0, -wolf.height * 0.7, indicatorRadius + 5, 0, Math.PI * 2)\n                ctx.stroke()\n            }\n            \n            ctx.restore()\n        }\n    }\n}\n\n// Export the animation system\nexport default WolfAnimationSystem"],"names":[],"mappings":"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"}