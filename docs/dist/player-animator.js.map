{"version":3,"file":"player-animator.js","sources":["../src/player-animator.js"],"sourcesContent":["// Enhanced Player with Animation System Integration\n// Provides a complete player character with roll, attack, block, and hurt animations\n\nimport { CharacterAnimator, AnimationPresets } from './animation-system.js'\nimport { SoundSystem } from './sound-system.js'\nimport { ParticleSystem } from './particle-system.js'\n\nexport class AnimatedPlayer {\n    constructor(x = 400, y = 300, options = {}) {\n        // Position and physics\n        this.x = x\n        this.y = y\n        this.vx = 0\n        this.vy = 0\n        this.facing = 1 // 1 for right, -1 for left\n        \n        // Player stats\n        this.health = options.health || 100\n        this.maxHealth = options.maxHealth || 100\n        this.stamina = options.stamina || 100\n        this.maxStamina = options.maxStamina || 100\n        this.speed = options.speed || 250\n        this.rollSpeed = options.rollSpeed || 500\n        \n        // State management\n        this.state = 'idle' // idle, running, attacking, blocking, rolling, hurt, dead\n        this.previousState = 'idle'\n        this.stateTimer = 0\n        this.invulnerable = false\n        this.invulnerabilityTimer = 0\n        \n        // Animation system\n        this.animator = new CharacterAnimator()\n        this.animations = AnimationPresets.createPlayerAnimations()\n        this.setupAnimations()\n        \n        // Action cooldowns\n        this.attackCooldown = 0\n        this.rollCooldown = 0\n        this.blockHeld = false\n        \n        // Visual properties\n        this.width = options.width || 32\n        this.height = options.height || 32\n        this.color = options.color || '#00ff88'\n        this.sprite = options.sprite || null\n        \n        // Effects\n        this.particleSystem = options.particleSystem || null\n        this.soundSystem = options.soundSystem || null\n        \n        // Combat properties\n        this.attackDamage = options.attackDamage || 20\n        this.attackRange = options.attackRange || 60\n        this.blockDamageReduction = options.blockDamageReduction || 0.5\n    }\n    \n    setupAnimations() {\n        // Add all animations to the controller\n        Object.values(this.animations).forEach(animation => {\n            this.animator.controller.addAnimation(animation)\n        })\n        \n        // Start with idle animation\n        this.animator.controller.play('idle')\n    }\n    \n    update(deltaTime, input = {}) {\n        // Update timers\n        this.stateTimer -= deltaTime\n        this.attackCooldown = Math.max(0, this.attackCooldown - deltaTime)\n        this.rollCooldown = Math.max(0, this.rollCooldown - deltaTime)\n        \n        // Update invulnerability\n        if (this.invulnerable) {\n            this.invulnerabilityTimer -= deltaTime\n            if (this.invulnerabilityTimer <= 0) {\n                this.invulnerable = false\n            }\n        }\n        \n        // Handle state transitions\n        this.handleStateTransitions(input)\n        \n        // Update based on current state\n        this.updateState(deltaTime, input)\n        \n        // Update animation system\n        this.animator.update(deltaTime, { x: this.x, y: this.y })\n        \n        // Apply physics\n        this.applyPhysics(deltaTime)\n        \n        // Regenerate stamina\n        if (this.state !== 'rolling' && this.state !== 'attacking') {\n            this.stamina = Math.min(this.maxStamina, this.stamina + 20 * deltaTime)\n        }\n    }\n    \n    handleStateTransitions(input) {\n        // Don't transition if in the middle of an action\n        if (this.state === 'attacking' && this.stateTimer > 0) return\n        if (this.state === 'rolling' && this.stateTimer > 0) return\n        if (this.state === 'hurt' && this.stateTimer > 0) return\n        if (this.state === 'dead') return\n        \n        // Check for roll input (highest priority)\n        if (input.roll && this.canRoll()) {\n            this.startRoll(input)\n            return\n        }\n        \n        // Check for attack input\n        if (input.attack && this.canAttack()) {\n            this.startAttack()\n            return\n        }\n        \n        // Check for block input\n        if (input.block && this.canBlock()) {\n            this.startBlock()\n            return\n        }\n        \n        // Release block\n        if (this.state === 'blocking' && !input.block) {\n            this.stopBlock()\n            return\n        }\n        \n        // Check for movement\n        const isMoving = (input.left || input.right || input.up || input.down)\n        if (isMoving && this.state !== 'running') {\n            this.setState('running')\n        } else if (!isMoving && this.state === 'running') {\n            this.setState('idle')\n        }\n    }\n    \n    updateState(deltaTime, input) {\n        switch(this.state) {\n            case 'idle':\n            case 'running':\n                this.handleMovement(deltaTime, input)\n                break\n                \n            case 'attacking':\n                // Attack animation plays out\n                if (this.stateTimer <= 0.2 && !this.attackExecuted) {\n                    this.executeAttack()\n                    this.attackExecuted = true\n                }\n                break\n                \n            case 'rolling':\n                // Continue roll in current direction\n                this.x += this.rollDirection.x * this.rollSpeed * deltaTime\n                this.y += this.rollDirection.y * this.rollSpeed * deltaTime\n                break\n                \n            case 'blocking':\n                // Slow movement while blocking\n                this.handleMovement(deltaTime, input, 0.3)\n                break\n                \n            case 'hurt':\n                // Knockback effect\n                this.vx *= Math.pow(0.5, deltaTime)\n                this.vy *= Math.pow(0.5, deltaTime)\n                break\n        }\n    }\n    \n    handleMovement(deltaTime, input, speedMultiplier = 1) {\n        let inputX = 0, inputY = 0\n        \n        if (input.left) inputX -= 1\n        if (input.right) inputX += 1\n        if (input.up) inputY -= 1\n        if (input.down) inputY += 1\n        \n        // Normalize diagonal movement\n        if (inputX !== 0 && inputY !== 0) {\n            inputX *= 0.707\n            inputY *= 0.707\n        }\n        \n        // Apply acceleration\n        const currentSpeed = this.speed * speedMultiplier\n        this.vx += inputX * 1000 * deltaTime\n        this.vy += inputY * 1000 * deltaTime\n        \n        // Clamp to max speed\n        const speed = Math.hypot(this.vx, this.vy)\n        if (speed > currentSpeed) {\n            this.vx = (this.vx / speed) * currentSpeed\n            this.vy = (this.vy / speed) * currentSpeed\n        }\n        \n        // Update facing direction\n        if (Math.abs(this.vx) > 10) {\n            this.facing = Math.sign(this.vx)\n        }\n    }\n    \n    applyPhysics(deltaTime) {\n        // Apply friction\n        if (this.state !== 'rolling') {\n            this.vx *= Math.pow(0.1, deltaTime)\n            this.vy *= Math.pow(0.1, deltaTime)\n        }\n        \n        // Update position\n        this.x += this.vx * deltaTime\n        this.y += this.vy * deltaTime\n    }\n    \n    startRoll(input) {\n        // Determine roll direction\n        let dirX = 0, dirY = 0\n        \n        if (input.left) dirX -= 1\n        if (input.right) dirX += 1\n        if (input.up) dirY -= 1\n        if (input.down) dirY += 1\n        \n        // If no direction input, roll in facing direction\n        if (dirX === 0 && dirY === 0) {\n            dirX = this.facing\n        }\n        \n        // Normalize direction\n        const length = Math.hypot(dirX, dirY)\n        if (length > 0) {\n            dirX /= length\n            dirY /= length\n        }\n        \n        this.rollDirection = { x: dirX, y: dirY }\n        this.setState('rolling')\n        this.stateTimer = 0.4 // Roll duration\n        this.rollCooldown = 0.8 // Cooldown before next roll\n        this.stamina -= 25\n        this.invulnerable = true\n        this.invulnerabilityTimer = 0.4\n        \n        // Create roll effect\n        if (this.particleSystem) {\n            this.particleSystem.createDustCloud(this.x, this.y)\n        }\n        \n        // Play roll sound\n        if (this.soundSystem) {\n            this.soundSystem.play('roll')\n        }\n    }\n    \n    startAttack() {\n        this.setState('attacking')\n        this.stateTimer = 0.4 // Attack duration\n        this.attackCooldown = 0.6 // Cooldown before next attack\n        this.attackExecuted = false\n        this.stamina -= 15\n        \n        // Play attack sound\n        if (this.soundSystem) {\n            this.soundSystem.play('attack')\n        }\n    }\n    \n    executeAttack() {\n        // Create attack hitbox\n        const hitboxX = this.x + (this.facing * this.attackRange / 2)\n        const hitboxY = this.y\n        \n        // Create attack effect\n        if (this.particleSystem) {\n            this.particleSystem.createSlashEffect(hitboxX, hitboxY, this.facing)\n        }\n        \n        // Return attack hitbox for collision detection\n        return {\n            x: hitboxX,\n            y: hitboxY,\n            width: this.attackRange,\n            height: this.height,\n            damage: this.attackDamage\n        }\n    }\n    \n    startBlock() {\n        this.setState('blocking')\n        this.blockHeld = true\n        \n        // Create block effect\n        if (this.particleSystem) {\n            this.particleSystem.createShieldEffect(this.x, this.y)\n        }\n        \n        // Play block sound\n        if (this.soundSystem) {\n            this.soundSystem.play('block')\n        }\n    }\n    \n    stopBlock() {\n        this.setState('idle')\n        this.blockHeld = false\n    }\n    \n    takeDamage(damage, knockbackX = 0, knockbackY = 0) {\n        if (this.invulnerable || this.state === 'dead') return false\n        \n        let actualDamage = damage\n        \n        // Reduce damage if blocking\n        if (this.state === 'blocking') {\n            actualDamage *= this.blockDamageReduction\n            \n            // Create block impact effect\n            if (this.particleSystem) {\n                this.particleSystem.createBlockImpact(this.x, this.y)\n            }\n            \n            // Play block impact sound\n            if (this.soundSystem) {\n                this.soundSystem.play('blockImpact')\n            }\n        } else {\n            // Not blocking, take full damage and enter hurt state\n            this.setState('hurt')\n            this.stateTimer = 0.3 // Hurt duration\n            \n            // Apply knockback\n            this.vx = knockbackX * 300\n            this.vy = knockbackY * 300\n            \n            // Create hurt effect\n            if (this.particleSystem) {\n                this.particleSystem.createBloodEffect(this.x, this.y)\n            }\n            \n            // Play hurt sound\n            if (this.soundSystem) {\n                this.soundSystem.play('hurt')\n            }\n        }\n        \n        // Apply damage\n        this.health = Math.max(0, this.health - actualDamage)\n        \n        // Check for death\n        if (this.health <= 0) {\n            this.die()\n        }\n        \n        return true\n    }\n    \n    die() {\n        this.setState('dead')\n        this.vx = 0\n        this.vy = 0\n        \n        // Create death effect\n        if (this.particleSystem) {\n            this.particleSystem.createDeathEffect(this.x, this.y)\n        }\n        \n        // Play death sound\n        if (this.soundSystem) {\n            this.soundSystem.play('death')\n        }\n    }\n    \n    respawn(x, y) {\n        this.x = x\n        this.y = y\n        this.vx = 0\n        this.vy = 0\n        this.health = this.maxHealth\n        this.stamina = this.maxStamina\n        this.setState('idle')\n        this.invulnerable = true\n        this.invulnerabilityTimer = 2 // 2 seconds of invulnerability after respawn\n        \n        // Create respawn effect\n        if (this.particleSystem) {\n            this.particleSystem.createRespawnEffect(this.x, this.y)\n        }\n        \n        // Play respawn sound\n        if (this.soundSystem) {\n            this.soundSystem.play('respawn')\n        }\n    }\n    \n    setState(newState) {\n        if (this.state === newState) return\n        \n        this.previousState = this.state\n        this.state = newState\n        \n        // Update animation\n        this.animator.setState(newState)\n        \n        // Play animation based on state\n        switch(newState) {\n            case 'idle':\n                this.animator.controller.play('idle', { transition: 200 })\n                break\n            case 'running':\n                this.animator.controller.play('run', { transition: 100 })\n                break\n            case 'attacking':\n                this.animator.controller.play('attack', { transition: 50 })\n                break\n            case 'blocking':\n                this.animator.controller.play('block', { transition: 100 })\n                break\n            case 'rolling':\n                this.animator.controller.play('roll', { transition: 50 })\n                break\n            case 'hurt':\n                this.animator.controller.play('hurt', { transition: 0 })\n                break\n            case 'dead':\n                // No animation for dead state yet, player stays in last frame\n                this.animator.controller.stop()\n                break\n        }\n    }\n    \n    canAttack() {\n        return this.attackCooldown <= 0 && \n               this.stamina >= 15 &&\n               this.state !== 'dead' &&\n               this.state !== 'rolling' &&\n               this.state !== 'hurt'\n    }\n    \n    canRoll() {\n        return this.rollCooldown <= 0 && \n               this.stamina >= 25 &&\n               this.state !== 'dead' &&\n               this.state !== 'attacking' &&\n               this.state !== 'hurt'\n    }\n    \n    canBlock() {\n        return this.stamina > 0 &&\n               this.state !== 'dead' &&\n               this.state !== 'rolling' &&\n               this.state !== 'attacking' &&\n               this.state !== 'hurt'\n    }\n    \n    render(ctx, camera = null) {\n        // Calculate screen position\n        let screenX = this.x\n        let screenY = this.y\n        \n        if (camera) {\n            screenX = this.x - camera.x\n            screenY = this.y - camera.y\n        }\n        \n        ctx.save()\n        \n        // Apply invulnerability flashing\n        if (this.invulnerable) {\n            ctx.globalAlpha = 0.5 + Math.sin(Date.now() * 0.02) * 0.3\n        }\n        \n        // Get current animation frame\n        const frame = this.animator.controller.getCurrentFrame()\n        \n        if (this.sprite && frame) {\n            // Draw sprite animation\n            ctx.save()\n            \n            // Flip sprite based on facing direction\n            if (this.facing < 0) {\n                ctx.scale(-1, 1)\n                screenX = -screenX - this.width\n            }\n            \n            ctx.drawImage(\n                this.sprite,\n                frame.x, frame.y, frame.width, frame.height,\n                screenX - this.width/2, screenY - this.height/2,\n                this.width, this.height\n            )\n            \n            ctx.restore()\n        } else {\n            // Fallback to colored rectangle\n            ctx.fillStyle = this.color\n            \n            // Apply state-based visual effects\n            if (this.state === 'hurt') {\n                ctx.fillStyle = '#ff4444'\n            } else if (this.state === 'blocking') {\n                ctx.fillStyle = '#4444ff'\n            } else if (this.state === 'rolling') {\n                ctx.fillStyle = '#ffff44'\n            }\n            \n            ctx.fillRect(\n                screenX - this.width/2,\n                screenY - this.height/2,\n                this.width,\n                this.height\n            )\n        }\n        \n        // Draw health bar\n        const barWidth = 40\n        const barHeight = 4\n        const barY = screenY - this.height/2 - 10\n        \n        // Background\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.5)'\n        ctx.fillRect(screenX - barWidth/2, barY, barWidth, barHeight)\n        \n        // Health\n        const healthPercent = this.health / this.maxHealth\n        ctx.fillStyle = healthPercent > 0.5 ? '#00ff00' : \n                       healthPercent > 0.25 ? '#ffff00' : '#ff0000'\n        ctx.fillRect(screenX - barWidth/2, barY, barWidth * healthPercent, barHeight)\n        \n        // Stamina bar\n        const staminaY = barY + 5\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.5)'\n        ctx.fillRect(screenX - barWidth/2, staminaY, barWidth, 2)\n        \n        const staminaPercent = this.stamina / this.maxStamina\n        ctx.fillStyle = '#00aaff'\n        ctx.fillRect(screenX - barWidth/2, staminaY, barWidth * staminaPercent, 2)\n        \n        ctx.restore()\n    }\n    \n    // Get current animation info for debugging\n    getAnimationInfo() {\n        return {\n            state: this.state,\n            animation: this.animator.controller.currentAnimation?.name,\n            frame: this.animator.controller.getCurrentFrame(),\n            stateTimer: this.stateTimer,\n            invulnerable: this.invulnerable\n        }\n    }\n    \n    // Input helper to convert keyboard to player input\n    static createInputFromKeys(keys) {\n        return {\n            left: keys['a'] || keys['arrowleft'],\n            right: keys['d'] || keys['arrowright'],\n            up: keys['w'] || keys['arrowup'],\n            down: keys['s'] || keys['arrowdown'],\n            attack: keys[' '] || keys['j'],\n            block: keys['shift'] || keys['k'],\n            roll: keys['control'] || keys['l']\n        }\n    }\n}\n\nexport default AnimatedPlayer"],"names":[],"mappings":"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"}