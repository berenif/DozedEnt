{"version":3,"file":"player-animator.js","sources":["../src/animation/animation-system.js","../src/animation/player-animator.js"],"sourcesContent":["// Advanced Animation System for Smooth Character and Object Animations\n// Provides sprite animations, procedural animations, and smooth transitions\n\nexport class AnimationFrame {\n    constructor(x, y, width, height, duration = 100) {\n        this.x = x\n        this.y = y\n        this.width = width\n        this.height = height\n        this.duration = duration // milliseconds\n    }\n}\n\nexport class Animation {\n    constructor(name, frames, options = {}) {\n        this.name = name\n        this.frames = frames\n        this.loop = options.loop !== null && options.loop !== void 0 ? options.loop : true\n        this.pingPong = options.pingPong || false\n        this.speed = options.speed || 1.0\n        this.onComplete = options.onComplete || null\n        this.onFrame = options.onFrame || null\n        \n        this.currentFrame = 0\n        this.elapsedTime = 0\n        this.direction = 1\n        this.isPlaying = false\n        this.hasCompleted = false\n    }\n\n    play() {\n        this.isPlaying = true\n        this.hasCompleted = false\n        this.currentFrame = 0\n        this.elapsedTime = 0\n        this.direction = 1\n    }\n\n    stop() {\n        this.isPlaying = false\n    }\n\n    pause() {\n        this.isPlaying = false\n    }\n\n    resume() {\n        this.isPlaying = true\n    }\n\n    reset() {\n        this.currentFrame = 0\n        this.elapsedTime = 0\n        this.direction = 1\n        this.hasCompleted = false\n    }\n\n    update(deltaTime) {\n        if (!this.isPlaying || this.frames.length === 0) {\n            return\n        }\n\n        this.elapsedTime += deltaTime * this.speed * 1000 // Convert to milliseconds\n\n        const currentFrameData = this.frames[this.currentFrame]\n        \n        if (this.elapsedTime >= currentFrameData.duration) {\n            this.elapsedTime -= currentFrameData.duration\n            \n            const previousFrame = this.currentFrame\n            this.currentFrame += this.direction\n\n            if (this.pingPong) {\n                if (this.currentFrame >= this.frames.length || this.currentFrame < 0) {\n                    this.direction *= -1\n                    this.currentFrame += this.direction * 2\n                }\n            } else if (this.currentFrame >= this.frames.length) {\n                    if (this.loop) {\n                        this.currentFrame = 0\n                    } else {\n                        this.currentFrame = this.frames.length - 1\n                        this.isPlaying = false\n                        this.hasCompleted = true\n                        if (this.onComplete) {this.onComplete()}\n                    }\n                }\n\n            if (this.onFrame && this.currentFrame !== previousFrame) {\n                this.onFrame(this.currentFrame, this.frames[this.currentFrame])\n            }\n        }\n    }\n\n    getCurrentFrame() {\n        if (this.frames.length === 0) {return null}\n        return this.frames[this.currentFrame]\n    }\n\n    getProgress() {\n        if (this.frames.length === 0) {return 0}\n        return this.currentFrame / (this.frames.length - 1)\n    }\n}\n\nexport class AnimationController {\n    constructor() {\n        this.animations = new Map()\n        this.currentAnimation = null\n        this.transitions = new Map()\n        this.blendTime = 0\n        this.blendFrom = null\n        this.blendProgress = 0\n    }\n\n    addAnimation(animation) {\n        this.animations.set(animation.name, animation)\n    }\n\n    play(animationName, options = {}) {\n        const animation = this.animations.get(animationName)\n        if (!animation) {\n            // Animation not found: ${animationName}\n            return\n        }\n\n        const transition = options.transition || 0\n        \n        if (transition > 0 && this.currentAnimation) {\n            this.blendFrom = this.currentAnimation\n            this.blendTime = transition\n            this.blendProgress = 0\n        }\n\n        this.currentAnimation = animation\n        animation.play()\n    }\n\n    stop() {\n        if (this.currentAnimation) {\n            this.currentAnimation.stop()\n        }\n    }\n\n    update(deltaTime) {\n        if (this.blendTime > 0) {\n            this.blendProgress += deltaTime\n            if (this.blendProgress >= this.blendTime) {\n                this.blendTime = 0\n                this.blendFrom = null\n                this.blendProgress = 0\n            }\n        }\n\n        if (this.currentAnimation) {\n            this.currentAnimation.update(deltaTime)\n        }\n    }\n\n    getCurrentFrame() {\n        if (!this.currentAnimation) {return null}\n        return this.currentAnimation.getCurrentFrame()\n    }\n\n    getBlendFrames() {\n        if (this.blendTime === 0 || !this.blendFrom) {\n            return { current: this.getCurrentFrame(), blend: null, blendFactor: 0 }\n        }\n\n        const blendFactor = this.blendProgress / this.blendTime\n        return {\n            current: this.currentAnimation.getCurrentFrame(),\n            blend: this.blendFrom.getCurrentFrame(),\n            blendFactor: blendFactor\n        }\n    }\n\n    isPlaying(animationName) {\n        return this.currentAnimation && \n               this.currentAnimation.name === animationName && \n               this.currentAnimation.isPlaying\n    }\n\n    setSpeed(speed) {\n        if (this.currentAnimation) {\n            this.currentAnimation.speed = speed\n        }\n    }\n}\n\nexport class ProceduralAnimator {\n    constructor() {\n        this.animations = new Map()\n    }\n\n    // Enhanced breathing animation with state-based modulation\n    createBreathingAnimation(options = {}) {\n        const {\n            baseScale = 1.0,\n            intensity = 0.015,\n            speed = 2.0,\n            depthVariation = 0.3,\n            asymmetry = 0.2,\n            heartRateSync = true\n        } = options\n\n        return {\n            time: 0,\n            phase: 0,\n            breathRate: speed,\n            currentIntensity: intensity,\n            depthMod: 1.0,\n            asymmetryOffset: 0,\n\n            // State-based modulation\n            modulateForState(state) {\n                switch(state) {\n                    case 'running':\n                        this.depthMod = 0.3\n                        this.breathRate = speed * 3.0\n                        break\n                    case 'attacking':\n                        this.depthMod = 0.5\n                        this.breathRate = speed * 1.8\n                        break\n                    case 'blocking':\n                        this.depthMod = 0.2\n                        this.breathRate = speed * 1.3\n                        break\n                    case 'hurt':\n                        this.depthMod = 0.1\n                        this.breathRate = speed * 0.5\n                        break\n                    case 'dead':\n                        this.depthMod = 0.0\n                        this.breathRate = 0.0\n                        break\n                    default: // idle, rolling\n                        this.depthMod = 1.0\n                        this.breathRate = speed\n                }\n            },\n\n            update(deltaTime) {\n                if (this.breathRate <= 0) {\n                    return {\n                        scaleX: baseScale,\n                        scaleY: baseScale,\n                        offsetY: 0,\n                        chestExpansion: 0\n                    }\n                }\n\n                this.time += deltaTime * this.breathRate\n                this.phase = Math.sin(this.time)\n\n                // Calculate breathing with realistic parameters\n                const currentIntensity = this.currentIntensity * this.depthMod\n                const breathScaleX = baseScale + this.phase * currentIntensity\n                const breathScaleY = baseScale + this.phase * currentIntensity * 0.7\n\n                // Add slight asymmetry for more natural feel\n                const asymmetryFactor = Math.sin(this.time * 0.7) * asymmetry\n                const finalScaleX = breathScaleX + asymmetryFactor * currentIntensity * 0.3\n\n                // Chest expansion effect (subtle upward movement)\n                const chestExpansion = this.phase * currentIntensity * 2\n\n                // Smooth transitions\n                const smoothFactor = 1 - Math.exp(-deltaTime * 5)\n                this.currentIntensity = this.currentIntensity + (currentIntensity - this.currentIntensity) * smoothFactor\n\n                return {\n                    scaleX: finalScaleX,\n                    scaleY: breathScaleY,\n                    offsetY: -chestExpansion * 0.5,\n                    chestExpansion: chestExpansion,\n                    phase: this.phase,\n                    intensity: currentIntensity\n                }\n            }\n        }\n    }\n\n    // Bobbing animation for floating objects\n    createBobbingAnimation(amplitude = 5, speed = 2) {\n        return {\n            time: 0,\n            update(deltaTime) {\n                this.time += deltaTime * speed\n                return {\n                    offsetY: Math.sin(this.time) * amplitude,\n                    rotation: Math.sin(this.time * 0.5) * 0.05\n                }\n            }\n        }\n    }\n\n    // Squash and stretch for impacts and jumps\n    createSquashStretch(intensity = 0.3, duration = 0.2) {\n        return {\n            time: 0,\n            active: false,\n            trigger() {\n                this.time = 0\n                this.active = true\n            },\n            update(deltaTime) {\n                if (!this.active) {return { scaleX: 1, scaleY: 1 }}\n                \n                this.time += deltaTime\n                const progress = Math.min(this.time / duration, 1)\n                \n                if (progress >= 1) {\n                    this.active = false\n                    return { scaleX: 1, scaleY: 1 }\n                }\n                \n                // Elastic easing\n                const t = progress\n                const p = 0.3\n                const s = p / 4\n                const postFix = 2**(-10 * t) * Math.sin((t - s) * (2 * Math.PI) / p) + 1\n                \n                const squash = 1 - postFix * intensity\n                const stretch = 1 + postFix * intensity * 0.5\n                \n                return {\n                    scaleX: progress < 0.5 ? stretch : squash,\n                    scaleY: progress < 0.5 ? squash : stretch\n                }\n            }\n        }\n    }\n\n    // Wobble effect for jelly-like movement\n    createWobble(frequency = 10, damping = 0.8, intensity = 0.1) {\n        return {\n            velocity: 0,\n            displacement: 0,\n            update(deltaTime, force = 0) {\n                // Spring physics\n                const springForce = -frequency * this.displacement\n                const dampingForce = -damping * this.velocity\n                \n                this.velocity += (springForce + dampingForce + force) * deltaTime\n                this.displacement += this.velocity * deltaTime\n                \n                return {\n                    scaleX: 1 + this.displacement * intensity,\n                    scaleY: 1 - this.displacement * intensity * 0.5,\n                    rotation: this.displacement * 0.1\n                }\n            },\n            impulse(force) {\n                this.velocity += force\n            }\n        }\n    }\n\n    // Anticipation animation for attacks\n    createAnticipation(duration = 0.3, intensity = 0.15) {\n        return {\n            time: 0,\n            active: false,\n            phase: 'idle', // idle, anticipation, action, recovery\n            trigger() {\n                this.time = 0\n                this.active = true\n                this.phase = 'anticipation'\n            },\n            update(deltaTime) {\n                if (!this.active) {return { scaleX: 1, scaleY: 1, offsetX: 0 }}\n                \n                this.time += deltaTime\n                \n                if (this.phase === 'anticipation') {\n                    const progress = Math.min(this.time / (duration * 0.4), 1)\n                    const eased = 1 - Math.cos(progress * Math.PI * 0.5)\n                    \n                    if (progress >= 1) {\n                        this.phase = 'action'\n                        this.time = 0\n                    }\n                    \n                    return {\n                        scaleX: 1 - eased * intensity,\n                        scaleY: 1 + eased * intensity * 0.5,\n                        offsetX: -eased * 10\n                    }\n                } else if (this.phase === 'action') {\n                    const progress = Math.min(this.time / (duration * 0.2), 1)\n                    const eased = Math.sin(progress * Math.PI * 0.5)\n                    \n                    if (progress >= 1) {\n                        this.phase = 'recovery'\n                        this.time = 0\n                    }\n                    \n                    return {\n                        scaleX: 1 + eased * intensity * 2,\n                        scaleY: 1 - eased * intensity,\n                        offsetX: eased * 20\n                    }\n                } else if (this.phase === 'recovery') {\n                    const progress = Math.min(this.time / (duration * 0.4), 1)\n                    const eased = 1 - (1 - progress)**3\n                    \n                    if (progress >= 1) {\n                        this.active = false\n                        this.phase = 'idle'\n                    }\n                    \n                    return {\n                        scaleX: 1 + (1 - eased) * intensity * 0.5,\n                        scaleY: 1 - (1 - eased) * intensity * 0.25,\n                        offsetX: (1 - eased) * 10\n                    }\n                }\n                \n                return { scaleX: 1, scaleY: 1, offsetX: 0 }\n            }\n        }\n    }\n\n    // Advanced Inverse Kinematics for limbs and weapon positioning\n    createAdvancedIK(options = {}) {\n        const {\n            armLength = 25,\n            forearmLength = 20,\n            damping = 0.8,\n            stiffness = 0.5,\n            maxReach = 40\n        } = options\n\n        return {\n            shoulder: { x: 0, y: 0 },\n            elbow: { x: 0, y: 0 },\n            hand: { x: 0, y: 0 },\n            target: { x: 0, y: 0 },\n            targetVelocity: { x: 0, y: 0 },\n\n            // Two-bone IK solver (CCD - Cyclic Coordinate Descent)\n            solveIK(targetX, targetY, shoulderX, shoulderY) {\n                this.target.x = targetX\n                this.target.y = targetY\n                this.shoulder.x = shoulderX\n                this.shoulder.y = shoulderY\n\n                // Calculate distance to target\n                const dx = targetX - shoulderX\n                const dy = targetY - shoulderY\n                const distance = Math.sqrt(dx * dx + dy * dy)\n\n                // Clamp to maximum reach\n                const clampedDistance = Math.min(distance, maxReach)\n                const scale = clampedDistance / distance\n                const clampedTargetX = shoulderX + dx * scale\n                const clampedTargetY = shoulderY + dy * scale\n\n                // Solve for elbow and hand positions\n                const totalLength = armLength + forearmLength\n                const cosAngle = Math.max(-1, Math.min(1, clampedDistance / totalLength))\n\n                // Law of cosines for elbow angle\n                const elbowAngle = Math.acos(cosAngle)\n                const shoulderAngle = Math.atan2(clampedTargetY - shoulderY, clampedTargetX - shoulderX)\n\n                // Position elbow\n                this.elbow.x = shoulderX + Math.cos(shoulderAngle - elbowAngle * 0.5) * armLength\n                this.elbow.y = shoulderY + Math.sin(shoulderAngle - elbowAngle * 0.5) * armLength\n\n                // Position hand\n                this.hand.x = this.elbow.x + Math.cos(shoulderAngle + elbowAngle * 0.5) * forearmLength\n                this.hand.y = this.elbow.y + Math.sin(shoulderAngle + elbowAngle * 0.5) * forearmLength\n\n                return {\n                    shoulder: { ...this.shoulder },\n                    elbow: { ...this.elbow },\n                    hand: { ...this.hand },\n                    target: { x: clampedTargetX, y: clampedTargetY },\n                    reach: clampedDistance / totalLength\n                }\n            },\n\n            // Smooth IK with velocity prediction\n            update(deltaTime, targetX, targetY, shoulderX, shoulderY) {\n                // Predict target position based on velocity\n                const predictedTargetX = targetX + this.targetVelocity.x * deltaTime * 0.1\n                const predictedTargetY = targetY + this.targetVelocity.y * deltaTime * 0.1\n\n                // Update target velocity for smoothing\n                this.targetVelocity.x = (predictedTargetX - this.target.x) / deltaTime * damping\n                this.targetVelocity.y = (predictedTargetY - this.target.y) / deltaTime * damping\n\n                // Solve IK with damping\n                const solution = this.solveIK(predictedTargetX, predictedTargetY, shoulderX, shoulderY)\n\n                // Apply stiffness damping to joints\n                const stiffnessFactor = 1 - Math.exp(-stiffness * deltaTime)\n\n                return {\n                    ...solution,\n                    stiffness: stiffnessFactor\n                }\n            }\n        }\n    }\n\n    // Secondary motion system for cloth, hair, and equipment\n    createSecondaryMotion(options = {}) {\n        const {\n            segments = 5,\n            length = 15,\n            damping = 0.85,\n            stiffness = 0.3,\n            gravity = 0.5,\n            windStrength = 0.1\n        } = options\n\n        return {\n            segments: [],\n            anchorPoint: { x: 0, y: 0 },\n            windTime: 0,\n\n            initialize(anchorX, anchorY) {\n                this.anchorPoint = { x: anchorX, y: anchorY }\n                this.segments = []\n\n                // Create chain segments\n                for (let i = 0; i < segments; i++) {\n                    this.segments.push({\n                        x: anchorX,\n                        y: anchorY + i * (length / segments),\n                        vx: 0,\n                        vy: 0,\n                        prevX: anchorX,\n                        prevY: anchorY + i * (length / segments)\n                    })\n                }\n            },\n\n            update(deltaTime, anchorX, anchorY, windDirection = 0) {\n                this.anchorPoint.x = anchorX\n                this.anchorPoint.y = anchorY\n                this.windTime += deltaTime\n\n                // Update anchor point\n                this.segments[0].x = anchorX\n                this.segments[0].y = anchorY\n\n                // Simulate chain physics\n                for (let i = 1; i < this.segments.length; i++) {\n                    const segment = this.segments[i]\n                    const prevSegment = this.segments[i - 1]\n\n                    // Calculate desired position (maintain distance from previous segment)\n                    const dx = segment.x - prevSegment.x\n                    const dy = segment.y - prevSegment.y\n                    const distance = Math.sqrt(dx * dx + dy * dy)\n                    const targetDistance = length / segments\n\n                    if (distance > 0) {\n                        const ratio = targetDistance / distance\n                        segment.x = prevSegment.x + dx * ratio\n                        segment.y = prevSegment.y + dy * ratio\n                    }\n\n                    // Apply gravity\n                    segment.vy += gravity * deltaTime\n\n                    // Apply wind\n                    const windX = Math.sin(this.windTime * 2 + windDirection) * windStrength\n                    const windY = Math.cos(this.windTime * 1.5 + windDirection) * windStrength * 0.5\n                    segment.vx += windX * deltaTime\n                    segment.vy += windY * deltaTime\n\n                    // Verlet integration for smooth movement\n                    const tempX = segment.x\n                    const tempY = segment.y\n                    segment.x += (segment.x - segment.prevX) * damping + segment.vx * deltaTime\n                    segment.y += (segment.y - segment.prevY) * damping + segment.vy * deltaTime\n                    segment.prevX = tempX\n                    segment.prevY = tempY\n\n                    // Dampen velocity\n                    segment.vx *= damping\n                    segment.vy *= damping\n                }\n\n                return [...this.segments]\n            },\n\n            applyForce(forceX, forceY, segmentIndex = -1) {\n                if (segmentIndex === -1) {\n                    // Apply to all segments\n                    this.segments.forEach(segment => {\n                        segment.vx += forceX\n                        segment.vy += forceY\n                    })\n                } else if (segmentIndex < this.segments.length) {\n                    this.segments[segmentIndex].vx += forceX\n                    this.segments[segmentIndex].vy += forceY\n                }\n            }\n        }\n    }\n\n    // Momentum-based animation adjustments\n    createMomentumSystem(options = {}) {\n        const {\n            maxMomentum = 10,\n            momentumDecay = 0.9,\n            momentumInfluence = 0.3,\n            directionSmoothing = 0.8\n        } = options\n\n        return {\n            momentum: { x: 0, y: 0 },\n            smoothedDirection: { x: 0, y: 0 },\n            lastVelocity: { x: 0, y: 0 },\n\n            update(deltaTime, velocityX, velocityY, isGrounded = true) {\n                // Calculate velocity change\n                const deltaVx = velocityX - this.lastVelocity.x\n                const deltaVy = velocityY - this.lastVelocity.y\n                this.lastVelocity = { x: velocityX, y: velocityY }\n\n                // Build momentum from acceleration\n                const acceleration = Math.sqrt(deltaVx * deltaVx + deltaVy * deltaVy)\n                if (acceleration > 0.1) {\n                    const momentumStrength = Math.min(acceleration * momentumInfluence, maxMomentum)\n                    const momentumDirX = deltaVx / acceleration\n                    const momentumDirY = deltaVy / acceleration\n\n                    this.momentum.x += momentumDirX * momentumStrength\n                    this.momentum.y += momentumDirY * momentumStrength\n                }\n\n                // Apply momentum decay\n                this.momentum.x *= momentumDecay\n                this.momentum.y *= momentumDecay\n\n                // Clamp momentum\n                const momentumMagnitude = Math.sqrt(this.momentum.x * this.momentum.x + this.momentum.y * this.momentum.y)\n                if (momentumMagnitude > maxMomentum) {\n                    this.momentum.x = (this.momentum.x / momentumMagnitude) * maxMomentum\n                    this.momentum.y = (this.momentum.y / momentumMagnitude) * maxMomentum\n                }\n\n                // Smooth direction changes\n                const currentDirection = { x: velocityX, y: velocityY }\n                const directionMagnitude = Math.sqrt(currentDirection.x * currentDirection.x + currentDirection.y * currentDirection.y)\n\n                if (directionMagnitude > 0.1) {\n                    const normalizedDir = {\n                        x: currentDirection.x / directionMagnitude,\n                        y: currentDirection.y / directionMagnitude\n                    }\n\n                    this.smoothedDirection.x = this.smoothedDirection.x * (1 - directionSmoothing) + normalizedDir.x * directionSmoothing\n                    this.smoothedDirection.y = this.smoothedDirection.y * (1 - directionSmoothing) + normalizedDir.y * directionSmoothing\n                }\n\n                return {\n                    momentum: { ...this.momentum },\n                    smoothedDirection: { ...this.smoothedDirection },\n                    leanAngle: isGrounded ? Math.atan2(this.momentum.x, Math.abs(this.momentum.y) + 1) * 0.3 : 0,\n                    bounceFactor: momentumMagnitude * 0.1,\n                    stretchFactor: Math.max(0, momentumMagnitude * 0.05)\n                }\n            },\n\n            addImpulse(impulseX, impulseY) {\n                this.momentum.x += impulseX\n                this.momentum.y += impulseY\n            }\n        }\n    }\n\n    // Trail effect for fast movement\n    createTrailEffect(maxTrails = 5, fadeSpeed = 0.3) {\n        return {\n            trails: [],\n            lastPosition: null,\n            update(deltaTime, currentPosition) {\n                // Fade existing trails\n                this.trails = this.trails.filter(trail => {\n                    trail.alpha -= fadeSpeed * deltaTime\n                    return trail.alpha > 0\n                })\n\n                // Add new trail if moved enough\n                if (this.lastPosition) {\n                    const dx = currentPosition.x - this.lastPosition.x\n                    const dy = currentPosition.y - this.lastPosition.y\n                    const distance = Math.sqrt(dx * dx + dy * dy)\n\n                    if (distance > 10) {\n                        this.trails.push({\n                            x: this.lastPosition.x,\n                            y: this.lastPosition.y,\n                            alpha: 0.5,\n                            scale: 0.8\n                        })\n\n                        if (this.trails.length > maxTrails) {\n                            this.trails.shift()\n                        }\n\n                        this.lastPosition = { ...currentPosition }\n                    }\n                } else {\n                    this.lastPosition = { ...currentPosition }\n                }\n\n                return this.trails\n            },\n            clear() {\n                this.trails = []\n            }\n        }\n    }\n}\n\nexport class CharacterAnimator {\n    constructor() {\n        this.controller = new AnimationController()\n        this.procedural = new ProceduralAnimator()\n\n        // Enhanced procedural animation instances\n        this.breathing = this.procedural.createBreathingAnimation({\n            intensity: 0.012,\n            speed: 1.8,\n            asymmetry: 0.15\n        })\n        this.squashStretch = this.procedural.createSquashStretch()\n        this.wobble = this.procedural.createWobble()\n        this.anticipation = this.procedural.createAnticipation()\n        this.trail = this.procedural.createTrailEffect()\n\n        // New advanced systems\n        this.advancedIK = this.procedural.createAdvancedIK({\n            armLength: 22,\n            forearmLength: 18,\n            damping: 0.75,\n            stiffness: 0.4\n        })\n        this.secondaryMotion = this.procedural.createSecondaryMotion({\n            segments: 4,\n            length: 12,\n            damping: 0.82,\n            stiffness: 0.25,\n            gravity: 0.3,\n            windStrength: 0.08\n        })\n        this.momentumSystem = this.procedural.createMomentumSystem({\n            maxMomentum: 8,\n            momentumDecay: 0.88,\n            momentumInfluence: 0.25,\n            directionSmoothing: 0.75\n        })\n        \n        // State\n        this.state = 'idle'\n        this.facing = 'right'\n        this.moving = false\n        this.attacking = false\n        this.blocking = false\n        this.rolling = false\n        this.hurt = false\n        this.jumping = false\n        this.doubleJumping = false\n        this.wallSliding = false\n        this.dashing = false\n        this.charging = false\n        this.dead = false\n        this.landing = false\n        \n        // Animation blending\n        this.blendFactors = {\n            idle: 1,\n            run: 0,\n            attack: 0,\n            block: 0,\n            roll: 0,\n            hurt: 0,\n            jump: 0,\n            doubleJump: 0,\n            land: 0,\n            wallSlide: 0,\n            dash: 0,\n            chargeAttack: 0,\n            death: 0\n        }\n        \n        this.targetBlendFactors = { ...this.blendFactors }\n        this.blendSpeed = 0.2\n    }\n\n    // Helper function to convert numeric WASM state to string for internal use\n    getAnimStateName(state) {\n        switch(state) {\n            case 0: return 'idle'\n            case 1: return 'running'\n            case 2: return 'attacking'\n            case 3: return 'blocking'\n            case 4: return 'rolling'\n            case 5: return 'hurt'\n            case 6: return 'dead'\n            case 7: return 'jumping'\n            case 8: return 'doubleJumping'\n            case 9: return 'landing'\n            case 10: return 'wallSliding'\n            case 11: return 'dashing'\n            case 12: return 'chargingAttack'\n            default: return 'idle'\n        }\n    }\n\n    setAnimState(newState) {\n        if (this.state === newState) {return}\n        \n        this.state = newState\n        \n        // Update target blend factors\n        Object.keys(this.targetBlendFactors).forEach(key => {\n            this.targetBlendFactors[key] = 0\n        })\n        this.targetBlendFactors[this.getAnimStateName(newState)] = 1\n        \n        // Play animation based on state\n        this.controller.play(this.getAnimStateName(newState), { transition: 100 })\n        \n        // Trigger procedural animations\n        switch(newState) {\n            case 2: // Attacking\n                this.anticipation.trigger()\n                break\n            case 5: // Hurt\n                this.squashStretch.trigger()\n                this.wobble.impulse(10)\n                break\n            case 4: // Rolling\n                this.trail.clear()\n                break\n            case 7: // Jumping\n                this.squashStretch.trigger()\n                break\n            case 8: // DoubleJumping\n                this.wobble.impulse(5)\n                this.trail.clear()\n                break\n            case 9: // Landing\n                this.squashStretch.trigger()\n                this.wobble.impulse(15)\n                break\n            case 11: // Dashing\n                this.trail.clear()\n                break\n            case 12: // ChargingAttack\n                this.anticipation.trigger()\n                this.wobble.impulse(3)\n                break\n            case 6: // Death\n                this.squashStretch.trigger()\n                this.wobble.impulse(20)\n                break\n        }\n    }\n\n    update(deltaTime, position, velocity = { x: 0, y: 0 }, isGrounded = true) {\n        // Update animation controller\n        this.controller.update(deltaTime)\n\n        // Update blend factors\n        Object.keys(this.blendFactors).forEach(key => {\n            const diff = this.targetBlendFactors[key] - this.blendFactors[key]\n            this.blendFactors[key] += diff * this.blendSpeed\n        })\n\n        // Update enhanced breathing with state modulation\n        this.breathing.modulateForState(this.state)\n        const breathing = this.breathing.update(deltaTime)\n\n        // Update momentum system\n        const momentumData = this.momentumSystem.update(deltaTime, velocity.x, velocity.y, isGrounded)\n\n        // Update secondary motion (initialize if needed)\n        if (this.secondaryMotion.segments.length === 0) {\n            this.secondaryMotion.initialize(position.x, position.y - 8)\n        }\n        const secondaryMotion = this.secondaryMotion.update(deltaTime, position.x, position.y - 8)\n\n        // Update other procedural animations\n        const squashStretch = this.squashStretch.update(deltaTime)\n        const wobble = this.wobble.update(deltaTime)\n        const anticipation = this.anticipation.update(deltaTime)\n        const trails = this.trail.update(deltaTime, position)\n\n        // Combine all transformations\n        const transform = {\n            scaleX: 1,\n            scaleY: 1,\n            rotation: 0,\n            offsetX: 0,\n            offsetY: 0,\n            trails: trails,\n            secondaryMotion: secondaryMotion,\n            momentum: momentumData,\n            ik: null // Will be set if weapon/arms are used\n        }\n\n        // Apply enhanced breathing\n        if (this.blendFactors.idle > 0 || this.blendFactors.run > 0) {\n            transform.scaleX *= breathing.scaleX\n            transform.scaleY *= breathing.scaleY\n            transform.offsetY += breathing.offsetY\n        }\n\n        // Apply momentum-based adjustments\n        transform.rotation += momentumData.leanAngle\n        transform.scaleY *= (1 + momentumData.stretchFactor)\n        transform.offsetY += momentumData.bounceFactor * Math.sin(Date.now() * 0.01)\n\n        // Apply squash/stretch\n        transform.scaleX *= squashStretch.scaleX\n        transform.scaleY *= squashStretch.scaleY\n\n        // Apply wobble\n        transform.scaleX *= wobble.scaleX\n        transform.scaleY *= wobble.scaleY\n        transform.rotation += wobble.rotation\n\n        // Apply anticipation\n        if (this.state === 'attack' || this.state === 'chargeAttack') {\n            transform.scaleX *= anticipation.scaleX\n            transform.scaleY *= anticipation.scaleY\n            transform.offsetX += anticipation.offsetX\n        }\n\n        // Apply facing direction\n        if (this.facing === 'left') {\n            transform.scaleX *= -1\n        }\n\n        return transform\n    }\n\n    setFacing(direction) {\n        this.facing = direction\n    }\n\n    triggerHurt() {\n        this.setAnimState(5) // Hurt\n        setTimeout(() => {\n            if (this.state === 5) { // Hurt\n                this.setAnimState(0) // Idle\n            }\n        }, 300)\n    }\n\n    triggerAttack() {\n        this.setAnimState(2) // Attack\n        setTimeout(() => {\n            if (this.state === 2) { // Attack\n                this.setAnimState(0) // Idle\n            }\n        }, 400)\n    }\n\n    triggerRoll() {\n        this.setAnimState(4) // Roll\n        setTimeout(() => {\n            if (this.state === 4) { // Roll\n                this.setAnimState(0) // Idle\n            }\n        }, 300)\n    }\n\n    triggerBlock() {\n        this.setAnimState(3) // Block\n    }\n\n    releaseBlock() {\n        if (this.state === 3) { // Block\n            this.setAnimState(0) // Idle\n        }\n    }\n\n    setMoving(isMoving) {\n        this.moving = isMoving\n        if (isMoving && this.state === 0) { // Idle\n            this.setAnimState(1) // Run\n        } else if (!isMoving && this.state === 1) { // Run\n            this.setAnimState(0) // Idle\n        }\n    }\n}\n\n// Animation presets for common game objects\nexport const AnimationPresets = {\n    // Character animations\n    createPlayerAnimations() {\n        return {\n            idle: new Animation('idle', [\n                new AnimationFrame(0, 0, 32, 32, 200),\n                new AnimationFrame(32, 0, 32, 32, 200),\n                new AnimationFrame(64, 0, 32, 32, 200),\n                new AnimationFrame(96, 0, 32, 32, 200)\n            ]),\n            run: new Animation('run', [\n                new AnimationFrame(0, 32, 32, 32, 100),\n                new AnimationFrame(32, 32, 32, 32, 100),\n                new AnimationFrame(64, 32, 32, 32, 100),\n                new AnimationFrame(96, 32, 32, 32, 100),\n                new AnimationFrame(128, 32, 32, 32, 100),\n                new AnimationFrame(160, 32, 32, 32, 100)\n            ]),\n            attack: new Animation('attack', [\n                new AnimationFrame(0, 64, 32, 32, 50),\n                new AnimationFrame(32, 64, 32, 32, 50),\n                new AnimationFrame(64, 64, 32, 32, 100),\n                new AnimationFrame(96, 64, 32, 32, 50)\n            ], { loop: false }),\n            block: new Animation('block', [\n                new AnimationFrame(0, 96, 32, 32, 100)\n            ], { loop: false }),\n            roll: new Animation('roll', [\n                new AnimationFrame(0, 128, 32, 32, 50),\n                new AnimationFrame(32, 128, 32, 32, 50),\n                new AnimationFrame(64, 128, 32, 32, 50),\n                new AnimationFrame(96, 128, 32, 32, 50)\n            ], { loop: false }),\n            hurt: new Animation('hurt', [\n                new AnimationFrame(0, 160, 32, 32, 100),\n                new AnimationFrame(32, 160, 32, 32, 100)\n            ], { loop: false }),\n            death: new Animation('death', [\n                new AnimationFrame(0, 192, 32, 32, 100),\n                new AnimationFrame(32, 192, 32, 32, 100),\n                new AnimationFrame(64, 192, 32, 32, 100),\n                new AnimationFrame(96, 192, 32, 32, 200),\n                new AnimationFrame(128, 192, 32, 32, -1) // Final frame, holds indefinitely\n            ], { loop: false }),\n            jump: new Animation('jump', [\n                new AnimationFrame(0, 224, 32, 32, 100),\n                new AnimationFrame(32, 224, 32, 32, 100),\n                new AnimationFrame(64, 224, 32, 32, -1) // Hold in air\n            ], { loop: false }),\n            doubleJump: new Animation('doubleJump', [\n                new AnimationFrame(0, 256, 32, 32, 50),\n                new AnimationFrame(32, 256, 32, 32, 50),\n                new AnimationFrame(64, 256, 32, 32, 50),\n                new AnimationFrame(96, 256, 32, 32, 50),\n                new AnimationFrame(128, 256, 32, 32, 50),\n                new AnimationFrame(160, 256, 32, 32, 50),\n                new AnimationFrame(192, 256, 32, 32, 50),\n                new AnimationFrame(224, 256, 32, 32, -1) // Complete flip\n            ], { loop: false }),\n            land: new Animation('land', [\n                new AnimationFrame(0, 288, 32, 32, 50),\n                new AnimationFrame(32, 288, 32, 32, 50),\n                new AnimationFrame(64, 288, 32, 32, 100)\n            ], { loop: false }),\n            wallSlide: new Animation('wallSlide', [\n                new AnimationFrame(0, 320, 32, 32, 100),\n                new AnimationFrame(32, 320, 32, 32, 100)\n            ], { loop: true }),\n            dash: new Animation('dash', [\n                new AnimationFrame(0, 352, 32, 32, 50),\n                new AnimationFrame(32, 352, 32, 32, 50),\n                new AnimationFrame(64, 352, 32, 32, 100),\n                new AnimationFrame(96, 352, 32, 32, 50)\n            ], { loop: false }),\n            chargeAttack: new Animation('chargeAttack', [\n                new AnimationFrame(0, 384, 32, 32, 100),\n                new AnimationFrame(32, 384, 32, 32, 100),\n                new AnimationFrame(64, 384, 32, 32, 100),\n                new AnimationFrame(96, 384, 32, 32, 50),\n                new AnimationFrame(128, 384, 32, 32, 50),\n                new AnimationFrame(160, 384, 32, 32, 100)\n            ], { loop: false })\n        }\n    },\n\n    // Enemy animations\n    createWolfAnimations() {\n        return {\n            idle: new Animation('idle', [\n                new AnimationFrame(0, 0, 48, 32, 300),\n                new AnimationFrame(48, 0, 48, 32, 300)\n            ]),\n            prowl: new Animation('prowl', [\n                new AnimationFrame(0, 32, 48, 32, 150),\n                new AnimationFrame(48, 32, 48, 32, 150),\n                new AnimationFrame(96, 32, 48, 32, 150),\n                new AnimationFrame(144, 32, 48, 32, 150)\n            ]),\n            lunge: new Animation('lunge', [\n                new AnimationFrame(0, 64, 48, 32, 50),\n                new AnimationFrame(48, 64, 48, 32, 100),\n                new AnimationFrame(96, 64, 48, 32, 50)\n            ], { loop: false }),\n            hurt: new Animation('hurt', [\n                new AnimationFrame(0, 96, 48, 32, 100)\n            ], { loop: false }),\n            howl: new Animation('howl', [\n                new AnimationFrame(0, 128, 48, 32, 200),\n                new AnimationFrame(48, 128, 48, 32, 300),\n                new AnimationFrame(96, 128, 48, 32, 400),\n                new AnimationFrame(144, 128, 48, 32, 300),\n                new AnimationFrame(192, 128, 48, 32, 200)\n            ], { loop: false }),\n            death: new Animation('death', [\n                new AnimationFrame(0, 160, 48, 32, 100),\n                new AnimationFrame(48, 160, 48, 32, 100),\n                new AnimationFrame(96, 160, 48, 32, 100),\n                new AnimationFrame(144, 160, 48, 32, 200),\n                new AnimationFrame(192, 160, 48, 32, -1) // Final frame\n            ], { loop: false }),\n            packRun: new Animation('packRun', [\n                new AnimationFrame(0, 192, 48, 32, 80),\n                new AnimationFrame(48, 192, 48, 32, 80),\n                new AnimationFrame(96, 192, 48, 32, 80),\n                new AnimationFrame(144, 192, 48, 32, 80),\n                new AnimationFrame(192, 192, 48, 32, 80),\n                new AnimationFrame(240, 192, 48, 32, 80)\n            ], { loop: true })\n        }\n    },\n\n    // Effect animations\n    createEffectAnimations() {\n        return {\n            explosion: new Animation('explosion', [\n                new AnimationFrame(0, 0, 64, 64, 50),\n                new AnimationFrame(64, 0, 64, 64, 50),\n                new AnimationFrame(128, 0, 64, 64, 50),\n                new AnimationFrame(192, 0, 64, 64, 50),\n                new AnimationFrame(256, 0, 64, 64, 50)\n            ], { loop: false }),\n            spark: new Animation('spark', [\n                new AnimationFrame(0, 64, 32, 32, 30),\n                new AnimationFrame(32, 64, 32, 32, 30),\n                new AnimationFrame(64, 64, 32, 32, 30)\n            ], { loop: false }),\n            projectileSpawn: new Animation('projectileSpawn', [\n                new AnimationFrame(0, 128, 16, 16, 30),\n                new AnimationFrame(16, 128, 16, 16, 30),\n                new AnimationFrame(32, 128, 16, 16, 30)\n            ], { loop: false }),\n            projectileImpact: new Animation('projectileImpact', [\n                new AnimationFrame(0, 144, 32, 32, 40),\n                new AnimationFrame(32, 144, 32, 32, 40),\n                new AnimationFrame(64, 144, 32, 32, 40),\n                new AnimationFrame(96, 144, 32, 32, 40)\n            ], { loop: false }),\n            itemPickup: new Animation('itemPickup', [\n                new AnimationFrame(0, 176, 32, 32, 50),\n                new AnimationFrame(32, 176, 32, 32, 50),\n                new AnimationFrame(64, 176, 32, 32, 50),\n                new AnimationFrame(96, 176, 32, 32, 50),\n                new AnimationFrame(128, 176, 32, 32, 50)\n            ], { loop: false }),\n            powerUp: new Animation('powerUp', [\n                new AnimationFrame(0, 208, 64, 64, 60),\n                new AnimationFrame(64, 208, 64, 64, 60),\n                new AnimationFrame(128, 208, 64, 64, 60),\n                new AnimationFrame(192, 208, 64, 64, 60),\n                new AnimationFrame(256, 208, 64, 64, 60),\n                new AnimationFrame(320, 208, 64, 64, 60)\n            ], { loop: false })\n        }\n    }\n}\n\nexport class WolfAnimator {\n    constructor() {\n        this.controller = new AnimationController()\n        this.procedural = new ProceduralAnimator()\n        // ... other procedural animations for wolf\n        this.sniffing = this.procedural.createBreathingAnimation({intensity: 0.008, speed: 0.5});\n        this.howling = this.procedural.createAnticipation({duration: 0.5, intensity: 0.2});\n\n        this.state = 'idle';\n        this.facing = 'right';\n    }\n\n    setWolfState(newState) {\n        if (this.state === newState) return;\n        this.state = newState;\n        this.controller.play(newState);\n        // Trigger procedural effects specific to wolf\n        switch(newState) {\n            case 'lunge':\n                this.sniffing.modulateForState('attacking');\n                break;\n            case 'howl':\n                this.howling.trigger();\n                this.sniffing.modulateForState('idle'); // Breathing for howl anticipation\n                break;\n            case 'prowl':\n                this.sniffing.modulateForState('running');\n                break;\n            case 'hurt':\n                this.sniffing.modulateForState('hurt');\n                break;\n            case 'death':\n                this.sniffing.modulateForState('dead');\n                break;\n            default:\n                this.sniffing.modulateForState('idle');\n        }\n    }\n\n    update(deltaTime, position, velocity = {x: 0, y: 0}, isGrounded = true) {\n        this.controller.update(deltaTime);\n        \n        const breathing = this.sniffing.update(deltaTime);\n        const howling = this.howling.update(deltaTime);\n\n        let transform = {\n            scaleX: 1,\n            scaleY: 1,\n            rotation: 0,\n            offsetX: 0,\n            offsetY: 0\n        };\n\n        // Apply breathing\n        transform.scaleX *= breathing.scaleX;\n        transform.scaleY *= breathing.scaleY;\n        transform.offsetY += breathing.offsetY;\n\n        // Apply howling anticipation\n        transform.scaleX *= howling.scaleX;\n        transform.scaleY *= howling.scaleY;\n        transform.offsetX += howling.offsetX;\n\n        // Facing direction\n        if (this.facing === 'left') {\n            transform.scaleX *= -1;\n        }\n\n        return transform;\n    }\n\n    setFacing(direction) {\n        this.facing = direction;\n    }\n}\n\nexport default {\n    Animation,\n    AnimationController,\n    AnimationFrame,\n    ProceduralAnimator,\n    CharacterAnimator,\n    AnimationPresets,\n    WolfAnimator\n}","// Enhanced Player with Animation System Integration\n// Provides a complete player character with roll, attack, block, and hurt animations\n\nimport { CharacterAnimator, AnimationPresets } from './animation-system.js'\n// SoundSystem and ParticleSystem imports removed - not used in this file\n\nexport class AnimatedPlayer {\n    constructor(x = 400, y = 300, options = {}) {\n        // Position - driven by WASM (normalized 0-1 coordinates)\n        this.x = x\n        this.y = y\n        this.facing = 1 // 1 for right, -1 for left\n        \n        // Player stats - WASM will manage the core stats\n        this.health = options.health || 100\n        this.maxHealth = options.maxHealth || 100\n        this.stamina = options.stamina || 100\n        this.maxStamina = options.maxStamina || 100\n        this.speed = options.speed || 250 // Base speed, actual speed is WASM-driven\n        this.rollSpeed = options.rollSpeed || 500 // Base roll speed, actual speed is WASM-driven\n        \n        // State management - now primarily WASM-driven, this is for JS animation state\n        this.state = 'idle' // idle, running, attacking, blocking, rolling, hurt, dead, jumping, doubleJumping, landing, wallSliding, dashing, chargingAttack\n        this.previousState = 'idle'\n        this.stateTimer = 0 // Managed by WASM now for core actions\n        this.stateTime = 0 // Managed by WASM now\n        this.stateDuration = 0 // Managed by WASM now\n        this._prevNormTime = 0 // Managed by WASM now\n        this._comboQueued = false // Logic related to combos will move to WASM\n        this._currentAttackType = 'light' // Managed by WASM now\n        this.invulnerable = false // Managed by WASM\n        this.invulnerabilityTimer = 0 // Managed by WASM\n        this.isGrounded = true // Driven by WASM\n        this.jumpCount = 0 // Driven by WASM\n        this.nearWall = false // Will be WASM-driven or removed\n        this.dashCooldown = 0 // Will be WASM-driven or removed\n        this.chargeTime = 0 // Will be WASM-driven or removed\n        this.maxChargeTime = 1.5 // Will be WASM-driven or removed\n\n        // Deterministic animation/event parameters - these are mostly cues for animation\n        this.params = {\n            roll: {\n                duration: 0.5,\n                iFrameStart: 0.08,\n                iFrameEnd: 0.36,\n                staminaCost: 25,\n                cooldown: 0.6\n            },\n            attackLight: {\n                duration: 0.42,\n                activeStart: 0.28,\n                activeEnd: 0.38,\n                staminaCost: 12,\n                cooldown: 0.5\n            },\n            attackHeavy: {\n                duration: 0.62,\n                activeStart: 0.32,\n                activeEnd: 0.48,\n                staminaCost: 24,\n                cooldown: 0.8\n            },\n            comboWindow: { start: 0.55, end: 0.75 },\n            parry: { duration: 0.22, window: 0.18, staminaCost: 10 }\n        }\n        \n        // Animation system\n        this.animator = new CharacterAnimator()\n        this.animations = AnimationPresets.createPlayerAnimations()\n        this.setupAnimations()\n        \n        // Action cooldowns - now WASM-driven\n        this.attackCooldown = 0\n        this.rollCooldown = 0\n        this.blockHeld = false // WASM will manage the actual block state\n        \n        // Visual properties\n        this.width = options.width || 32\n        this.height = options.height || 32\n        this.color = options.color || '#00ff88'\n        this.sprite = options.sprite || null\n\n        // Load sprite sheet if not provided\n        if (!this.sprite) {\n            this.loadSpriteSheet()\n        }\n        \n        // Effects\n        this.particleSystem = options.particleSystem || null\n        this.soundSystem = options.soundSystem || null\n        \n        // Combat properties - now WASM-driven\n        this.attackDamage = options.attackDamage || 20\n        this.attackDamageHeavy = options.attackDamageHeavy || 35\n        this.attackRange = options.attackRange || 60\n        this.attackRangeHeavy = options.attackRangeHeavy || 80\n        this.blockDamageReduction = options.blockDamageReduction || 0.5\n\n        // Locomotion cadence and footsteps - these will be driven by WASM velocity feedback\n        this.stridePhase = 0\n        this.gaitRate = 1.4\n        this._lastFootFlag = 0 // 0 left, 1 right alternating\n        this.footstepIntervalBase = 0.28\n\n        // Minimal IK proxy values (pelvis bob and foot locks for readability) - driven by WASM\n        this.ik = {\n            pelvisY: 0,\n            pelvisRate: 10,\n            left: { locked: false, y: 0 },\n            right: { locked: false, y: 0 },\n            stepHeight: 2\n        }\n\n        // Debug flag\n        this.debugMode = false\n    }\n\n    loadSpriteSheet() {\n        // Try to load sprite sheet\n        this.sprite = new Image()\n        this.sprite.src = './src/images/player-sprites.png'\n\n        this.sprite.onload = () => {\n            console.log('Player sprite sheet loaded successfully')\n        }\n\n        this.sprite.onerror = () => {\n            console.warn('Player sprite sheet not found at ./src/images/player-sprites.png, using fallback rendering')\n            console.log('To fix this: Run \"node scripts/generate-sprite-sheet.js\" or use create-sprite-sheet.html')\n            this.sprite = null\n        }\n    }\n    \n    setupAnimations() {\n        // Add all animations to the controller\n        Object.values(this.animations).forEach(animation => {\n            this.animator.controller.addAnimation(animation)\n        })\n        \n        // Start with idle animation\n        this.animator.controller.play('idle')\n    }\n    \n    update(deltaTime, input = {}) {\n        // Update timers - WASM manages core game timers\n        this._prevNormTime = this.getNormalizedTime()\n        this.attackCooldown = Math.max(0, this.attackCooldown - deltaTime)\n        this.rollCooldown = Math.max(0, this.rollCooldown - deltaTime)\n        \n        // Update invulnerability\n        if (this.invulnerable) {\n            this.invulnerabilityTimer -= deltaTime // WASM manages invulnerability timer\n            if (this.invulnerabilityTimer <= 0) {\n                this.invulnerable = false\n            }\n        }\n        \n        // Handle state transitions\n        // this.handleStateTransitions(input) // WASM now handles state transitions\n        \n        // Update based on current state\n        // this.updateState(deltaTime, input) // WASM now handles state updates\n\n        // Deterministic state event windows (hitboxes, i-frames)\n        // this.applyStateEvents() // WASM now handles state events\n        \n        // Update simple IK before composing overlay\n        this.updateIK(deltaTime)\n\n        // 1. Forward inputs to WASM\n        let inputX = 0; let inputY = 0\n        if (input.left) {inputX -= 1}\n        if (input.right) {inputX += 1}\n        if (input.up) {inputY -= 1}\n        if (input.down) {inputY += 1}\n        globalThis.wasmExports?.set_player_input?.(inputX, inputY, input.roll ? 1 : 0, input.jump ? 1 : 0, input.attack ? 1 : 0, input.block ? 1 : 0)\n\n        // 2. Read state for rendering\n        // Assuming 800x600 canvas for now. Convert WASM's 0-1 range to world coordinates.\n        // The game-renderer.js is responsible for this scaling when passing player position to render.\n        // For now, we'll directly set x and y, and let the renderer handle scaling.\n        this.x = globalThis.wasmExports?.get_x?.() // WASM provides normalized coordinates\n        this.y = globalThis.wasmExports?.get_y?.() // WASM provides normalized coordinates\n\n        this.isGrounded = (globalThis.wasmExports?.get_is_grounded?.() === 1);\n        this.jumpCount = globalThis.wasmExports?.get_jump_count?.();\n\n        // Update animation system and cache transform\n        // WASM will determine facing direction implicitly from movement and actions\n        // Infer facing from velocity if available; preserve when nearly still\n        const fx = globalThis.wasmExports?.get_vel_x?.()\n        const fy = globalThis.wasmExports?.get_vel_y?.()\n        if (typeof fx === 'number' && typeof fy === 'number') {\n            const speed = Math.hypot(fx, fy)\n            if (speed > 0.001) {\n                this.facing = fx >= 0 ? 1 : -1\n            }\n        }\n\n        if (this.animator && typeof this.animator.setFacing === 'function') {\n            this.animator.setFacing(this.facing >= 0 ? 'right' : 'left')\n        }\n        // Query WASM overlay values if available\n        const wx = (globalThis.wasmExports?.get_anim_offset_x?.() ?? 0)\n        const wy = (globalThis.wasmExports?.get_anim_offset_y?.() ?? 0)\n        const wsx = (globalThis.wasmExports?.get_anim_scale_x?.() ?? 1)\n        const wsy = (globalThis.wasmExports?.get_anim_scale_y?.() ?? 1)\n        const wrot = (globalThis.wasmExports?.get_anim_rotation?.() ?? 0)\n        const wpelvis = (globalThis.wasmExports?.get_anim_pelvis_y?.() ?? 0)\n        \n        // Get the animation state from WASM and set it in the CharacterAnimator\n        const wasmAnimState = globalThis.wasmExports?.get_player_anim_state?.()\n        if (typeof wasmAnimState === 'number') {\n            this.setState(this.getAnimStateName(wasmAnimState), true) // Pass true to indicate WASM-driven state\n        }\n\n        const baseTransform = this.animator.update(\n            deltaTime,\n            { x: this.x, y: this.y },\n            // Pass WASM-driven velocity to CharacterAnimator\n            { x: globalThis.wasmExports?.get_vel_x?.() ?? 0, y: globalThis.wasmExports?.get_vel_y?.() ?? 0 },\n            this.isGrounded\n        ) || { scaleX: 1, scaleY: 1, rotation: 0, offsetX: 0, offsetY: 0 }\n        // Prefer WASM-driven overlay when available; fallback to local\n        const overlay = (globalThis.wasmExports && typeof wx === 'number') ? {\n            scaleX: wsx,\n            scaleY: wsy,\n            rotation: wrot,\n            offsetX: wx,\n            offsetY: wy\n        } : this.computePoseOverlay(input)\n        this.currentTransform = {\n            scaleX: baseTransform.scaleX * overlay.scaleX,\n            scaleY: baseTransform.scaleY * overlay.scaleY,\n            rotation: baseTransform.rotation + overlay.rotation,\n            offsetX: baseTransform.offsetX + overlay.offsetX,\n            offsetY: baseTransform.offsetY + overlay.offsetY,\n            trails: baseTransform.trails || []\n        }\n        \n        // Physics handled by WASM\n\n        // Stamina regeneration handled by WASM\n    }\n\n    // Returns a normalized [0,1] progress for the current player action/animation\n    // Prefer authoritative WASM timers; fallback to current animation controller progress\n    getNormalizedTime() {\n        try {\n            // If WASM provides an explicit attack state machine, derive normalized phase\n            const get = (fn) => (typeof globalThis.wasmExports?.[fn] === 'function') ? globalThis.wasmExports[fn]() : undefined\n            const attackState = get('get_attack_state') // 0 Idle, 1 Windup, 2 Active, 3 Recovery\n            const stateStartTime = get('get_attack_state_time')\n            const now = get('get_time_seconds')\n            if (typeof attackState === 'number' && typeof stateStartTime === 'number' && typeof now === 'number') {\n                const elapsed = Math.max(0, now - stateStartTime)\n                let duration = 0\n                if (attackState === 1) duration = get('get_attack_windup_sec') ?? this.params.attackLight.duration\n                else if (attackState === 2) duration = get('get_attack_active_sec') ?? this.params.attackLight.duration\n                else if (attackState === 3) duration = get('get_attack_recovery_sec') ?? this.params.attackLight.duration\n                if (duration && duration > 0) {\n                    return Math.max(0, Math.min(1, elapsed / duration))\n                }\n            }\n\n            // Rolling phase if available\n            const isRolling = get('get_is_rolling')\n            if (isRolling === 1) {\n                const rollDur = get('get_roll_duration') || this.params.roll.duration\n                const playerStateTimer = get('get_player_state_timer')\n                if (typeof playerStateTimer === 'number' && rollDur > 0) {\n                    return Math.max(0, Math.min(1, playerStateTimer / rollDur))\n                }\n            }\n\n            // Generic state timer normalization when duration is known locally\n            const playerStateTimer = get('get_player_state_timer')\n            if (typeof playerStateTimer === 'number') {\n                let duration = 0\n                switch (this.state) {\n                    case 'rolling': duration = this.params.roll.duration; break\n                    case 'attacking':\n                        duration = this._currentAttackType === 'heavy' ? this.params.attackHeavy.duration : this.params.attackLight.duration\n                        break\n                    default:\n                        duration = 0\n                }\n                if (duration > 0) {\n                    return Math.max(0, Math.min(1, playerStateTimer / duration))\n                }\n            }\n        } catch {}\n\n        // Fallback: use current animation controller progress\n        try {\n            const anim = this.animator?.controller?.currentAnimation\n            if (anim && Array.isArray(anim.frames) && anim.frames.length > 1) {\n                // Use frame index over total as coarse progress\n                const coarse = anim.currentFrame / (anim.frames.length - 1)\n                return Math.max(0, Math.min(1, coarse))\n            }\n        } catch {}\n\n        return 0\n    }\n\n    startRoll(input) {\n        // Trigger WASM roll action and handle visual/audio effects\n        if (!globalThis.wasmExports?.on_roll_start?.()) {\n            // WASM determined roll could not start (e.g., stamina, cooldown)\n            return;\n        }\n\n        // Determine roll direction for local effects and WASM input\n        let dirX = 0; let dirY = 0\n        \n        if (input.left) {dirX -= 1}\n        if (input.right) {dirX += 1}\n        if (input.up) {dirY -= 1}\n        if (input.down) {dirY += 1}\n        \n        // If no direction input, roll in facing direction\n        if (dirX === 0 && dirY === 0) {\n            dirX = this.facing\n        }\n        \n        // Normalize direction\n        const length = Math.hypot(dirX, dirY)\n        if (length > 0) {\n            dirX /= length\n            dirY /= length\n        }\n        \n        this.rollDirection = { x: dirX, y: dirY }\n        // Visual and audio effects only - core logic handled by WASM\n        \n        // Create roll effect\n        if (this.particleSystem) {\n            this.particleSystem.createDustCloud(this.x, this.y)\n        }\n        \n        // Play roll sound\n        if (this.soundSystem) {\n            this.soundSystem.play('roll')\n        }\n    }\n    \n    startAttack(type = 'light') {\n        // Trigger WASM attack action and handle visual/audio effects\n        const p = type === 'heavy' ? this.params.attackHeavy : this.params.attackLight\n        this._currentAttackType = type\n\n        if (!globalThis.wasmExports?.on_attack?.(type === 'heavy' ? 1 : 0)) {\n            // WASM determined attack could not start (e.g., stamina, cooldown)\n            return;\n        }\n        \n        // Play attack sound\n        if (this.soundSystem) {\n            this.soundSystem.play('attack')\n        }\n    }\n\n    // Public input API helpers\n    queueAttack(type = 'light') {\n        // This logic is now handled in WASM\n        if (this.canAttack()) { // This check will still use local state, but the actual decision is WASM's\n            this.startAttack(type)\n        } else if (this.state === 'attacking') {\n            // This combo queuing needs to be moved to WASM if it affects gameplay\n            this._comboQueued = true\n        }\n    }\n\n    tryRoll(dir = null) {\n        // dir: {x,y} optional; if absent uses current input/facing via startRoll caller\n        // This logic is now handled by WASM, just call startRoll\n        const input = {}\n        if (dir && (dir.x || dir.y)) {\n            input.left = dir.x < -0.5\n            input.right = dir.x > 0.5\n            input.up = dir.y < -0.5\n            input.down = dir.y > 0.5\n        }\n        this.startRoll(input);\n    }\n\n    tryParry() {\n        // Parry logic is now handled in WASM\n        if (this.state === 'dead') { return }\n        // Stamina check is now done in WASM\n        // if (this.stamina < this.params.parry.staminaCost) { return }\n        // Enter a brief blocking-like state with a success window; integrate with combat later\n        // this.setState('blocking') // State is WASM-driven\n        // this.stateTimer = this.params.parry.duration // State timing is WASM-driven\n        // this.stateTime = 0 // State timing is WASM-driven\n        // this.stateDuration = this.params.parry.duration // State timing is WASM-driven\n        // this.stamina -= this.params.parry.staminaCost // Stamina cost is WASM-driven\n        if (!globalThis.wasmExports?.on_parry?.()) { // Assuming a new WASM on_parry function\n            return; // Parry failed in WASM\n        }\n        // Optional sfx\n        if (this.soundSystem) { this.soundSystem.play('parry') }\n    }\n    \n    executeAttack() {\n        // This method will be simplified as WASM handles attack logic.\n        // It will primarily be for visual effects and returning hit data for JS enemies.\n        const isHeavy = this._currentAttackType === 'heavy'\n        const range = isHeavy ? this.attackRangeHeavy : this.attackRange\n        const damage = isHeavy ? this.attackDamageHeavy : this.attackDamage\n        const hitboxX = this.x + (this.facing * range / 2)\n        const hitboxY = this.y\n        \n        // Create attack effect\n        if (this.particleSystem) {\n            if (isHeavy) {\n                this.particleSystem.createChargedSlash?.(hitboxX, hitboxY, this.facing, 1)\n            } else {\n                this.particleSystem.createSlashEffect(hitboxX, hitboxY, this.facing)\n            }\n        }\n        \n        // Return attack hitbox for collision detection (for JS-managed enemies)\n        return {\n            x: hitboxX,\n            y: hitboxY,\n            width: range,\n            height: this.height,\n            damage: damage\n        }\n    }\n    \n    startBlock() {\n        // This function now primarily triggers the WASM block action and handles local effects\n        if (!globalThis.wasmExports?.set_blocking?.(1, this.facing, 0)) { // Assuming a new WASM set_blocking function\n            return; // Block failed in WASM (e.g., stamina)\n        }\n        // this.setState('blocking') // State is WASM-driven\n        this.blockHeld = true\n        \n        // Create block effect\n        if (this.particleSystem) {\n            this.particleSystem.createShieldEffect(this.x, this.y)\n        }\n        \n        // Play block sound\n        if (this.soundSystem) {\n            this.soundSystem.play('block')\n        }\n    }\n    \n    stopBlock() {\n        // This function now primarily triggers the WASM block action\n        globalThis.wasmExports?.set_blocking?.(0, this.facing, 0); // Assuming a new WASM set_blocking function\n        // this.setState('idle') // State is WASM-driven\n        this.blockHeld = false\n    }\n    \n    takeDamage(damage, knockbackX = 0, knockbackY = 0) {\n        // Damage calculation is now primarily WASM-driven\n        // This function will be simplified or removed if WASM handles all damage and effects\n        if (this.invulnerable || this.state === 'dead') {return false} // Invulnerable state is WASM-driven\n\n        let actualDamage = damage\n        \n        // Reduce damage if blocking - WASM handles this logic\n        if (this.state === 'blocking') {\n            // actualDamage *= this.blockDamageReduction\n            \n            // Create block impact effect\n            if (this.particleSystem) {\n                this.particleSystem.createBlockImpact(this.x, this.y)\n            }\n            \n            // Play block impact sound\n            if (this.soundSystem) {\n                this.soundSystem.play('blockImpact')\n            }\n        } else {\n            // Not blocking, take full damage - visual/audio effects only\n            if (this.particleSystem) {\n                this.particleSystem.createBloodEffect(this.x, this.y)\n            }\n\n            if (this.soundSystem) {\n                this.soundSystem.play('hurt')\n            }\n        }\n\n        // Damage application and death check handled by WASM\n        \n        return true\n    }\n    \n    die() {\n        // Visual and audio effects only - death state handled by WASM\n        if (this.particleSystem) {\n            this.particleSystem.createDeathEffect(this.x, this.y)\n        }\n\n        if (this.soundSystem) {\n            this.soundSystem.play('death')\n        }\n    }\n    \n    respawn(x, y) {\n        // Visual and audio effects only - respawn logic handled by WASM\n        if (this.particleSystem) {\n            this.particleSystem.createRespawnEffect(this.x, this.y)\n        }\n\n        if (this.soundSystem) {\n            this.soundSystem.play('respawn')\n        }\n    }\n    \n    setState(newState, wasmDriven = false) { // Added wasmDriven parameter\n        if (this.state === newState) {return} // Prevent redundant state changes regardless of source\n\n        this.previousState = this.state\n        this.state = newState\n        this.stateTime = 0\n        this.stateDuration = 0\n        this._prevNormTime = 0\n\n        // Convert string state to numeric state for CharacterAnimator\n        const numericState = this.stateNameToNumber(newState)\n\n        // Update animation using CharacterAnimator's setAnimState method\n        this.animator.setAnimState(numericState)\n    }\n    \n    canAttack() {\n        // This check is now primarily WASM-driven, this local version is for UI/client-side prediction\n        const minCost = Math.min(this.params.attackLight.staminaCost, this.params.attackHeavy.staminaCost)\n        return this.attackCooldown <= 0 && \n               this.stamina >= minCost && // Stamina also comes from WASM\n               this.state !== 'dead' &&\n               this.state !== 'rolling' &&\n               this.state !== 'hurt'\n    }\n    \n    canRoll() {\n        // This check is now primarily WASM-driven, this local version is for UI/client-side prediction\n        return this.rollCooldown <= 0 && \n               this.stamina >= this.params.roll.staminaCost && // Stamina also comes from WASM\n               this.state !== 'dead' &&\n               this.state !== 'attacking' &&\n               this.state !== 'hurt'\n    }\n    \n    canBlock() {\n        // This check is now primarily WASM-driven, this local version is for UI/client-side prediction\n        return this.stamina > 0 && // Stamina also comes from WASM\n               this.state !== 'dead' &&\n               this.state !== 'rolling' &&\n               this.state !== 'attacking' &&\n               this.state !== 'hurt'\n    }\n    \n    render(ctx, camera = null) {\n        // Compute screen position from WASM-normalized coords using GameRenderer mapping if available\n        let screenX = 0\n        let screenY = 0\n        const camX = camera?.x || 0\n        const camY = camera?.y || 0\n        if (globalThis.gameRenderer && typeof globalThis.gameRenderer.wasmToWorld === 'function') {\n            const pos = globalThis.gameRenderer.wasmToWorld(this.x || 0, this.y || 0)\n            screenX = pos.x - camX\n            screenY = pos.y - camY\n        } else {\n            // Fallback scaling if renderer mapping is unavailable\n            const worldWidth = 800\n            const worldHeight = 600\n            screenX = (this.x || 0) * worldWidth - camX\n            screenY = (this.y || 0) * worldHeight - camY\n        }\n        \n        ctx.save()\n        \n        // Apply invulnerability flashing - this will be driven by WASM\n        if (globalThis.wasmExports?.get_is_invulnerable?.() === 1) { // Assuming a WASM export for invulnerability\n            ctx.globalAlpha = 0.5 + Math.sin(Date.now() * 0.02) * 0.3\n        }\n        \n        // Get current animation frame\n        const frame = this.animator.controller.getCurrentFrame()\n        \n        if (this.sprite && frame) {\n            // Draw sprite animation with procedural transform\n            ctx.save()\n            const t = this.currentTransform || { scaleX: 1, scaleY: 1, rotation: 0, offsetX: 0, offsetY: 0 }\n            const centerX = screenX + t.offsetX\n            const centerY = screenY + t.offsetY\n            ctx.translate(centerX, centerY)\n            ctx.rotate(t.rotation)\n            ctx.scale(this.facing < 0 ? -t.scaleX : t.scaleX, t.scaleY)\n            ctx.drawImage(\n                this.sprite,\n                frame.x, frame.y, frame.width, frame.height,\n                -this.width/2, -this.height/2,\n                this.width, this.height\n            )\n            ctx.restore()\n        } else {\n            // Fallback to colored rectangle\n            ctx.fillStyle = this.color\n            \n            // Apply state-based visual effects\n            if (this.state === 'hurt') {\n                ctx.fillStyle = '#ff4444'\n            } else if (this.state === 'blocking') {\n                ctx.fillStyle = '#4444ff'\n            } else if (this.state === 'rolling') {\n                ctx.fillStyle = '#ffff44'\n            }\n            \n            ctx.fillRect(\n                screenX - this.width/2,\n                screenY - this.height/2,\n                this.width,\n                this.height\n            )\n        }\n        \n        // Draw health bar\n        const barWidth = 40\n        const barHeight = 4\n        const barY = screenY - this.height/2 - 10\n        \n        // Background\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.5)'\n        ctx.fillRect(screenX - barWidth/2, barY, barWidth, barHeight)\n        \n        // Health - get from WASM\n        const currentHealth = globalThis.wasmExports?.get_hp?.() ?? this.health;\n        const maxHealth = this.maxHealth; // Max health can still be local or WASM-driven if dynamic\n        const healthPercent = currentHealth / maxHealth\n        ctx.fillStyle = healthPercent > 0.5 ? '#00ff00' : \n                       healthPercent > 0.25 ? '#ffff00' : '#ff0000'\n        ctx.fillRect(screenX - barWidth/2, barY, barWidth * healthPercent, barHeight)\n        \n        // Stamina bar - get from WASM\n        const staminaY = barY + 5\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.5)'\n        ctx.fillRect(screenX - barWidth/2, staminaY, barWidth, 2)\n        \n        const currentStamina = globalThis.wasmExports?.get_stamina?.() ?? this.stamina;\n        const maxStamina = this.maxStamina; // Max stamina can still be local or WASM-driven if dynamic\n        const staminaPercent = currentStamina / maxStamina\n        ctx.fillStyle = '#00aaff'\n        ctx.fillRect(screenX - barWidth/2, staminaY, barWidth * staminaPercent, 2)\n        \n        // Debug overlays\n        if (this.debugMode) {\n            this.renderDebug(ctx, camera, screenX, screenY)\n        }\n\n        ctx.restore()\n    }\n\n    computePoseOverlay(input) {\n        // Simple procedural layers approximation for readability and responsiveness\n        // This can still be done in JS as it's purely visual\n        const t = this.getNormalizedTime() // This needs to be driven by WASM state timings\n        let scaleX = 1\n        let scaleY = 1\n        let rotation = 0\n        let offsetX = 0\n        let offsetY = this.ik?.pelvisY || 0\n\n        // Lean with velocity when running - velocity should come from WASM\n        // For now, using this.vx from CharacterAnimator.update's velocity parameter. This needs to be cleaned up.\n        // The CharacterAnimator.update is already being passed vx, vy, which are currently local.\n        // These local vx, vy are not updated from WASM, which is an issue.\n        // Need to pass WASM-driven velocity to CharacterAnimator.update as well.\n        // For now, let's assume CharacterAnimator is updated with correct velocity from WASM.\n        // We need an export for WASM player velocity (get_vel_x, get_vel_y)\n        const currentVx = globalThis.wasmExports?.get_vel_x?.() ?? this.vx;\n        const currentVy = globalThis.wasmExports?.get_vel_y?.() ?? this.vy;\n        const currentSpeed = Math.hypot(currentVx, currentVy);\n        const playerSpeed = globalThis.wasmExports?.get_speed?.() ?? this.speed; // Assuming WASM provides player speed\n\n        if (this.state === 'running') {\n            const lean = Math.max(-0.15, Math.min(0.15, (currentVx / (playerSpeed || 1)) * 0.25))\n            rotation += lean\n        }\n\n        // Block hunch\n        if (this.state === 'blocking') {\n            scaleY *= 0.98\n            offsetY += 1\n        }\n\n        // Roll tuck\n        if (this.state === 'rolling') {\n            const w = (t < 0.5 ? t * 2 : (1 - t) * 2)\n            scaleY *= 1 - 0.06 * w\n            scaleX *= 1 + 0.04 * w\n            rotation += (this.facing >= 0 ? 1 : -1) * 0.12 * w\n        }\n\n        // Attack slight forward push and recoil feel\n        // These will be driven by WASM attack state timings and forces\n        if (this.state === 'attacking') {\n            // Placeholder: These values should come from WASM's animation overlay exports\n            // if (t < 0.3) {\n            //     offsetX += this.facing * 2 * (t / 0.3)\n            // } else if (t > 0.6) {\n            //     offsetX -= this.facing * 2 * ((t - 0.6) / 0.4)\n            // }\n        }\n\n        return { scaleX, scaleY, rotation, offsetX, offsetY }\n    }\n\n    updateIK(deltaTime) {\n        // Pelvis bob from WASM overlay if available\n        const wasmPelvis = globalThis.wasmExports?.get_anim_pelvis_y?.()\n        if (typeof wasmPelvis === 'number') {\n            this.ik.pelvisY = wasmPelvis\n        } else {\n            this.ik.pelvisY = 0; // Fallback to 0 if WASM value not available\n        }\n\n        // Foot lock flags (alternating with steps) for future mask usage\n        // These should also be driven by WASM if precise synchronization is needed\n        const currentVx = globalThis.wasmExports?.get_vel_x?.() ?? 0;\n        const currentVy = globalThis.wasmExports?.get_vel_y?.() ?? 0;\n        const isMovingNow = Math.hypot(currentVx, currentVy) > 10\n        if (isMovingNow) {\n            // left foot considered planted near stridePhase ~ 0.0; right near ~0.5\n            // The stridePhase needs to be driven by WASM's locomotion state.\n            // For now, let's keep a local stridePhase but eventually it should be removed.\n            this.stridePhase = (this.stridePhase + deltaTime * this.gaitRate) % 1; // Keep local for now\n            const lf = (this.stridePhase < 0.25 || this.stridePhase > 0.75)\n            this.ik.left.locked = lf\n            this.ik.right.locked = !lf\n        } else {\n            this.ik.left.locked = false\n            this.ik.right.locked = false\n            this.stridePhase = 0; // Reset stride phase when idle\n        }\n    }\n\n    renderDebug(ctx, camera, screenX, screenY) {\n        const x = screenX\n        const y = screenY - this.height / 2 - 18\n        // Stride phase bar - needs to be updated based on WASM if stridePhase moves to WASM\n        ctx.save()\n        ctx.fillStyle = 'rgba(0,0,0,0.35)'\n        ctx.fillRect(x - 24, y, 48, 4)\n        ctx.fillStyle = '#00ffaa'\n        ctx.fillRect(x - 24, y, 48 * (this.stridePhase % 1), 4)\n\n        // Pelvis offset marker\n        ctx.strokeStyle = '#ffaa00'\n        ctx.beginPath()\n        ctx.moveTo(x + 30, y + 2)\n        ctx.lineTo(x + 30, y + 2 - (this.ik?.pelvisY || 0))\n        ctx.stroke()\n\n        // Event windows (attack/roll) - these timings are now WASM-driven\n        // This will require WASM exports for current attack/roll state durations and normalized times\n        const currentAttackState = globalThis.wasmExports?.get_attack_state?.() ?? 0; // Assuming a WASM export\n        const currentAttackStateTime = globalThis.wasmExports?.get_attack_state_time?.() ?? 0; // Assuming a WASM export\n        const totalGameTime = globalThis.wasmExports?.get_time_seconds?.() ?? 0; // Assuming a WASM export\n        \n        let norm = 0;\n        if (currentAttackState === 1) { // Windup\n            norm = (totalGameTime - currentAttackStateTime) / (globalThis.wasmExports?.get_attack_windup_sec?.() ?? this.params.attackLight.duration);\n        } else if (currentAttackState === 2) { // Active\n            norm = (totalGameTime - currentAttackStateTime) / (globalThis.wasmExports?.get_attack_active_sec?.() ?? this.params.attackLight.duration);\n        } else if (currentAttackState === 3) { // Recovery\n            norm = (totalGameTime - currentAttackStateTime) / (globalThis.wasmExports?.get_attack_recovery_sec?.() ?? this.params.attackLight.duration);\n        }\n\n        const barY = y + 8\n        ctx.fillStyle = 'rgba(0,0,0,0.35)'\n        ctx.fillRect(x - 24, barY, 48, 3)\n\n        // These ranges should be driven by WASM exports if precise\n        if (currentAttackState === 2) { // Active attack phase\n            ctx.fillStyle = '#ff4477'\n            // Placeholder: actual activeStart/End should come from WASM\n            ctx.fillRect(x - 24 + 48 * 0.28, barY, 48 * (0.38 - 0.28), 3)\n        }\n        if (globalThis.wasmExports?.get_is_rolling?.() === 1) { // If rolling\n            ctx.fillStyle = '#ffee55'\n            // Placeholder: iFrameStart/End should come from WASM\n            ctx.fillRect(x - 24 + 48 * 0.08, barY, 48 * (0.36 - 0.08), 3)\n        }\n        // Current norm marker\n        ctx.fillStyle = '#ffffff'\n        ctx.fillRect(x - 24 + 48 * norm - 1, barY - 1, 2, 5)\n\n        ctx.restore()\n    }\n    \n    // Helper function to convert numeric WASM state to string for internal use\n    getAnimStateName(state) {\n        switch(state) {\n            case 0: return 'idle'\n            case 1: return 'running'\n            case 2: return 'attacking'\n            case 3: return 'blocking'\n            case 4: return 'rolling'\n            case 5: return 'hurt'\n            case 6: return 'dead'\n            case 7: return 'jumping'\n            case 8: return 'doubleJumping'\n            case 9: return 'landing'\n            case 10: return 'wallSliding'\n            case 11: return 'dashing'\n            case 12: return 'chargingAttack'\n            default: return 'idle'\n        }\n    }\n\n    // Helper function to convert string state to numeric for CharacterAnimator\n    stateNameToNumber(stateName) {\n        switch(stateName) {\n            case 'idle': return 0\n            case 'running': return 1\n            case 'attacking': return 2\n            case 'blocking': return 3\n            case 'rolling': return 4\n            case 'hurt': return 5\n            case 'dead': return 6\n            case 'jumping': return 7\n            case 'doubleJumping': return 8\n            case 'landing': return 9\n            case 'wallSliding': return 10\n            case 'dashing': return 11\n            case 'chargingAttack': return 12\n            default: return 0\n        }\n    }\n    \n    // Get current animation info for debugging\n    getAnimationInfo() {\n        return {\n            state: this.state, // Now directly reflecting the local state derived from WASM\n            animation: this.animator.controller.currentAnimation?.name,\n            frame: this.animator.controller.getCurrentFrame(),\n            stateTimer: globalThis.wasmExports?.get_player_state_timer?.() ?? 0, // Assuming WASM exports player state timer\n            invulnerable: globalThis.wasmExports?.get_is_invulnerable?.() === 1\n        }\n    }\n    \n    // Input helper to convert keyboard to player input\n    static createInputFromKeys(keys) {\n        return {\n            left: keys.a || keys.arrowleft,\n            right: keys.d || keys.arrowright,\n            up: keys.w || keys.arrowup,\n            down: keys.s || keys.arrowdown,\n            attack: keys[' '] || keys.j,\n            heavy: keys.h, // Heavy attack input, WASM will handle\n            parry: keys.p, // Parry input, WASM will handle\n            block: keys.shift || keys.k,\n            roll: keys.control || keys.l,\n            jump: keys.space || keys.z,\n            dash: keys.x || keys.shift, // Dash input, WASM will handle\n            chargeAttack: keys.c || keys.h // Charge attack input, WASM will handle\n        }\n    }\n    \n    // New movement methods for enhanced animations\n    // These methods now just trigger actions, WASM will handle state changes\n    jump() {\n        // WASM will drive the jump state, so we just trigger the action\n        globalThis.wasmExports?.on_jump?.(); // New WASM function call for jumping\n        if (this.particleSystem) {\n            this.particleSystem.createDustCloud(this.x, this.y + this.height/2)\n        }\n        \n        if (this.soundSystem) {\n            this.soundSystem.play('jump')\n        }\n    }\n    \n}\n\nexport default AnimatedPlayer\n\n// Static helper: attach a key to toggle debug overlays for a given player instance\nAnimatedPlayer.attachDebugToggle = function(playerInstance, key = 'F3') {\n    if (!playerInstance || playerInstance.__debugToggleAttached) { return }\n    const targetKey = (key || 'F3').toLowerCase()\n    const handler = (e) => {\n        const k = (e.key || '').toLowerCase()\n        if (k === targetKey.toLowerCase()) {\n            playerInstance.debugMode = !playerInstance.debugMode\n        }\n    }\n    try {\n        addEventListener('keydown', handler)\n        playerInstance.__debugToggleAttached = true\n    } catch {}\n}"],"names":[],"mappings":"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"}