// AUTO-GENERATED BALANCE GENERATOR SCRIPT
// Reads data/balance/*.json and emits src/wasm/generated/balance_data.h

const fs = require('fs');
const path = require('path');

function readJson(file) {
	return JSON.parse(fs.readFileSync(file, 'utf8'));
}

function ensureDir(dir) {
	if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });
}

function define(name, value) {
	if (typeof value === 'number') {
		return `#define ${name} ${value}\n`;
	}
	if (typeof value === 'string') return `#define ${name} ${value}\n`;
	return `// ${name} unsupported type\n`;
}

function main() {
	const root = process.cwd();
	const playerPath = path.join(root, 'data', 'balance', 'player.json');
	const enemiesPath = path.join(root, 'data', 'balance', 'enemies.json');

	const player = readJson(playerPath);
	const enemies = readJson(enemiesPath);

	let out = '';
	out += '// AUTO-GENERATED FILE. DO NOT EDIT.\n';
	out += '// Generated by scripts/generate-balance.js from data/balance/*.json\n\n';
	out += '#pragma once\n\n';

	// Player
	const p = player.player;
	out += define('BAL_BASE_SPEED', p.baseSpeed);
	out += define('BAL_ROLL_SPEED_MULTIPLIER', p.rollSpeedMultiplier);
	out += define('BAL_PLAYER_ACCEL', p.acceleration);
	out += define('BAL_PLAYER_FRICTION', p.friction);
	out += define('BAL_JUMP_POWER', p.jumpPower);
	out += define('BAL_GRAVITY', p.gravity);
	out += define('BAL_MAX_JUMPS', p.maxJumps);
	out += define('BAL_PLAYER_RADIUS', p.radius);

	const st = player.stamina;
	out += define('BAL_STAMINA_REGEN_PER_SEC', st.regenPerSec);
	out += define('BAL_STAMINA_BLOCK_DRAIN_PER_SEC', st.blockDrainPerSec);
	out += define('BAL_STAMINA_ROLL_DRAIN_PER_SEC', st.rollDrainPerSec);
	out += define('BAL_STAMINA_ROLL_START_COST', st.rollStartCost);
	out += define('BAL_STAMINA_BLOCK_START_COST', st.blockStartCost);
	out += define('BAL_STAMINA_ATTACK_COST', st.attackCost);

	const t = player.timing;
	out += define('BAL_INPUT_BUFFER_TIME', t.inputBufferTime);
	out += define('BAL_PARRY_WINDOW', t.parryWindow);
	out += define('BAL_PARRY_STUN_DURATION', t.parryStunDuration);
	out += define('BAL_ROLL_IFRAME_DURATION', t.rollIFrameDuration);
	out += define('BAL_ATTACK_COOLDOWN_SEC', t.attackCooldown);
	out += define('BAL_ROLL_DURATION_SEC', t.rollDuration);
	out += define('BAL_ROLL_COOLDOWN_SEC', t.rollCooldown);

	const c = player.combat;
	out += define('BAL_ATTACK_RANGE', c.attackRange);
	out += define('BAL_BACK_ATTACK_COS_THRESHOLD', c.backAttackCosThreshold);
	out += define('BAL_BLOCK_FACING_COS_THRESHOLD', c.blockFacingCosThreshold);
	out += define('BAL_ATTACK_ARC_COS_THRESHOLD', c.attackArcCosThreshold);
	out += define('BAL_ATTACK_DAMAGE', c.attackDamage);
	out += define('BAL_ATTACK_STUN_SEC', c.attackStunSec);
	out += define('BAL_ATTACK_KNOCKBACK', c.attackKnockback);

	const la = player.lightAttack;
	out += define('BAL_LIGHT_WINDUP_SEC', la.windup);
	out += define('BAL_LIGHT_ACTIVE_SEC', la.active);
	out += define('BAL_LIGHT_RECOVERY_SEC', la.recovery);
	out += define('BAL_LIGHT_DAMAGE', la.damage);

	const ha = player.heavyAttack;
	out += define('BAL_HEAVY_WINDUP_SEC', ha.windup);
	out += define('BAL_HEAVY_ACTIVE_SEC', ha.active);
	out += define('BAL_HEAVY_RECOVERY_SEC', ha.recovery);
	out += define('BAL_HEAVY_DAMAGE', ha.damage);

	const sa = player.specialAttack;
	out += define('BAL_SPECIAL_WINDUP_SEC', sa.windup);
	out += define('BAL_SPECIAL_ACTIVE_SEC', sa.active);
	out += define('BAL_SPECIAL_RECOVERY_SEC', sa.recovery);
	out += define('BAL_SPECIAL_DAMAGE', sa.damage);

	const roll = player.roll;
	out += define('BAL_ROLL_SLIDE_DURATION', roll.slideDuration);
	out += define('BAL_ROLL_SLIDE_FRICTION', roll.slideFriction);

	const world = player.world;
	out += define('BAL_WALL_CENTER_X', world.wallCenterX);
	out += define('BAL_WALL_HALF_WIDTH', world.wallHalfWidth);

	// Enemies
	const e = enemies.enemy;
	out += define('BAL_ENEMY_BASE_SPEED', e.baseSpeed);
	out += define('BAL_ENEMY_CIRCLE_RADIUS', e.circleRadius);
	out += define('BAL_ENEMY_SEEK_RANGE', e.seekRange);
	out += define('BAL_ENEMY_HARASS_RANGE', e.harassRange);
	out += define('BAL_ENEMY_ACCEL', e.accel);
	out += define('BAL_ENEMY_FRICTION', e.friction);
	out += define('BAL_ENEMY_MAX_SPEED', e.maxSpeed);
	out += define('BAL_ENEMY_LUNGE_RANGE', e.lungeRange);
	out += define('BAL_ENEMY_LUNGE_SPEED', e.lungeSpeed);
	out += define('BAL_ENEMY_LUNGE_DURATION', e.lungeDuration);
	out += define('BAL_ENEMY_LUNGE_COOLDOWN', e.lungeCooldown);
	out += define('BAL_ENEMY_FEINT_PROB', e.feintProb);
	out += define('BAL_ENEMY_FEINT_DURATION', e.feintDuration);
	out += define('BAL_ENEMY_MIN_CHASE_BEFORE_LUNGE', e.minChaseBeforeLunge);
	out += define('BAL_LATCH_DURATION', e.latchDuration);
	out += define('BAL_LATCH_DRAG_SPEED', e.latchDragSpeed);
	out += define('BAL_PREY_CONE_COS', e.preyConeCos);
	out += define('BAL_PREY_CONE_WEIGHT', e.preyConeWeight);
	out += define('BAL_FATIGUE_LUNGE_BONUS', e.fatigueLungeBonus);
	out += define('BAL_FATIGUE_PER_SPEED', e.fatiguePerSpeed);
	out += define('BAL_FATIGUE_RECOVERY_PER_SEC', e.fatigueRecoveryPerSec);
	out += define('BAL_COMM_RANGE', e.commRange);

	const rad = enemies.radii;
	out += define('BAL_ENEMY_RADIUS', rad.enemyRadius);

	const pack = enemies.pack;
	out += define('BAL_MAX_WOLF_PACKS', pack.maxPacks);
	out += define('BAL_PACK_RESPAWN_DELAY', pack.respawnDelay);

	const sp = enemies.spawn;
	out += define('BAL_MIN_SPAWN_DISTANCE', sp.minSpawnDistance);
	out += define('BAL_MAX_SPAWN_DISTANCE', sp.maxSpawnDistance);
	out += define('BAL_HOWL_MAX_SPAWN_DISTANCE', sp.howlMaxSpawnDistance);
	out += define('BAL_SPAWN_SPREAD', sp.spread);
	out += define('BAL_SPAWN_MARGIN', sp.spawnMargin);

	const outDir = path.join(root, 'src', 'wasm', 'generated');
	ensureDir(outDir);
	const outFile = path.join(outDir, 'balance_data.h');
	fs.writeFileSync(outFile, out, 'utf8');
	console.log(`Generated ${path.relative(root, outFile)}`);
}

main();
