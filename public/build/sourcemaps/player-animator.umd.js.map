{"version":3,"file":"player-animator.umd.js.map","sources":["../src/animation/animation-system.js","../src/animation/player/procedural/player-procedural-rig.js","../src/animation/player/procedural/modules/core-posture-module.js","../src/animation/player/procedural/modules/locomotion-module.js","../src/animation/player/procedural/modules/combat-module.js","../src/animation/player/procedural/modules/secondary-motion-module.js","../src/animation/player/procedural/modules/environment-module.js","../src/animation/player/procedural/player-procedural-animator.js","../src/animation/player-animator.js"],"sourcesContent":["// Advanced Animation System for Smooth Character and Object Animations\r\n// Provides sprite animations, procedural animations, and smooth transitions\r\n\r\nconst toMilliseconds = (value) => {\r\n    if (!Number.isFinite(value) || value <= 0) {return 0}\r\n    return value > 10 ? value : value * 1000\r\n}\r\n\r\nexport class AnimationFrame {\r\n    constructor(x, y, width, height, duration = 100) {\r\n        this.x = x\r\n        this.y = y\r\n        this.width = width\r\n        this.height = height\r\n        this.duration = duration // milliseconds\r\n    }\r\n}\r\n\r\nexport class Animation {\r\n    constructor(name, frames, options = {}) {\r\n        this.name = name\r\n        this.frames = frames\r\n        this.loop = options.loop !== null && options.loop !== void 0 ? options.loop : true\r\n        this.pingPong = options.pingPong || false\r\n        this.speed = options.speed || 1.0\r\n        this.onComplete = options.onComplete || null\r\n        this.onFrame = options.onFrame || null\r\n        \r\n        this.currentFrame = 0\r\n        this.elapsedTime = 0\r\n        this.direction = 1\r\n        this.isPlaying = false\r\n        this.hasCompleted = false\r\n    }\r\n\r\n    play() {\r\n        this.isPlaying = true\r\n        this.hasCompleted = false\r\n        this.currentFrame = 0\r\n        this.elapsedTime = 0\r\n        this.direction = 1\r\n    }\r\n\r\n    stop() {\r\n        this.isPlaying = false\r\n        this.reset()\r\n    }\r\n\r\n    pause() {\r\n        this.isPlaying = false\r\n    }\r\n\r\n    resume() {\r\n        this.isPlaying = true\r\n    }\r\n\r\n    reset() {\r\n        this.currentFrame = 0\r\n        this.elapsedTime = 0\r\n        this.direction = 1\r\n        this.hasCompleted = false\r\n    }\r\n\r\n    update(deltaTime) {\r\n        if (!this.isPlaying || this.frames.length === 0) {\r\n            return\r\n        }\r\n\r\n        const deltaMs = toMilliseconds(deltaTime) * this.speed\r\n        if (deltaMs <= 0) {\r\n            return\r\n        }\r\n\r\n        this.elapsedTime += deltaMs\r\n\r\n        if (this.frames.length <= 1) {\r\n            const singleFrame = this.frames[0]\r\n            if (!singleFrame) {\r\n                this.elapsedTime = 0\r\n                return\r\n            }\r\n\r\n            if (singleFrame.duration <= 0) {\r\n                if (!this.loop) {\r\n                    this.isPlaying = false\r\n                    this.hasCompleted = true\r\n                    if (this.onComplete) {this.onComplete()}\r\n                }\r\n                this.elapsedTime = 0\r\n                return\r\n            }\r\n\r\n            if (this.elapsedTime >= singleFrame.duration) {\r\n                if (this.loop) {\r\n                    this.elapsedTime = this.elapsedTime % singleFrame.duration\r\n                } else {\r\n                    this.currentFrame = 0\r\n                    this.isPlaying = false\r\n                    this.hasCompleted = true\r\n                    this.elapsedTime = 0\r\n                    if (this.onComplete) {this.onComplete()}\r\n                }\r\n            }\r\n            return\r\n        }\r\n\r\n        const maxSteps = this.frames.length * 3\r\n        let steps = 0\r\n\r\n        while (steps < maxSteps) {\r\n            const currentFrameData = this.frames[this.currentFrame]\r\n\r\n            if (!currentFrameData) {\r\n                this.currentFrame = Math.min(Math.max(this.currentFrame, 0), this.frames.length - 1)\r\n                this.elapsedTime = 0\r\n                break\r\n            }\r\n\r\n            if (currentFrameData.duration <= 0) {\r\n                if (!this.loop && this.currentFrame === this.frames.length - 1) {\r\n                    this.isPlaying = false\r\n                    this.hasCompleted = true\r\n                    if (this.onComplete) {this.onComplete()}\r\n                }\r\n                this.elapsedTime = 0\r\n                break\r\n            }\r\n\r\n            if (this.elapsedTime < currentFrameData.duration) {\r\n                break\r\n            }\r\n\r\n            this.elapsedTime -= currentFrameData.duration\r\n\r\n            const previousFrame = this.currentFrame\r\n            this.currentFrame += this.direction\r\n\r\n            if (this.pingPong) {\r\n                if (this.currentFrame >= this.frames.length || this.currentFrame < 0) {\r\n                    this.direction *= -1\r\n                    this.currentFrame = previousFrame + this.direction\r\n                }\r\n            } else if (this.currentFrame >= this.frames.length) {\r\n                if (this.loop) {\r\n                    this.currentFrame = 0\r\n                } else {\r\n                    this.currentFrame = this.frames.length - 1\r\n                    this.isPlaying = false\r\n                    this.hasCompleted = true\r\n                    this.elapsedTime = 0\r\n                    if (this.onComplete) {this.onComplete()}\r\n                    if (this.onFrame && this.currentFrame !== previousFrame) {\r\n                        const frameData = this.frames[this.currentFrame]\r\n                        if (frameData) {\r\n                            this.onFrame(this.currentFrame, frameData)\r\n                        }\r\n                    }\r\n                    break\r\n                }\r\n            } else if (this.currentFrame < 0) {\r\n                this.currentFrame = this.loop ? this.frames.length - 1 : 0\r\n            }\r\n\r\n            if (this.onFrame && this.currentFrame !== previousFrame) {\r\n                const frameData = this.frames[this.currentFrame]\r\n                if (frameData) {\r\n                    this.onFrame(this.currentFrame, frameData)\r\n                }\r\n            }\r\n\r\n            steps += 1\r\n        }\r\n    }\r\n\r\n    getCurrentFrame() {\r\n        if (this.frames.length === 0) {return null}\r\n        if (this.currentFrame < 0 || this.currentFrame >= this.frames.length) {return null}\r\n        return this.frames[this.currentFrame]\r\n    }\r\n\r\n    getProgress() {\r\n        if (this.frames.length <= 1) {return 0}\r\n        return this.currentFrame / (this.frames.length - 1)\r\n    }\r\n\r\n    // Utility: get frame by index with bounds checking\r\n    getFrameAt(index) {\r\n        if (index < 0 || index >= this.frames.length) {return null}\r\n        return this.frames[index]\r\n    }\r\n}\r\n\r\nexport class AnimationController {\r\n    constructor() {\r\n        this.animations = Object.create(null)\r\n        this._animationMap = new Map()\r\n        this.currentAnimation = null\r\n        this.blendTime = 0\r\n        this.blendFrom = null\r\n        this.blendProgress = 0\r\n        this.isTransitioning = false\r\n        this.transitionDuration = 0\r\n    }\r\n\r\n    addAnimation(nameOrAnimation, maybeAnimation) {\r\n        let name = null\r\n        let animation = null\r\n\r\n        if (typeof nameOrAnimation === 'string' && maybeAnimation) {\r\n            name = nameOrAnimation\r\n            animation = maybeAnimation\r\n        } else {\r\n            animation = nameOrAnimation\r\n            if (animation && typeof animation.name === 'string') {\r\n                name = animation.name\r\n            }\r\n        }\r\n\r\n        if (!name || !animation) {return}\r\n\r\n        this.animations[name] = animation\r\n        this._animationMap.set(name, animation)\r\n    }\r\n\r\n    getAnimation(name) {\r\n        if (!name) {return null}\r\n        return this._animationMap.get(name) || this.animations[name] || null\r\n    }\r\n\r\n    play(animationName, options = {}) {\r\n        const animation = this.getAnimation(animationName)\r\n        if (!animation) {\r\n            return\r\n        }\r\n\r\n        const hasCurrent = !!this.currentAnimation\r\n        const rawTransition = options.transition\r\n        const explicitDuration = typeof options.transitionDuration === 'number' ? options.transitionDuration : 0\r\n        let transitionDuration = 0\r\n\r\n        if (typeof rawTransition === 'number' && rawTransition > 0) {\r\n            transitionDuration = rawTransition\r\n        } else if ((rawTransition === true || explicitDuration > 0) && explicitDuration > 0) {\r\n            transitionDuration = explicitDuration\r\n        } else if (rawTransition === true && explicitDuration === 0) {\r\n            transitionDuration = 150\r\n        } else if (explicitDuration > 0) {\r\n            transitionDuration = explicitDuration\r\n        }\r\n\r\n        const blendDurationMs = toMilliseconds(transitionDuration)\r\n\r\n        if (hasCurrent && blendDurationMs > 0) {\r\n            this.blendFrom = this.currentAnimation\r\n            this.blendTime = blendDurationMs\r\n            this.blendProgress = 0\r\n            this.isTransitioning = true\r\n            this.transitionDuration = blendDurationMs\r\n        } else {\r\n            this.blendFrom = null\r\n            this.blendTime = 0\r\n            this.blendProgress = 0\r\n            this.isTransitioning = false\r\n            this.transitionDuration = 0\r\n        }\r\n\r\n        this.currentAnimation = animation\r\n        animation.play()\r\n    }\r\n\r\n    stop() {\r\n        if (this.currentAnimation) {\r\n            this.currentAnimation.stop()\r\n        }\r\n        this.isTransitioning = false\r\n        this.blendTime = 0\r\n        this.blendFrom = null\r\n        this.blendProgress = 0\r\n        this.transitionDuration = 0\r\n    }\r\n\r\n    update(deltaTime) {\r\n        const deltaMs = toMilliseconds(deltaTime)\r\n\r\n        if (this.blendTime > 0 && deltaMs > 0) {\r\n            this.blendProgress += deltaMs\r\n            if (this.blendProgress >= this.blendTime) {\r\n                this.blendTime = 0\r\n                this.blendFrom = null\r\n                this.blendProgress = 0\r\n                this.isTransitioning = false\r\n                this.transitionDuration = 0\r\n            }\r\n        }\r\n\r\n        if (this.currentAnimation) {\r\n            this.currentAnimation.update(deltaTime)\r\n        }\r\n    }\r\n\r\n    getCurrentFrame() {\r\n        if (!this.currentAnimation) {return null}\r\n        return this.currentAnimation.getCurrentFrame()\r\n    }\r\n\r\n    getBlendFrames() {\r\n        if (this.blendTime === 0 || !this.blendFrom) {\r\n            return { current: this.getCurrentFrame(), blend: null, blendFactor: 0 }\r\n        }\r\n\r\n        const blendFactor = this.blendTime > 0 ? Math.min(1, this.blendProgress / this.blendTime) : 0\r\n        return {\r\n            current: this.currentAnimation ? this.currentAnimation.getCurrentFrame() : null,\r\n            blend: this.blendFrom ? this.blendFrom.getCurrentFrame() : null,\r\n            blendFactor\r\n        }\r\n    }\r\n\r\n    isPlaying(animationName) {\r\n        return this.currentAnimation &&\r\n               this.currentAnimation.name === animationName &&\r\n               this.currentAnimation.isPlaying\r\n    }\r\n\r\n    setSpeed(speed) {\r\n        if (this.currentAnimation) {\r\n            this.currentAnimation.speed = speed\r\n        }\r\n    }\r\n}\r\n\r\nexport class ProceduralAnimator {\r\n    constructor() {\r\n        this.animations = Object.create(null)\r\n    }\r\n\r\n    addAnimation(name, updateFn, options = {}) {\r\n        if (!name || typeof updateFn !== 'function') {return null}\r\n\r\n        const entry = {\r\n            name,\r\n            update: updateFn,\r\n            duration: typeof options.duration === 'number' ? options.duration : null,\r\n            loop: options.loop !== undefined ? options.loop : true,\r\n            isPlaying: options.autoStart === undefined ? true : options.autoStart !== false,\r\n            elapsed: 0,\r\n            meta: options.meta ?? null\r\n        }\r\n\r\n        this.animations[name] = entry\r\n        return entry\r\n    }\r\n\r\n    play(name) {\r\n        const animation = this.animations[name]\r\n        if (!animation) {return}\r\n        animation.isPlaying = true\r\n        animation.elapsed = 0\r\n    }\r\n\r\n    stop(name) {\r\n        const animation = this.animations[name]\r\n        if (!animation) {return}\r\n        animation.isPlaying = false\r\n        animation.elapsed = 0\r\n    }\r\n\r\n    update(deltaTime) {\r\n        const dt = Number.isFinite(deltaTime) ? deltaTime : 0\r\n\r\n        for (const animation of Object.values(this.animations)) {\r\n            if (!animation || animation.isPlaying === false || typeof animation.update !== 'function') {\r\n                continue\r\n            }\r\n\r\n            animation.elapsed += dt\r\n            animation.update(dt, animation)\r\n\r\n            if (animation.duration && animation.duration > 0 && animation.elapsed >= animation.duration) {\r\n                if (animation.loop) {\r\n                    animation.elapsed = animation.elapsed % animation.duration\r\n                } else {\r\n                    animation.isPlaying = false\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Enhanced breathing animation with state-based modulation\r\n    createBreathingAnimation(options = {}) {\r\n        const {\r\n            baseScale = 1.0,\r\n            intensity = 0.015,\r\n            speed = 2.0,\r\n            asymmetry = 0.2\r\n        } = options\r\n\r\n        return {\r\n            time: 0,\r\n            phase: 0,\r\n            breathRate: speed,\r\n            currentIntensity: intensity,\r\n            depthMod: 1.0,\r\n            asymmetryOffset: 0,\r\n            _buf: {\r\n                scaleX: baseScale,\r\n                scaleY: baseScale,\r\n                offsetY: 0,\r\n                chestExpansion: 0,\r\n                phase: 0,\r\n                intensity: 0\r\n            },\r\n\r\n            // State-based modulation\r\n            modulateForState(state) {\r\n                switch(state) {\r\n                    case 'running':\r\n                        this.depthMod = 0.3\r\n                        this.breathRate = speed * 3.0\r\n                        break\r\n                    case 'attacking':\r\n                        this.depthMod = 0.5\r\n                        this.breathRate = speed * 1.8\r\n                        break\r\n                    case 'blocking':\r\n                        this.depthMod = 0.2\r\n                        this.breathRate = speed * 1.3\r\n                        break\r\n                    case 'hurt':\r\n                        this.depthMod = 0.1\r\n                        this.breathRate = speed * 0.5\r\n                        break\r\n                    case 'dead':\r\n                        this.depthMod = 0.0\r\n                        this.breathRate = 0.0\r\n                        break\r\n                    default: // idle, rolling\r\n                        this.depthMod = 1.0\r\n                        this.breathRate = speed\r\n                }\r\n            },\r\n\r\n            update(deltaTime) {\r\n                const res = this._buf\r\n\r\n                if (this.breathRate <= 0) {\r\n                    res.scaleX = baseScale\r\n                    res.scaleY = baseScale\r\n                    res.offsetY = 0\r\n                    res.chestExpansion = 0\r\n                    res.phase = 0\r\n                    res.intensity = 0\r\n                    return res\r\n                }\r\n\r\n                this.time += deltaTime * this.breathRate\r\n                this.phase = Math.sin(this.time)\r\n\r\n                // Calculate breathing with realistic parameters\r\n                const currentIntensity = this.currentIntensity * this.depthMod\r\n                const breathScaleX = baseScale + this.phase * currentIntensity\r\n                const breathScaleY = baseScale + this.phase * currentIntensity * 0.7\r\n\r\n                // Add slight asymmetry for more natural feel\r\n                const asymmetryFactor = Math.sin(this.time * 0.7) * asymmetry\r\n                const finalScaleX = breathScaleX + asymmetryFactor * currentIntensity * 0.3\r\n\r\n                // Chest expansion effect (subtle upward movement)\r\n                const chestExpansion = this.phase * currentIntensity * 2\r\n\r\n                // Smooth transitions\r\n                const smoothFactor = 1 - Math.exp(-deltaTime * 5)\r\n                this.currentIntensity = this.currentIntensity + (currentIntensity - this.currentIntensity) * smoothFactor\r\n\r\n                res.scaleX = finalScaleX\r\n                res.scaleY = breathScaleY\r\n                res.offsetY = -chestExpansion * 0.5\r\n                res.chestExpansion = chestExpansion\r\n                res.phase = this.phase\r\n                res.intensity = currentIntensity\r\n                return res\r\n            }\r\n        }\r\n    }\r\n\r\n    // Bobbing animation for floating objects\r\n    createBobbingAnimation(amplitude = 5, speed = 2) {\r\n        return {\r\n            time: 0,\r\n            _buf: { offsetY: 0, rotation: 0 },\r\n            update(deltaTime) {\r\n                this.time += deltaTime * speed\r\n                const res = this._buf\r\n                res.offsetY = Math.sin(this.time) * amplitude\r\n                res.rotation = Math.sin(this.time * 0.5) * 0.05\r\n                return res\r\n            }\r\n        }\r\n    }\r\n\r\n    // Squash and stretch for impacts and jumps\r\n    createSquashStretch(intensity = 0.3, duration = 0.2) {\r\n        return {\r\n            time: 0,\r\n            active: false,\r\n            _buf: { scaleX: 1, scaleY: 1 },\r\n            trigger() {\r\n                this.time = 0\r\n                this.active = true\r\n            },\r\n            update(deltaTime) {\r\n                const res = this._buf\r\n\r\n                if (!this.active) {\r\n                    res.scaleX = 1\r\n                    res.scaleY = 1\r\n                    return res\r\n                }\r\n\r\n                this.time += deltaTime\r\n                const progress = Math.min(this.time / duration, 1)\r\n\r\n                if (progress >= 1) {\r\n                    this.active = false\r\n                    res.scaleX = 1\r\n                    res.scaleY = 1\r\n                    return res\r\n                }\r\n\r\n                // Elastic easing\r\n                const t = progress\r\n                const p = 0.3\r\n                const s = p / 4\r\n                const postFix = 2**(-10 * t) * Math.sin((t - s) * (2 * Math.PI) / p) + 1\r\n\r\n                const squash = 1 - postFix * intensity\r\n                const stretch = 1 + postFix * intensity * 0.5\r\n\r\n                res.scaleX = progress < 0.5 ? stretch : squash\r\n                res.scaleY = progress < 0.5 ? squash : stretch\r\n                return res\r\n            }\r\n        }\r\n    }\r\n\r\n    // Wobble effect for jelly-like movement\r\n    createWobble(frequency = 10, damping = 0.8, intensity = 0.1) {\r\n        return {\r\n            velocity: 0,\r\n            displacement: 0,\r\n            _buf: { scaleX: 1, scaleY: 1, rotation: 0 },\r\n            update(deltaTime, force = 0) {\r\n                // Spring physics\r\n                const springForce = -frequency * this.displacement\r\n                const dampingForce = -damping * this.velocity\r\n\r\n                this.velocity += (springForce + dampingForce + force) * deltaTime\r\n                this.displacement += this.velocity * deltaTime\r\n\r\n                const res = this._buf\r\n                res.scaleX = 1 + this.displacement * intensity\r\n                res.scaleY = 1 - this.displacement * intensity * 0.5\r\n                res.rotation = this.displacement * 0.1\r\n                return res\r\n            },\r\n            impulse(force) {\r\n                this.velocity += force\r\n            }\r\n        }\r\n    }\r\n\r\n    // Anticipation animation for attacks\r\n    createAnticipation(duration = 0.3, intensity = 0.15) {\r\n        return {\r\n            time: 0,\r\n            active: false,\r\n            phase: 'idle', // idle, anticipation, action, recovery\r\n            _buf: { scaleX: 1, scaleY: 1, offsetX: 0 },\r\n            trigger() {\r\n                this.time = 0\r\n                this.active = true\r\n                this.phase = 'anticipation'\r\n            },\r\n            update(deltaTime) {\r\n                const res = this._buf\r\n                if (!this.active) {\r\n                    res.scaleX = 1\r\n                    res.scaleY = 1\r\n                    res.offsetX = 0\r\n                    return res\r\n                }\r\n\r\n                this.time += deltaTime\r\n\r\n                if (this.phase === 'anticipation') {\r\n                    const progress = Math.min(this.time / (duration * 0.4), 1)\r\n                    const eased = 1 - Math.cos(progress * Math.PI * 0.5)\r\n\r\n                    if (progress >= 1) {\r\n                        this.phase = 'action'\r\n                        this.time = 0\r\n                    }\r\n\r\n                    res.scaleX = 1 - eased * intensity\r\n                    res.scaleY = 1 + eased * intensity * 0.5\r\n                    res.offsetX = -eased * 10\r\n                    return res\r\n                } else if (this.phase === 'action') {\r\n                    const progress = Math.min(this.time / (duration * 0.2), 1)\r\n                    const eased = Math.sin(progress * Math.PI * 0.5)\r\n\r\n                    if (progress >= 1) {\r\n                        this.phase = 'recovery'\r\n                        this.time = 0\r\n                    }\r\n\r\n                    res.scaleX = 1 + eased * intensity * 2\r\n                    res.scaleY = 1 - eased * intensity\r\n                    res.offsetX = eased * 20\r\n                    return res\r\n                } else if (this.phase === 'recovery') {\r\n                    const progress = Math.min(this.time / (duration * 0.4), 1)\r\n                    const eased = 1 - (1 - progress)**3\r\n\r\n                    if (progress >= 1) {\r\n                        this.active = false\r\n                        this.phase = 'idle'\r\n                    }\r\n\r\n                    res.scaleX = 1 + (1 - eased) * intensity * 0.5\r\n                    res.scaleY = 1 - (1 - eased) * intensity * 0.25\r\n                    res.offsetX = (1 - eased) * 10\r\n                    return res\r\n                }\r\n\r\n                res.scaleX = 1\r\n                res.scaleY = 1\r\n                res.offsetX = 0\r\n                return res\r\n            }\r\n        }\r\n    }\r\n\r\n    // Advanced Inverse Kinematics for limbs and weapon positioning\r\n    createAdvancedIK(options = {}) {\r\n        const {\r\n            armLength = 25,\r\n            forearmLength = 20,\r\n            damping = 0.8,\r\n            stiffness = 0.5,\r\n            maxReach = 40\r\n        } = options\r\n\r\n        return {\r\n            shoulder: { x: 0, y: 0 },\r\n            elbow: { x: 0, y: 0 },\r\n            hand: { x: 0, y: 0 },\r\n            target: { x: 0, y: 0 },\r\n            targetVelocity: { x: 0, y: 0 },\r\n            _buf: {\r\n                shoulder: { x: 0, y: 0 },\r\n                elbow: { x: 0, y: 0 },\r\n                hand: { x: 0, y: 0 },\r\n                target: { x: 0, y: 0 },\r\n                reach: 0,\r\n                stiffness: 0\r\n            },\r\n\r\n            // Two-bone IK solver (CCD - Cyclic Coordinate Descent)\r\n            solveIK(targetX, targetY, shoulderX, shoulderY) {\r\n                this.target.x = targetX\r\n                this.target.y = targetY\r\n                this.shoulder.x = shoulderX\r\n                this.shoulder.y = shoulderY\r\n\r\n                // Calculate distance to target\r\n                const dx = targetX - shoulderX\r\n                const dy = targetY - shoulderY\r\n                const distance = Math.sqrt(dx * dx + dy * dy)\r\n\r\n                // Clamp to maximum reach\r\n                const clampedDistance = Math.min(distance, maxReach)\r\n                const scale = clampedDistance / distance\r\n                const clampedTargetX = shoulderX + dx * scale\r\n                const clampedTargetY = shoulderY + dy * scale\r\n\r\n                // Solve for elbow and hand positions\r\n                const totalLength = armLength + forearmLength\r\n                const cosAngle = Math.max(-1, Math.min(1, clampedDistance / totalLength))\r\n\r\n                // Law of cosines for elbow angle\r\n                const elbowAngle = Math.acos(cosAngle)\r\n                const shoulderAngle = Math.atan2(clampedTargetY - shoulderY, clampedTargetX - shoulderX)\r\n\r\n                // Position elbow\r\n                this.elbow.x = shoulderX + Math.cos(shoulderAngle - elbowAngle * 0.5) * armLength\r\n                this.elbow.y = shoulderY + Math.sin(shoulderAngle - elbowAngle * 0.5) * armLength\r\n\r\n                // Position hand\r\n                this.hand.x = this.elbow.x + Math.cos(shoulderAngle + elbowAngle * 0.5) * forearmLength\r\n                this.hand.y = this.elbow.y + Math.sin(shoulderAngle + elbowAngle * 0.5) * forearmLength\r\n\r\n                const res = this._buf\r\n                res.shoulder.x = this.shoulder.x\r\n                res.shoulder.y = this.shoulder.y\r\n                res.elbow.x = this.elbow.x\r\n                res.elbow.y = this.elbow.y\r\n                res.hand.x = this.hand.x\r\n                res.hand.y = this.hand.y\r\n                res.target.x = clampedTargetX\r\n                res.target.y = clampedTargetY\r\n                res.reach = clampedDistance / totalLength\r\n                return res\r\n            },\r\n\r\n            // Smooth IK with velocity prediction\r\n            update(deltaTime, targetX, targetY, shoulderX, shoulderY) {\r\n                // Predict target position based on velocity\r\n                const predictedTargetX = targetX + this.targetVelocity.x * deltaTime * 0.1\r\n                const predictedTargetY = targetY + this.targetVelocity.y * deltaTime * 0.1\r\n\r\n                // Update target velocity for smoothing\r\n                this.targetVelocity.x = (predictedTargetX - this.target.x) / deltaTime * damping\r\n                this.targetVelocity.y = (predictedTargetY - this.target.y) / deltaTime * damping\r\n\r\n                // Solve IK with damping\r\n                const solution = this.solveIK(predictedTargetX, predictedTargetY, shoulderX, shoulderY)\r\n\r\n                // Apply stiffness damping to joints\r\n                const stiffnessFactor = 1 - Math.exp(-stiffness * deltaTime)\r\n\r\n                const res = this._buf\r\n                res.shoulder.x = solution.shoulder.x\r\n                res.shoulder.y = solution.shoulder.y\r\n                res.elbow.x = solution.elbow.x\r\n                res.elbow.y = solution.elbow.y\r\n                res.hand.x = solution.hand.x\r\n                res.hand.y = solution.hand.y\r\n                res.target.x = solution.target.x\r\n                res.target.y = solution.target.y\r\n                res.reach = solution.reach\r\n                res.stiffness = stiffnessFactor\r\n                return res\r\n            }\r\n        }\r\n    }\r\n\r\n    // Secondary motion system for cloth, hair, and equipment\r\n    createSecondaryMotion(options = {}) {\r\n        const {\r\n            segments = 5,\r\n            length = 15,\r\n            damping = 0.85,\r\n            gravity = 0.5,\r\n            windStrength = 0.1\r\n        } = options\r\n\r\n        return {\r\n            segments: [],\r\n            anchorPoint: { x: 0, y: 0 },\r\n            windTime: 0,\r\n            _segBuf: [],\r\n\r\n            initialize(anchorX, anchorY) {\r\n                this.anchorPoint = { x: anchorX, y: anchorY }\r\n                this.segments = []\r\n\r\n                // Create chain segments\r\n                for (let i = 0; i < segments; i++) {\r\n                    this.segments.push({\r\n                        x: anchorX,\r\n                        y: anchorY + i * (length / segments),\r\n                        vx: 0,\r\n                        vy: 0,\r\n                        prevX: anchorX,\r\n                        prevY: anchorY + i * (length / segments)\r\n                    })\r\n                }\r\n            },\r\n\r\n            update(deltaTime, anchorX, anchorY, windDirection = 0) {\r\n                this.anchorPoint.x = anchorX\r\n                this.anchorPoint.y = anchorY\r\n                this.windTime += deltaTime\r\n\r\n                // Update anchor point\r\n                this.segments[0].x = anchorX\r\n                this.segments[0].y = anchorY\r\n\r\n                // Simulate chain physics\r\n                for (let i = 1; i < this.segments.length; i++) {\r\n                    const segment = this.segments[i]\r\n                    const prevSegment = this.segments[i - 1]\r\n\r\n                    // Calculate desired position (maintain distance from previous segment)\r\n                    const dx = segment.x - prevSegment.x\r\n                    const dy = segment.y - prevSegment.y\r\n                    const distance = Math.sqrt(dx * dx + dy * dy)\r\n                    const targetDistance = length / segments\r\n\r\n                    if (distance > 0) {\r\n                        const ratio = targetDistance / distance\r\n                        segment.x = prevSegment.x + dx * ratio\r\n                        segment.y = prevSegment.y + dy * ratio\r\n                    }\r\n\r\n                    // Apply gravity\r\n                    segment.vy += gravity * deltaTime\r\n\r\n                    // Apply wind\r\n                    const windX = Math.sin(this.windTime * 2 + windDirection) * windStrength\r\n                    const windY = Math.cos(this.windTime * 1.5 + windDirection) * windStrength * 0.5\r\n                    segment.vx += windX * deltaTime\r\n                    segment.vy += windY * deltaTime\r\n\r\n                    // Verlet integration for smooth movement\r\n                    const tempX = segment.x\r\n                    const tempY = segment.y\r\n                    segment.x += (segment.x - segment.prevX) * damping + segment.vx * deltaTime\r\n                    segment.y += (segment.y - segment.prevY) * damping + segment.vy * deltaTime\r\n                    segment.prevX = tempX\r\n                    segment.prevY = tempY\r\n\r\n                    // Dampen velocity\r\n                    segment.vx *= damping\r\n                    segment.vy *= damping\r\n                }\r\n\r\n                if (!this._segBuf || this._segBuf.length !== this.segments.length) {\r\n                    this._segBuf = new Array(this.segments.length)\r\n                }\r\n                for (let i = 0; i < this.segments.length; i++) {\r\n                    this._segBuf[i] = this.segments[i]\r\n                }\r\n                return this._segBuf\r\n            },\r\n\r\n            applyForce(forceX, forceY, segmentIndex = -1) {\r\n                if (segmentIndex === -1) {\r\n                    // Apply to all segments\r\n                    this.segments.forEach(segment => {\r\n                        segment.vx += forceX\r\n                        segment.vy += forceY\r\n                    })\r\n                } else if (segmentIndex < this.segments.length) {\r\n                    this.segments[segmentIndex].vx += forceX\r\n                    this.segments[segmentIndex].vy += forceY\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Momentum-based animation adjustments\r\n    createMomentumSystem(options = {}) {\r\n        const {\r\n            maxMomentum = 10,\r\n            momentumDecay = 0.9,\r\n            momentumInfluence = 0.3,\r\n            directionSmoothing = 0.8\r\n        } = options\r\n\r\n        return {\r\n            momentum: { x: 0, y: 0 },\r\n            smoothedDirection: { x: 0, y: 0 },\r\n            lastVelocity: { x: 0, y: 0 },\r\n            _buf: {\r\n                momentum: { x: 0, y: 0 },\r\n                smoothedDirection: { x: 0, y: 0 },\r\n                leanAngle: 0,\r\n                bounceFactor: 0,\r\n                stretchFactor: 0\r\n            },\r\n\r\n            update(deltaTime, velocityX, velocityY, isGrounded = true) {\r\n                // Calculate velocity change\r\n                const deltaVx = velocityX - this.lastVelocity.x\r\n                const deltaVy = velocityY - this.lastVelocity.y\r\n                this.lastVelocity = { x: velocityX, y: velocityY }\r\n\r\n                // Build momentum from acceleration\r\n                const acceleration = Math.sqrt(deltaVx * deltaVx + deltaVy * deltaVy)\r\n                if (acceleration > 0.1) {\r\n                    const momentumStrength = Math.min(acceleration * momentumInfluence, maxMomentum)\r\n                    const momentumDirX = deltaVx / acceleration\r\n                    const momentumDirY = deltaVy / acceleration\r\n\r\n                    this.momentum.x += momentumDirX * momentumStrength\r\n                    this.momentum.y += momentumDirY * momentumStrength\r\n                }\r\n\r\n                // Apply momentum decay\r\n                this.momentum.x *= momentumDecay\r\n                this.momentum.y *= momentumDecay\r\n\r\n                // Clamp momentum\r\n                const momentumMagnitude = Math.sqrt(this.momentum.x * this.momentum.x + this.momentum.y * this.momentum.y)\r\n                if (momentumMagnitude > maxMomentum) {\r\n                    this.momentum.x = (this.momentum.x / momentumMagnitude) * maxMomentum\r\n                    this.momentum.y = (this.momentum.y / momentumMagnitude) * maxMomentum\r\n                }\r\n\r\n                // Smooth direction changes\r\n                const currentDirection = { x: velocityX, y: velocityY }\r\n                const directionMagnitude = Math.sqrt(currentDirection.x * currentDirection.x + currentDirection.y * currentDirection.y)\r\n\r\n                if (directionMagnitude > 0.1) {\r\n                    const normalizedDir = {\r\n                        x: currentDirection.x / directionMagnitude,\r\n                        y: currentDirection.y / directionMagnitude\r\n                    }\r\n\r\n                    this.smoothedDirection.x = this.smoothedDirection.x * (1 - directionSmoothing) + normalizedDir.x * directionSmoothing\r\n                    this.smoothedDirection.y = this.smoothedDirection.y * (1 - directionSmoothing) + normalizedDir.y * directionSmoothing\r\n                }\r\n\r\n                const res = this._buf\r\n                res.momentum.x = this.momentum.x\r\n                res.momentum.y = this.momentum.y\r\n                res.smoothedDirection.x = this.smoothedDirection.x\r\n                res.smoothedDirection.y = this.smoothedDirection.y\r\n                res.leanAngle = isGrounded ? Math.atan2(this.momentum.x, Math.abs(this.momentum.y) + 1) * 0.3 : 0\r\n                res.bounceFactor = momentumMagnitude * 0.1\r\n                res.stretchFactor = Math.max(0, momentumMagnitude * 0.05)\r\n                return res\r\n            },\r\n\r\n            addImpulse(impulseX, impulseY) {\r\n                this.momentum.x += impulseX\r\n                this.momentum.y += impulseY\r\n            }\r\n        }\r\n    }\r\n\r\n    // Trail effect for fast movement\r\n    createTrailEffect(maxTrails = 5, fadeSpeed = 0.3) {\r\n        return {\r\n            trails: [],\r\n            lastPosition: null,\r\n            update(deltaTime, currentPosition) {\r\n                // Fade existing trails\r\n                this.trails = this.trails.filter(trail => {\r\n                    trail.alpha -= fadeSpeed * deltaTime\r\n                    return trail.alpha > 0\r\n                })\r\n\r\n                // Add new trail if moved enough\r\n                if (this.lastPosition) {\r\n                    const dx = currentPosition.x - this.lastPosition.x\r\n                    const dy = currentPosition.y - this.lastPosition.y\r\n                    const distance = Math.sqrt(dx * dx + dy * dy)\r\n\r\n                    if (distance > 10) {\r\n                        this.trails.push({\r\n                            x: this.lastPosition.x,\r\n                            y: this.lastPosition.y,\r\n                            alpha: 0.5,\r\n                            scale: 0.8\r\n                        })\r\n\r\n                        if (this.trails.length > maxTrails) {\r\n                            this.trails.shift()\r\n                        }\r\n\r\n                        this.lastPosition = { ...currentPosition }\r\n                    }\r\n                } else {\r\n                    this.lastPosition = { ...currentPosition }\r\n                }\r\n\r\n                return this.trails\r\n            },\r\n            clear() {\r\n                this.trails = []\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class CharacterAnimator {\r\n    constructor() {\r\n        this.controller = new AnimationController()\r\n        this.procedural = new ProceduralAnimator()\r\n        this.animations = Object.create(null)\r\n        this.currentAnimation = null\r\n        \r\n        // Event system integration\r\n        this.eventSystem = null\r\n        this.eventListeners = new Map()\r\n\r\n        // Enhanced procedural animation instances\r\n        this.breathing = this.procedural.createBreathingAnimation({\r\n            intensity: 0.012,\r\n            speed: 1.8,\r\n            asymmetry: 0.15\r\n        })\r\n        this.squashStretch = this.procedural.createSquashStretch()\r\n        this.wobble = this.procedural.createWobble()\r\n        this.anticipation = this.procedural.createAnticipation()\r\n        this.trail = this.procedural.createTrailEffect()\r\n\r\n        // New advanced systems\r\n        this.advancedIK = this.procedural.createAdvancedIK({\r\n            armLength: 22,\r\n            forearmLength: 18,\r\n            damping: 0.75,\r\n            stiffness: 0.4\r\n        })\r\n        this.secondaryMotion = this.procedural.createSecondaryMotion({\r\n            segments: 4,\r\n            length: 12,\r\n            damping: 0.82,\r\n            stiffness: 0.25,\r\n            gravity: 0.3,\r\n            windStrength: 0.08\r\n        })\r\n        this.momentumSystem = this.procedural.createMomentumSystem({\r\n            maxMomentum: 8,\r\n            momentumDecay: 0.88,\r\n            momentumInfluence: 0.25,\r\n            directionSmoothing: 0.75\r\n        })\r\n        \r\n        // State\r\n        this.state = 0 // numeric state code; default to idle\r\n        this.stateName = 'idle'\r\n        this.facing = 'right'\r\n        this.moving = false\r\n        this.attacking = false\r\n        this.blocking = false\r\n        this.rolling = false\r\n        this.hurt = false\r\n        this.jumping = false\r\n        this.doubleJumping = false\r\n        this.wallSliding = false\r\n        this.dashing = false\r\n        this.charging = false\r\n        this.dead = false\r\n        this.landing = false\r\n        \r\n        // Animation blending\r\n        this.blendFactors = {\r\n            idle: 1,\r\n            running: 0,\r\n            attacking: 0,\r\n            blocking: 0,\r\n            rolling: 0,\r\n            hurt: 0,\r\n            jumping: 0,\r\n            doubleJumping: 0,\r\n            landing: 0,\r\n            wallSliding: 0,\r\n            dashing: 0,\r\n            chargingAttack: 0,\r\n            dead: 0\r\n        }\r\n        \r\n        this.targetBlendFactors = { ...this.blendFactors }\r\n        this.blendSpeed = 0.2\r\n\r\n        // Internal timers for temporary states\r\n        this.hurtTimer = 0\r\n        this.attackTimer = 0\r\n        this.rollTimer = 0\r\n    }\r\n\r\n    resetActionTimers() {\r\n        this.hurtTimer = 0\r\n        this.attackTimer = 0\r\n        this.rollTimer = 0\r\n    }\r\n\r\n    addAnimation(name, animation) {\r\n        if (!animation) {return}\r\n        const key = name || (animation && animation.name)\r\n        if (!key) {return}\r\n        this.animations[key] = animation\r\n        this.controller.addAnimation(key, animation)\r\n    }\r\n\r\n    play(name, options = {}) {\r\n        if (!name || !this.animations[name]) {return}\r\n        this.controller.play(name, options)\r\n        this.currentAnimation = this.controller.currentAnimation\r\n        if (typeof name === 'string') {\r\n            this.stateName = name\r\n        }\r\n    }\r\n\r\n    // Helper function to convert numeric WASM state to string for internal use\r\n    getAnimStateName(state) {\r\n        switch(state) {\r\n            case 0: return 'idle'\r\n            case 1: return 'running'\r\n            case 2: return 'attacking'\r\n            case 3: return 'blocking'\r\n            case 4: return 'rolling'\r\n            case 5: return 'hurt'\r\n            case 6: return 'dead'\r\n            case 7: return 'jumping'\r\n            case 8: return 'doubleJumping'\r\n            case 9: return 'landing'\r\n            case 10: return 'wallSliding'\r\n            case 11: return 'dashing'\r\n            case 12: return 'chargingAttack'\r\n            default: return 'idle'\r\n        }\r\n    }\r\n\r\n    setAnimState(newState) {\r\n        if (this.state === newState) {return}\r\n        this.resetActionTimers()\r\n\r\n        const previousState = this.state\r\n        const previousStateName = this.stateName\r\n        \r\n        this.state = newState\r\n        this.stateName = this.getAnimStateName(newState)\r\n        \r\n        // Emit state change event\r\n        this.emit('stateChange', {\r\n            fromState: previousState,\r\n            toState: newState,\r\n            fromStateName: previousStateName,\r\n            toStateName: this.stateName\r\n        })\r\n        \r\n        // Update target blend factors\r\n        Object.keys(this.targetBlendFactors).forEach(key => {\r\n            this.targetBlendFactors[key] = 0\r\n        })\r\n        this.targetBlendFactors[this.stateName] = 1\r\n        \r\n        // Play animation based on state\r\n        this.play(this.stateName, { transition: 0.1 })\r\n        \r\n        // Trigger procedural animations\r\n        switch(newState) {\r\n            case 2: // Attacking\r\n                this.anticipation.trigger()\r\n                break\r\n            case 5: // Hurt\r\n                this.squashStretch.trigger()\r\n                this.wobble.impulse(10)\r\n                break\r\n            case 4: // Rolling\r\n                this.trail.clear()\r\n                break\r\n            case 7: // Jumping\r\n                this.squashStretch.trigger()\r\n                break\r\n            case 8: // DoubleJumping\r\n                this.wobble.impulse(5)\r\n                this.trail.clear()\r\n                break\r\n            case 9: // Landing\r\n                this.squashStretch.trigger()\r\n                this.wobble.impulse(15)\r\n                break\r\n            case 11: // Dashing\r\n                this.trail.clear()\r\n                break\r\n            case 12: // ChargingAttack\r\n                this.anticipation.trigger()\r\n                this.wobble.impulse(3)\r\n                break\r\n            case 6: // Death\r\n                this.squashStretch.trigger()\r\n                this.wobble.impulse(20)\r\n                break\r\n        }\r\n    }\r\n\r\n    update(deltaTime, position, velocity = { x: 0, y: 0 }, isGrounded = true) {\r\n        // Update state timers\r\n        if (this.hurtTimer > 0) {\r\n            this.hurtTimer -= deltaTime\r\n            if (this.hurtTimer <= 0 && this.state === 5) {\r\n                this.setAnimState(0) // Idle\r\n            }\r\n        }\r\n        if (this.attackTimer > 0) {\r\n            this.attackTimer -= deltaTime\r\n            if (this.attackTimer <= 0 && this.state === 2) {\r\n                this.setAnimState(0) // Idle\r\n            }\r\n        }\r\n        if (this.rollTimer > 0) {\r\n            this.rollTimer -= deltaTime\r\n            if (this.rollTimer <= 0 && this.state === 4) {\r\n                this.setAnimState(0) // Idle\r\n            }\r\n        }\r\n\r\n        // Update animation controller\r\n        this.controller.update(deltaTime)\r\n\r\n        // Update blend factors\r\n        Object.keys(this.blendFactors).forEach(key => {\r\n            const diff = this.targetBlendFactors[key] - this.blendFactors[key]\r\n            this.blendFactors[key] += diff * this.blendSpeed\r\n        })\r\n\r\n        // Update enhanced breathing with state modulation\r\n        this.breathing.modulateForState(this.stateName)\r\n        const breathing = this.breathing.update(deltaTime)\r\n\r\n        // Update momentum system\r\n        const momentumData = this.momentumSystem.update(deltaTime, velocity.x, velocity.y, isGrounded)\r\n\r\n        // Update secondary motion (initialize if needed)\r\n        if (this.secondaryMotion.segments.length === 0) {\r\n            this.secondaryMotion.initialize(position.x, position.y - 8)\r\n        }\r\n        const secondaryMotion = this.secondaryMotion.update(deltaTime, position.x, position.y - 8)\r\n\r\n        // Update other procedural animations\r\n        const squashStretch = this.squashStretch.update(deltaTime)\r\n        const wobble = this.wobble.update(deltaTime)\r\n        const anticipation = this.anticipation.update(deltaTime)\r\n        const trails = this.trail.update(deltaTime, position)\r\n\r\n        // Combine all transformations\r\n        const transform = {\r\n            scaleX: 1,\r\n            scaleY: 1,\r\n            rotation: 0,\r\n            offsetX: 0,\r\n            offsetY: 0,\r\n            trails: trails,\r\n            secondaryMotion: secondaryMotion,\r\n            momentum: momentumData,\r\n            ik: null // Will be set if weapon/arms are used\r\n        }\r\n\r\n        // Apply enhanced breathing\r\n        if (this.blendFactors.idle > 0 || this.blendFactors.running > 0) {\r\n            transform.scaleX *= breathing.scaleX\r\n            transform.scaleY *= breathing.scaleY\r\n            transform.offsetY += breathing.offsetY\r\n        }\r\n\r\n        // Apply momentum-based adjustments\r\n        transform.rotation += momentumData.leanAngle\r\n        transform.scaleY *= (1 + momentumData.stretchFactor)\r\n        transform.offsetY += momentumData.bounceFactor * Math.sin(Date.now() * 0.01)\r\n\r\n        // Apply squash/stretch\r\n        transform.scaleX *= squashStretch.scaleX\r\n        transform.scaleY *= squashStretch.scaleY\r\n\r\n        // Apply wobble\r\n        transform.scaleX *= wobble.scaleX\r\n        transform.scaleY *= wobble.scaleY\r\n        transform.rotation += wobble.rotation\r\n\r\n        // Apply anticipation\r\n        if (this.stateName === 'attacking' || this.stateName === 'chargingAttack') {\r\n            transform.scaleX *= anticipation.scaleX\r\n            transform.scaleY *= anticipation.scaleY\r\n            transform.offsetX += anticipation.offsetX\r\n        }\r\n\r\n        // Apply facing direction\r\n        if (this.facing === 'left') {\r\n            transform.scaleX *= -1\r\n        }\r\n\r\n        return transform\r\n    }\r\n\r\n    setFacing(direction) {\r\n        this.facing = direction\r\n    }\r\n    \r\n    // Event system integration\r\n    setEventSystem(eventSystem) {\r\n        this.eventSystem = eventSystem\r\n    }\r\n    \r\n    // Subscribe to animation events\r\n    on(eventName, callback, context = null) {\r\n        if (!this.eventListeners.has(eventName)) {\r\n            this.eventListeners.set(eventName, new Set())\r\n        }\r\n        \r\n        const listener = { callback, context, once: false }\r\n        this.eventListeners.get(eventName).add(listener)\r\n        \r\n        // Also subscribe to global event system if available\r\n        if (this.eventSystem) {\r\n            return this.eventSystem.on(eventName, callback, context)\r\n        }\r\n        \r\n        return () => this.off(eventName, callback)\r\n    }\r\n    \r\n    // Subscribe to one-time animation events\r\n    once(eventName, callback, context = null) {\r\n        if (!this.eventListeners.has(eventName)) {\r\n            this.eventListeners.set(eventName, new Set())\r\n        }\r\n        \r\n        const listener = { callback, context, once: true }\r\n        this.eventListeners.get(eventName).add(listener)\r\n        \r\n        // Also subscribe to global event system if available\r\n        if (this.eventSystem) {\r\n            return this.eventSystem.once(eventName, callback, context)\r\n        }\r\n        \r\n        return () => this.off(eventName, callback)\r\n    }\r\n    \r\n    // Unsubscribe from animation events\r\n    off(eventName, callback) {\r\n        if (!this.eventListeners.has(eventName)) {\r\n            return false\r\n        }\r\n        \r\n        const listeners = this.eventListeners.get(eventName)\r\n        for (const listener of listeners) {\r\n            if (listener.callback === callback) {\r\n                listeners.delete(listener)\r\n                break\r\n            }\r\n        }\r\n        \r\n        if (listeners.size === 0) {\r\n            this.eventListeners.delete(eventName)\r\n        }\r\n        \r\n        // Also unsubscribe from global event system if available\r\n        if (this.eventSystem) {\r\n            this.eventSystem.off(eventName, callback)\r\n        }\r\n        \r\n        return true\r\n    }\r\n    \r\n    // Emit animation events\r\n    emit(eventName, data = {}) {\r\n        // Emit to local listeners\r\n        if (this.eventListeners.has(eventName)) {\r\n            const listeners = Array.from(this.eventListeners.get(eventName))\r\n            \r\n            for (const listener of listeners) {\r\n                try {\r\n                    if (listener.context) {\r\n                        listener.callback.call(listener.context, data)\r\n                    } else {\r\n                        listener.callback(data)\r\n                    }\r\n                    \r\n                    if (listener.once) {\r\n                        this.eventListeners.get(eventName).delete(listener)\r\n                    }\r\n                } catch (error) {\r\n                    console.error(`Error in animation event listener for ${eventName}:`, error)\r\n                }\r\n            }\r\n        }\r\n        \r\n        // Emit to global event system if available\r\n        if (this.eventSystem) {\r\n            this.eventSystem.emit(eventName, data)\r\n        }\r\n    }\r\n\r\n    triggerHurt() {\r\n        this.setAnimState(5) // Hurt\r\n        this.hurtTimer = 300\r\n        this.emit('hurt', { timer: this.hurtTimer })\r\n    }\r\n\r\n    triggerAttack() {\r\n        this.setAnimState(2) // Attack\r\n        this.attackTimer = 400\r\n        this.emit('attack', { timer: this.attackTimer })\r\n    }\r\n\r\n    triggerRoll() {\r\n        this.setAnimState(4) // Roll\r\n        this.rollTimer = 400\r\n        this.emit('roll', { timer: this.rollTimer })\r\n    }\r\n\r\n    triggerBlock() {\r\n        this.setAnimState(3) // Block\r\n        this.emit('block')\r\n    }\r\n\r\n    releaseBlock() {\r\n        if (this.state === 3) { // Block\r\n            this.setAnimState(0) // Idle\r\n            this.emit('blockRelease')\r\n        }\r\n    }\r\n\r\n    setMoving(isMoving) {\r\n        this.moving = isMoving\r\n        if (isMoving && this.state === 0) { // Idle\r\n            this.setAnimState(1) // Run\r\n        } else if (!isMoving && this.state === 1) { // Run\r\n            this.setAnimState(0) // Idle\r\n        }\r\n    }\r\n}\r\n\r\n// Animation presets for common game objects\r\nexport const AnimationPresets = {\r\n    playerWalk: { frameCount: 6, frameDuration: 100, loop: true },\r\n    playerRun: { frameCount: 6, frameDuration: 80, loop: true },\r\n    playerJump: { frameCount: 3, frameDuration: 100, loop: false },\r\n    wolfWalk: { frameCount: 4, frameDuration: 150, loop: true },\r\n    wolfRun: { frameCount: 6, frameDuration: 100, loop: true },\r\n    wolfAttack: { frameCount: 5, frameDuration: 80, loop: false },\r\n\r\n    // Character animations\r\n    createPlayerAnimations() {\r\n        return {\r\n            idle: new Animation('idle', [\r\n                new AnimationFrame(0, 0, 32, 32, 200),\r\n                new AnimationFrame(32, 0, 32, 32, 200),\r\n                new AnimationFrame(64, 0, 32, 32, 200),\r\n                new AnimationFrame(96, 0, 32, 32, 200)\r\n            ]),\r\n            running: new Animation('running', [\r\n                new AnimationFrame(0, 32, 32, 32, 100),\r\n                new AnimationFrame(32, 32, 32, 32, 100),\r\n                new AnimationFrame(64, 32, 32, 32, 100),\r\n                new AnimationFrame(96, 32, 32, 32, 100),\r\n                new AnimationFrame(128, 32, 32, 32, 100),\r\n                new AnimationFrame(160, 32, 32, 32, 100)\r\n            ]),\r\n            attacking: new Animation('attacking', [\r\n                new AnimationFrame(0, 64, 32, 32, 50),\r\n                new AnimationFrame(32, 64, 32, 32, 50),\r\n                new AnimationFrame(64, 64, 32, 32, 100),\r\n                new AnimationFrame(96, 64, 32, 32, 50)\r\n            ], { loop: false }),\r\n            blocking: new Animation('blocking', [\r\n                new AnimationFrame(0, 96, 32, 32, 100)\r\n            ], { loop: false }),\r\n            rolling: new Animation('rolling', [\r\n                new AnimationFrame(0, 128, 32, 32, 50),\r\n                new AnimationFrame(32, 128, 32, 32, 50),\r\n                new AnimationFrame(64, 128, 32, 32, 50),\r\n                new AnimationFrame(96, 128, 32, 32, 50)\r\n            ], { loop: false }),\r\n            hurt: new Animation('hurt', [\r\n                new AnimationFrame(0, 160, 32, 32, 100),\r\n                new AnimationFrame(32, 160, 32, 32, 100)\r\n            ], { loop: false }),\r\n            dead: new Animation('dead', [\r\n                new AnimationFrame(0, 192, 32, 32, 100),\r\n                new AnimationFrame(32, 192, 32, 32, 100),\r\n                new AnimationFrame(64, 192, 32, 32, 100),\r\n                new AnimationFrame(96, 192, 32, 32, 200),\r\n                new AnimationFrame(128, 192, 32, 32, -1) // Final frame, holds indefinitely\r\n            ], { loop: false }),\r\n            jumping: new Animation('jumping', [\r\n                new AnimationFrame(0, 224, 32, 32, 100),\r\n                new AnimationFrame(32, 224, 32, 32, 100),\r\n                new AnimationFrame(64, 224, 32, 32, -1) // Hold in air\r\n            ], { loop: false }),\r\n            doubleJumping: new Animation('doubleJumping', [\r\n                new AnimationFrame(0, 256, 32, 32, 50),\r\n                new AnimationFrame(32, 256, 32, 32, 50),\r\n                new AnimationFrame(64, 256, 32, 32, 50),\r\n                new AnimationFrame(96, 256, 32, 32, 50),\r\n                new AnimationFrame(128, 256, 32, 32, 50),\r\n                new AnimationFrame(160, 256, 32, 32, 50),\r\n                new AnimationFrame(192, 256, 32, 32, 50),\r\n                new AnimationFrame(224, 256, 32, 32, -1) // Complete flip\r\n            ], { loop: false }),\r\n            landing: new Animation('landing', [\r\n                new AnimationFrame(0, 288, 32, 32, 50),\r\n                new AnimationFrame(32, 288, 32, 32, 50),\r\n                new AnimationFrame(64, 288, 32, 32, 100)\r\n            ], { loop: false }),\r\n            wallSliding: new Animation('wallSliding', [\r\n                new AnimationFrame(0, 320, 32, 32, 100),\r\n                new AnimationFrame(32, 320, 32, 32, 100)\r\n            ], { loop: true }),\r\n            dashing: new Animation('dashing', [\r\n                new AnimationFrame(0, 352, 32, 32, 50),\r\n                new AnimationFrame(32, 352, 32, 32, 50),\r\n                new AnimationFrame(64, 352, 32, 32, 100),\r\n                new AnimationFrame(96, 352, 32, 32, 50)\r\n            ], { loop: false }),\r\n            chargingAttack: new Animation('chargingAttack', [\r\n                new AnimationFrame(0, 384, 32, 32, 100),\r\n                new AnimationFrame(32, 384, 32, 32, 100),\r\n                new AnimationFrame(64, 384, 32, 32, 100),\r\n                new AnimationFrame(96, 384, 32, 32, 50),\r\n                new AnimationFrame(128, 384, 32, 32, 50),\r\n                new AnimationFrame(160, 384, 32, 32, 100)\r\n            ], { loop: false })\r\n        }\r\n    },\r\n\r\n    // Enemy animations\r\n    createWolfAnimations() {\r\n        return {\r\n            idle: new Animation('idle', [\r\n                new AnimationFrame(0, 0, 48, 32, 300),\r\n                new AnimationFrame(48, 0, 48, 32, 300)\r\n            ]),\r\n            prowl: new Animation('prowl', [\r\n                new AnimationFrame(0, 32, 48, 32, 150),\r\n                new AnimationFrame(48, 32, 48, 32, 150),\r\n                new AnimationFrame(96, 32, 48, 32, 150),\r\n                new AnimationFrame(144, 32, 48, 32, 150)\r\n            ]),\r\n            lunge: new Animation('lunge', [\r\n                new AnimationFrame(0, 64, 48, 32, 50),\r\n                new AnimationFrame(48, 64, 48, 32, 100),\r\n                new AnimationFrame(96, 64, 48, 32, 50)\r\n            ], { loop: false }),\r\n            hurt: new Animation('hurt', [\r\n                new AnimationFrame(0, 96, 48, 32, 100)\r\n            ], { loop: false }),\r\n            howl: new Animation('howl', [\r\n                new AnimationFrame(0, 128, 48, 32, 200),\r\n                new AnimationFrame(48, 128, 48, 32, 300),\r\n                new AnimationFrame(96, 128, 48, 32, 400),\r\n                new AnimationFrame(144, 128, 48, 32, 300),\r\n                new AnimationFrame(192, 128, 48, 32, 200)\r\n            ], { loop: false }),\r\n            death: new Animation('death', [\r\n                new AnimationFrame(0, 160, 48, 32, 100),\r\n                new AnimationFrame(48, 160, 48, 32, 100),\r\n                new AnimationFrame(96, 160, 48, 32, 100),\r\n                new AnimationFrame(144, 160, 48, 32, 200),\r\n                new AnimationFrame(192, 160, 48, 32, -1) // Final frame\r\n            ], { loop: false }),\r\n            packRun: new Animation('packRun', [\r\n                new AnimationFrame(0, 192, 48, 32, 80),\r\n                new AnimationFrame(48, 192, 48, 32, 80),\r\n                new AnimationFrame(96, 192, 48, 32, 80),\r\n                new AnimationFrame(144, 192, 48, 32, 80),\r\n                new AnimationFrame(192, 192, 48, 32, 80),\r\n                new AnimationFrame(240, 192, 48, 32, 80)\r\n            ], { loop: true })\r\n        }\r\n    },\r\n\r\n    // Effect animations\r\n    createEffectAnimations() {\r\n        return {\r\n            explosion: new Animation('explosion', [\r\n                new AnimationFrame(0, 0, 64, 64, 50),\r\n                new AnimationFrame(64, 0, 64, 64, 50),\r\n                new AnimationFrame(128, 0, 64, 64, 50),\r\n                new AnimationFrame(192, 0, 64, 64, 50),\r\n                new AnimationFrame(256, 0, 64, 64, 50)\r\n            ], { loop: false }),\r\n            spark: new Animation('spark', [\r\n                new AnimationFrame(0, 64, 32, 32, 30),\r\n                new AnimationFrame(32, 64, 32, 32, 30),\r\n                new AnimationFrame(64, 64, 32, 32, 30)\r\n            ], { loop: false }),\r\n            projectileSpawn: new Animation('projectileSpawn', [\r\n                new AnimationFrame(0, 128, 16, 16, 30),\r\n                new AnimationFrame(16, 128, 16, 16, 30),\r\n                new AnimationFrame(32, 128, 16, 16, 30)\r\n            ], { loop: false }),\r\n            projectileImpact: new Animation('projectileImpact', [\r\n                new AnimationFrame(0, 144, 32, 32, 40),\r\n                new AnimationFrame(32, 144, 32, 32, 40),\r\n                new AnimationFrame(64, 144, 32, 32, 40),\r\n                new AnimationFrame(96, 144, 32, 32, 40)\r\n            ], { loop: false }),\r\n            itemPickup: new Animation('itemPickup', [\r\n                new AnimationFrame(0, 176, 32, 32, 50),\r\n                new AnimationFrame(32, 176, 32, 32, 50),\r\n                new AnimationFrame(64, 176, 32, 32, 50),\r\n                new AnimationFrame(96, 176, 32, 32, 50),\r\n                new AnimationFrame(128, 176, 32, 32, 50)\r\n            ], { loop: false }),\r\n            powerUp: new Animation('powerUp', [\r\n                new AnimationFrame(0, 208, 64, 64, 60),\r\n                new AnimationFrame(64, 208, 64, 64, 60),\r\n                new AnimationFrame(128, 208, 64, 64, 60),\r\n                new AnimationFrame(192, 208, 64, 64, 60),\r\n                new AnimationFrame(256, 208, 64, 64, 60),\r\n                new AnimationFrame(320, 208, 64, 64, 60)\r\n            ], { loop: false })\r\n        }\r\n    }\r\n}\r\n\r\nexport class WolfAnimator {\r\n    constructor() {\r\n        this.controller = new AnimationController()\r\n        this.procedural = new ProceduralAnimator()\r\n        // ... other procedural animations for wolf\r\n        this.sniffing = this.procedural.createBreathingAnimation({intensity: 0.008, speed: 0.5});\r\n        this.howling = this.procedural.createAnticipation({duration: 0.5, intensity: 0.2});\r\n\r\n        this.state = 'idle';\r\n        this.facing = 'right';\r\n    }\r\n\r\n    setWolfState(newState) {\r\n        if (this.state === newState) {\r\n            return;\r\n        }\r\n        this.state = newState;\r\n        this.play(newState);\r\n        // Trigger procedural effects specific to wolf\r\n        switch(newState) {\r\n            case 'lunge':\r\n                this.sniffing.modulateForState('attacking');\r\n                break;\r\n            case 'howl':\r\n                this.howling.trigger();\r\n                this.sniffing.modulateForState('idle'); // Breathing for howl anticipation\r\n                break;\r\n            case 'prowl':\r\n                this.sniffing.modulateForState('running');\r\n                break;\r\n            case 'hurt':\r\n                this.sniffing.modulateForState('hurt');\r\n                break;\r\n            case 'death':\r\n                this.sniffing.modulateForState('dead');\r\n                break;\r\n            default:\r\n                this.sniffing.modulateForState('idle');\r\n        }\r\n    }\r\n\r\n    update(deltaTime) {\r\n        this.controller.update(deltaTime);\r\n        \r\n        const breathing = this.sniffing.update(deltaTime);\r\n        const howling = this.howling.update(deltaTime);\r\n\r\n        const transform = {\r\n            scaleX: 1,\r\n            scaleY: 1,\r\n            rotation: 0,\r\n            offsetX: 0,\r\n            offsetY: 0\r\n        };\r\n\r\n        // Apply breathing\r\n        transform.scaleX *= breathing.scaleX;\r\n        transform.scaleY *= breathing.scaleY;\r\n        transform.offsetY += breathing.offsetY;\r\n\r\n        // Apply howling anticipation\r\n        transform.scaleX *= howling.scaleX;\r\n        transform.scaleY *= howling.scaleY;\r\n        transform.offsetX += howling.offsetX;\r\n\r\n        // Facing direction\r\n        if (this.facing === 'left') {\r\n            transform.scaleX *= -1;\r\n        }\r\n\r\n        return transform;\r\n    }\r\n\r\n    setFacing(direction) {\r\n        this.facing = direction;\r\n    }\r\n}\r\n\r\nexport default {\r\n    Animation,\r\n    AnimationController,\r\n    AnimationFrame,\r\n    ProceduralAnimator,\r\n    CharacterAnimator,\r\n    AnimationPresets,\r\n    WolfAnimator\r\n}","// PlayerProceduralRig represents the joint hierarchy used by the procedural pipeline.\n// It exposes helper methods to clone and mutate the rig in a controlled manner so\n// each module can focus on its specific concern.\n\nexport default class PlayerProceduralRig {\n    constructor(initialPose = PlayerProceduralRig.createDefaultPose()) {\n        this.pose = PlayerProceduralRig.clonePose(initialPose)\n    }\n\n    static createDefaultPose() {\n        return {\n            root: { x: 0, y: 0 },\n            pelvis: { x: 0, y: 0 },\n            torso: { x: 0, y: -14 },\n            head: { x: 0, y: -26 },\n            leftArm: {\n                shoulder: { x: -7, y: -17 },\n                elbow: { x: -11, y: -9 },\n                hand: { x: -14, y: 0 }\n            },\n            rightArm: {\n                shoulder: { x: 7, y: -17 },\n                elbow: { x: 11, y: -9 },\n                hand: { x: 14, y: 0 }\n            },\n            leftLeg: {\n                hip: { x: -4, y: 0 },\n                knee: { x: -5, y: 10 },\n                foot: { x: -6, y: 21 }\n            },\n            rightLeg: {\n                hip: { x: 4, y: 0 },\n                knee: { x: 5, y: 10 },\n                foot: { x: 6, y: 21 }\n            }\n        }\n    }\n\n    static clonePose(pose) {\n        const cloneSegment = (segment) => {\n            const result = {}\n            Object.entries(segment).forEach(([key, value]) => {\n                if (value && typeof value === 'object' && 'x' in value) {\n                    result[key] = { x: value.x, y: value.y }\n                } else if (value && typeof value === 'object') {\n                    result[key] = cloneSegment(value)\n                } else {\n                    result[key] = value\n                }\n            })\n            return result\n        }\n        return cloneSegment(pose)\n    }\n\n    createWorkingPose() {\n        return PlayerProceduralRig.clonePose(this.pose)\n    }\n\n    commitPose(updatedPose) {\n        this.pose = PlayerProceduralRig.clonePose(updatedPose)\n    }\n\n    toSkeleton() {\n        return this.createWorkingPose()\n    }\n}\r\n","const clamp = (value, min, max) => Math.min(max, Math.max(min, value))\r\n\r\nconst damp = (current, target, deltaTime, speed) => {\r\n    const lambda = Math.exp(-speed * deltaTime)\r\n    return (current * lambda) + (target * (1 - lambda))\r\n}\r\n\r\n// CorePostureModule adjusts pelvis, torso, and head based on locomotion metrics\r\n// while staying agnostic of game logic. All required data is supplied through\r\n// the context so the module can be unit tested in isolation.\r\nexport default class CorePostureModule {\r\n    constructor(config = {}) {\r\n        this.config = {\r\n            maxLean: config.maxLean ?? 0.35,\r\n            pelvisBobAmplitude: config.pelvisBobAmplitude ?? 3,\r\n            headStabilization: config.headStabilization ?? 0.55,\r\n            leanResponsiveness: config.leanResponsiveness ?? 10,\r\n            bobResponsiveness: config.bobResponsiveness ?? 14\r\n        }\r\n        this.lean = 0\r\n        this.pelvisOffset = 0\r\n        this.breathTimer = 0\r\n    }\r\n\r\n    apply(deltaTime, pose, context) {\r\n        const velocity = context.velocity || { x: 0, y: 0 }\r\n        const facing = context.facing ?? 1\r\n        const maxSpeed = context.maxSpeed ?? 240\r\n        const normalizedTime = context.normalizedTime ?? 0\r\n        const isGrounded = context.isGrounded ?? true\r\n        const pelvisOverlay = context.pelvisOffset ?? 0\r\n        const breathing = context.breathing ?? 1\r\n        const fatigue = clamp(context.fatigue ?? 0, 0, 1)\r\n\r\n        const horizontalVelocity = clamp(velocity.x / maxSpeed, -1, 1)\r\n        const leanTarget = horizontalVelocity * this.config.maxLean\r\n        this.lean = damp(this.lean, leanTarget, deltaTime, this.config.leanResponsiveness)\r\n\r\n        const gaitPhase = context.stridePhase ?? normalizedTime\r\n        const bobAmplitude = isGrounded ? this.config.pelvisBobAmplitude : this.config.pelvisBobAmplitude * 0.3\r\n        const fatigueDrop = fatigue * bobAmplitude * 0.5\r\n        const bobTarget = Math.sin(gaitPhase * Math.PI * 2) * bobAmplitude - fatigueDrop + pelvisOverlay\r\n        this.pelvisOffset = damp(this.pelvisOffset, bobTarget, deltaTime, this.config.bobResponsiveness)\r\n\r\n        this.breathTimer += deltaTime * clamp(breathing, 0.25, 2)\r\n        const breathOffset = Math.sin(this.breathTimer * Math.PI * 2) * 0.6 * breathing\r\n\r\n        pose.pelvis.x = this.lean * 4 * facing\n        pose.pelvis.y = this.pelvisOffset\r\n        pose.torso.x = this.lean * 12 * facing\r\n        pose.torso.y = -14 + this.pelvisOffset * 0.35\r\n        pose.torso.rotation = this.lean * 0.25\r\n\r\n        pose.head.x = this.lean * 6 * facing\r\n        pose.head.y = -26 + (this.pelvisOffset * (1 - this.config.headStabilization)) + breathOffset\r\n        pose.head.rotation = -this.lean * 0.2\r\n\r\n        return {\r\n            offsetX: this.lean * 3 * facing,\r\n            offsetY: this.pelvisOffset * 0.2,\r\n            rotation: this.lean * 0.12,\r\n            pelvis: this.pelvisOffset,\r\n            lean: this.lean,\r\n            breathOffset\r\n        }\r\n    }\r\n}\r\n","const clamp = (value, min, max) => Math.min(max, Math.max(min, value))\n\nconst damp = (current, target, deltaTime, speed) => {\n    const lambda = Math.exp(-speed * deltaTime)\n    return (current * lambda) + (target * (1 - lambda))\n}\n\n// LocomotionModule drives leg placement and maintains a stride phase based on\n// supplied velocity, keeping the implementation pure and easily testable.\nexport default class LocomotionModule {\n    constructor(config = {}) {\n        this.config = {\n            strideLength: config.strideLength ?? 12,\n            stepHeight: config.stepHeight ?? 5,\n            stanceWidth: config.stanceWidth ?? 8,\n            maxStrideSpeed: config.maxStrideSpeed ?? 220,\n            phaseSpeed: config.phaseSpeed ?? 2.2\n        }\n        this.phase = 0\n        this.lastStepPower = 0\n    }\n\n    apply(deltaTime, pose, context) {\n        const velocity = context.velocity || { x: 0, y: 0 }\n        const speed = context.speed ?? Math.hypot(velocity.x, velocity.y)\n        const facing = context.facing ?? 1\n        const isGrounded = context.isGrounded ?? true\n        const legLiftLeft = context.legLiftLeft ?? 0\n        const legLiftRight = context.legLiftRight ?? 0\n        const groundOffset = context.groundOffset ?? 0\n\n        const speedRatio = clamp(speed / this.config.maxStrideSpeed, 0, 1)\n        const moving = speedRatio > 0.05 && isGrounded\n\n        if (moving) {\n            const strideRate = this.config.phaseSpeed + speedRatio * this.config.phaseSpeed\n            this.phase = (this.phase + deltaTime * strideRate) % 1\n        } else {\n            this.phase = damp(this.phase, 0, deltaTime, 6)\n        }\n\n        const strideAmount = this.config.strideLength * speedRatio\n        const baseLeftX = -this.config.stanceWidth * 0.5\n        const baseRightX = this.config.stanceWidth * 0.5\n        const baseY = 21 + groundOffset\n\n        const leftPhase = this.phase\n        const rightPhase = (this.phase + 0.5) % 1\n\n        const leftLift = Math.max(0, Math.sin(leftPhase * Math.PI)) * this.config.stepHeight + legLiftLeft * this.config.stepHeight\n        const rightLift = Math.max(0, Math.sin(rightPhase * Math.PI)) * this.config.stepHeight + legLiftRight * this.config.stepHeight\n\n        const leftStride = Math.sin(leftPhase * Math.PI * 2) * strideAmount\n        const rightStride = Math.sin(rightPhase * Math.PI * 2) * strideAmount\n\n        pose.leftLeg.foot.x = baseLeftX + facing * leftStride\n        pose.leftLeg.foot.y = baseY - leftLift\n        pose.rightLeg.foot.x = baseRightX + facing * rightStride\n        pose.rightLeg.foot.y = baseY - rightLift\n\n        pose.leftLeg.knee.x = (pose.leftLeg.hip.x + pose.leftLeg.foot.x) * 0.5\n        pose.leftLeg.knee.y = (pose.leftLeg.hip.y + pose.leftLeg.foot.y) * 0.5 - (moving ? this.config.stepHeight * 0.5 : 2)\n        pose.rightLeg.knee.x = (pose.rightLeg.hip.x + pose.rightLeg.foot.x) * 0.5\n        pose.rightLeg.knee.y = (pose.rightLeg.hip.y + pose.rightLeg.foot.y) * 0.5 - (moving ? this.config.stepHeight * 0.5 : 2)\n\n        this.lastStepPower = damp(this.lastStepPower, moving ? speedRatio : 0, deltaTime, 8)\n\n        return {\n            stridePhase: this.phase,\n            moving,\n            stepPower: this.lastStepPower,\n            footContacts: {\n                left: leftLift < 0.2,\n                right: rightLift < 0.2\n            }\n        }\n    }\n}\r\n","const clamp = (value, min, max) => Math.min(max, Math.max(min, value))\n\nconst damp = (current, target, deltaTime, speed) => {\n    const lambda = Math.exp(-speed * deltaTime)\n    return (current * lambda) + (target * (1 - lambda))\n}\n\n// CombatModule controls arm targeting for attacks, blocks, and locomotion sway.\nexport default class CombatModule {\n    constructor(config = {}) {\n        this.config = {\n            attackReach: config.attackReach ?? 18,\n            blockGuardHeight: config.blockGuardHeight ?? -10,\n            blendSpeed: config.blendSpeed ?? 14,\n            swingAmplitude: config.swingAmplitude ?? 7\n        }\n        this.currentTargets = {\n            leftHand: { x: -12, y: -2 },\n            rightHand: { x: 12, y: -2 }\n        }\n    }\n\n    apply(deltaTime, pose, context) {\n        const state = context.playerState || 'idle'\n        const facing = context.facing ?? 1\n        const normalizedTime = clamp(context.normalizedTime ?? 0, 0, 1)\n        const locomotion = context.locomotion || { stridePhase: 0, moving: false }\n        const speed = context.speed ?? 0\n\n        const baseLeft = { x: -12, y: -2 }\n        const baseRight = { x: 12, y: -2 }\n        let targetLeft = { ...baseLeft }\n        let targetRight = { ...baseRight }\n\n        if (state === 'attacking') {\n            const swing = Math.sin(normalizedTime * Math.PI)\n            const reach = this.config.attackReach * (context.attackStrength ?? 1)\n            targetRight.x = facing * (reach * swing)\n            targetRight.y = -6 - swing * 6\n            targetLeft.x = facing * (reach * 0.35)\n            targetLeft.y = -8 - swing * 2\n        } else if (state === 'blocking') {\n            targetRight.x = facing * 10\n            targetRight.y = this.config.blockGuardHeight\n            targetLeft.x = facing * 6\n            targetLeft.y = this.config.blockGuardHeight - 1\n        } else if (state === 'rolling') {\n            targetRight.x = facing * 6\n            targetRight.y = -4\n            targetLeft.x = -facing * 6\n            targetLeft.y = -4\n        } else {\n            const swing = Math.sin(locomotion.stridePhase * Math.PI * 2) * (locomotion.moving ? 1 : 0)\n            targetRight.x = baseRight.x + facing * swing * this.config.swingAmplitude\n            targetRight.y = baseRight.y + Math.cos(locomotion.stridePhase * Math.PI * 2) * 2\n            targetLeft.x = baseLeft.x - facing * swing * this.config.swingAmplitude\n            targetLeft.y = baseLeft.y - Math.cos(locomotion.stridePhase * Math.PI * 2) * 2\n        }\n\n        const blendSpeed = this.config.blendSpeed + speed * 0.02\n        this.currentTargets.leftHand.x = damp(this.currentTargets.leftHand.x, targetLeft.x, deltaTime, blendSpeed)\n        this.currentTargets.leftHand.y = damp(this.currentTargets.leftHand.y, targetLeft.y, deltaTime, blendSpeed)\n        this.currentTargets.rightHand.x = damp(this.currentTargets.rightHand.x, targetRight.x, deltaTime, blendSpeed)\n        this.currentTargets.rightHand.y = damp(this.currentTargets.rightHand.y, targetRight.y, deltaTime, blendSpeed)\n\n        pose.leftArm.hand.x = this.currentTargets.leftHand.x\n        pose.leftArm.hand.y = this.currentTargets.leftHand.y\n        pose.rightArm.hand.x = this.currentTargets.rightHand.x\n        pose.rightArm.hand.y = this.currentTargets.rightHand.y\n\n        pose.leftArm.elbow.x = (pose.leftArm.shoulder.x + pose.leftArm.hand.x) * 0.5\n        pose.leftArm.elbow.y = (pose.leftArm.shoulder.y + pose.leftArm.hand.y) * 0.5 + 4\n        pose.rightArm.elbow.x = (pose.rightArm.shoulder.x + pose.rightArm.hand.x) * 0.5\n        pose.rightArm.elbow.y = (pose.rightArm.shoulder.y + pose.rightArm.hand.y) * 0.5 + 4\n\n        return {\n            handTargets: {\n                left: { ...this.currentTargets.leftHand },\n                right: { ...this.currentTargets.rightHand }\n            },\n            poseState: state\n        }\n    }\n}\r\n","const damp = (current, target, deltaTime, speed) => {\n    const lambda = Math.exp(-speed * deltaTime)\n    return (current * lambda) + (target * (1 - lambda))\n}\n\nconst cloneChain = (chain) => chain.map(point => ({\n    position: { x: point.position.x, y: point.position.y }\n}))\n\n// SecondaryMotionModule creates lightweight trailing data for cloth, hair, and\n// equipment. The module only relies on the pose and context, keeping the physics\n// approximation deterministic and testable.\nexport default class SecondaryMotionModule {\n    constructor(config = {}) {\n        const clothPoints = Math.max(2, config.clothPoints ?? 5)\n        const hairSegments = Math.max(2, config.hairSegments ?? 4)\n\n        this.cloth = Array.from({ length: clothPoints }, (_, index) => ({\n            position: { x: 0, y: index * 4 }\n        }))\n        this.hair = Array.from({ length: hairSegments }, (_, index) => ({\n            position: { x: 0, y: -index * 3 }\n        }))\n        this.equipment = [{ type: 'sword', position: { x: 0, y: 0 } }]\n        this.time = 0\n    }\n\n    apply(deltaTime, pose, context) {\n        this.time += deltaTime\n\n        const wind = context.wind ?? 0\n        const momentum = context.momentum || context.velocity || { x: 0, y: 0 }\n        const facing = context.facing ?? 1\n        const clothSway = context.clothSway ?? 0\n        const hairBounce = context.hairBounce ?? 0\n        const equipmentJiggle = context.equipmentJiggle ?? 0\n\n        this.updateChain(this.cloth, {\n            x: pose.pelvis.x ?? 0,\n            y: pose.pelvis.y + 4\n        }, deltaTime, {\n            wind,\n            momentum,\n            gravity: 12,\n            sway: clothSway,\n            bounce: clothSway * 0.5\n        })\n\n        this.updateChain(this.hair, {\n            x: pose.head.x,\n            y: pose.head.y - 6\n        }, deltaTime, {\n            wind: wind * 0.8,\n            momentum,\n            gravity: 4,\n            sway: hairBounce,\n            bounce: hairBounce\n        })\n\n        const anchor = {\n            x: pose.rightArm.hand.x,\n            y: pose.rightArm.hand.y\n        }\n        const weapon = this.equipment[0]\n        const jiggleX = Math.sin(this.time * 6) * equipmentJiggle * 2\n        const jiggleY = Math.cos(this.time * 4) * equipmentJiggle * 2\n        weapon.position.x = damp(weapon.position.x, anchor.x - facing * 6 + momentum.x * 0.06 + jiggleX, deltaTime, 10)\n        weapon.position.y = damp(weapon.position.y, anchor.y + 6 + momentum.y * 0.06 + jiggleY, deltaTime, 10)\n\n        return {\n            cloth: cloneChain(this.cloth),\n            hair: cloneChain(this.hair),\n            equipment: this.equipment.map(item => ({\n                type: item.type,\n                position: { x: item.position.x, y: item.position.y }\n            }))\n        }\n    }\n\n    updateChain(chain, anchor, deltaTime, forces) {\n        let previous = anchor\n        chain.forEach((point, index) => {\n            const sway = (forces.sway ?? 0) * Math.sin((this.time * 3) + index * 0.6)\n            const bounce = (forces.bounce ?? 0) * Math.cos((this.time * 4) + index * 0.5)\n            const targetX = previous.x + forces.wind * (index + 1) * 0.3 + forces.momentum.x * 0.02 + sway\n            const targetY = previous.y + index * 4 + forces.momentum.y * 0.015 + forces.gravity * 0.05 + bounce\n            point.position.x = damp(point.position.x, targetX, deltaTime, 12)\n            point.position.y = damp(point.position.y, targetY, deltaTime, 12)\n            previous = point.position\n        })\n    }\n}\r\n","const damp = (current, target, deltaTime, speed) => {\n    const lambda = Math.exp(-speed * deltaTime)\n    return (current * lambda) + (target * (1 - lambda))\n}\n\n// EnvironmentModule applies wind and temperature responses without touching game logic.\nexport default class EnvironmentModule {\n    constructor(config = {}) {\n        this.config = {\n            windInfluence: config.windInfluence ?? 0.25,\n            shiverMagnitude: config.shiverMagnitude ?? 0.6,\n            windResponsiveness: config.windResponsiveness ?? 4,\n            shiverResponsiveness: config.shiverResponsiveness ?? 6\n        }\n        this.wind = 0\n        this.shiver = 0\n        this.shiverPhase = 0\n    }\n\n    apply(deltaTime, pose, context) {\n        const targetWind = context.wind ?? 0\n        const targetShiver = context.temperatureShiver ?? 0\n\n        this.wind = damp(this.wind, targetWind, deltaTime, this.config.windResponsiveness)\n        this.shiver = damp(this.shiver, targetShiver, deltaTime, this.config.shiverResponsiveness)\n        this.shiverPhase = (this.shiverPhase + deltaTime * 18) % (Math.PI * 2)\n\n        const shiverOffset = Math.sin(this.shiverPhase) * this.shiver * this.config.shiverMagnitude\n\n        pose.torso.x += this.wind * this.config.windInfluence\n        pose.head.x += this.wind * this.config.windInfluence * 1.5\n        pose.leftArm.hand.x += this.wind * this.config.windInfluence * 1.2\n        pose.rightArm.hand.x += this.wind * this.config.windInfluence * 1.2\n\n        pose.torso.y += shiverOffset * 0.6\n        pose.head.y += shiverOffset * 0.4\n\n        return {\n            wind: this.wind,\n            shiver: shiverOffset,\n            temperature: targetShiver\n        }\n    }\n}\r\n","import PlayerProceduralRig from './player-procedural-rig.js'\nimport CorePostureModule from './modules/core-posture-module.js'\nimport LocomotionModule from './modules/locomotion-module.js'\nimport CombatModule from './modules/combat-module.js'\nimport SecondaryMotionModule from './modules/secondary-motion-module.js'\nimport EnvironmentModule from './modules/environment-module.js'\n\nconst identityTransform = () => ({\n    scaleX: 1,\n    scaleY: 1,\n    rotation: 0,\n    offsetX: 0,\n    offsetY: 0,\n    trails: []\n})\n\n// PlayerProceduralAnimator combines specialized modules into a deterministic\n// animation overlay that sits on top of the sprite system. Each module receives\n// only the data it needs so behaviour stays predictable and testable.\nexport default class PlayerProceduralAnimator {\n    constructor(options = {}) {\n        this.rig = new PlayerProceduralRig()\n        this.modules = {\n            core: new CorePostureModule(options.core),\n            locomotion: new LocomotionModule(options.locomotion),\n            combat: new CombatModule(options.combat),\n            secondary: new SecondaryMotionModule(options.secondary),\n            environment: new EnvironmentModule(options.environment)\n        }\n        this.cachedTransform = {\n            ...identityTransform(),\n            skeleton: this.rig.toSkeleton(),\n            secondaryMotion: null,\n            environmental: null,\n            debug: null\n        }\n    }\n\n    buildContext(deltaTime, inputContext = {}) {\n        const overlay = inputContext.overlay || {}\n        const velocity = inputContext.velocity || { x: 0, y: 0 }\n        const momentum = inputContext.momentum || velocity\n        const speed = Math.hypot(velocity.x, velocity.y)\n\n        return {\n            deltaTime,\n            playerState: inputContext.playerState || 'idle',\n            facing: inputContext.facing ?? 1,\n            velocity,\n            momentum,\n            speed,\n            maxSpeed: inputContext.maxSpeed ?? 260,\n            normalizedTime: inputContext.normalizedTime ?? 0,\n            stridePhase: inputContext.stridePhase,\n            isGrounded: inputContext.isGrounded ?? true,\n            pelvisOffset: inputContext.pelvisOffset ?? 0,\n            breathing: inputContext.breathing ?? 1,\n            fatigue: inputContext.fatigue ?? 0,\n            legLiftLeft: inputContext.legLiftLeft ?? 0,\n            legLiftRight: inputContext.legLiftRight ?? 0,\n            groundOffset: inputContext.groundOffset ?? 0,\n            wind: inputContext.wind ?? 0,\n            temperatureShiver: inputContext.temperatureShiver ?? 0,\n            clothSway: inputContext.clothSway ?? 0,\n            hairBounce: inputContext.hairBounce ?? 0,\n            equipmentJiggle: inputContext.equipmentJiggle ?? 0,\n            staminaRatio: inputContext.staminaRatio ?? 1,\n            healthRatio: inputContext.healthRatio ?? 1,\n            inputState: inputContext.inputState || {},\n            attackStrength: inputContext.attackStrength ?? 1,\n            attackType: inputContext.attackType || 'light',\n            overlay: {\n                scaleX: overlay.scaleX ?? 1,\n                scaleY: overlay.scaleY ?? 1,\n                rotation: overlay.rotation ?? 0,\n                offsetX: overlay.offsetX ?? 0,\n                offsetY: overlay.offsetY ?? 0\n            }\n        }\n    }\n    composeTransform(context, posture, locomotion) {\n        const base = context.overlay\n        const locomotionLift = locomotion?.stepPower ? -locomotion.stepPower * 1.4 : 0\n\n        return {\n            scaleX: base.scaleX,\n            scaleY: base.scaleY,\n            rotation: base.rotation + (posture?.rotation ?? 0),\n            offsetX: base.offsetX + (posture?.offsetX ?? 0),\n            offsetY: base.offsetY + (posture?.offsetY ?? 0) + locomotionLift,\n            trails: base.trails || []\n        }\n    }\n\n    update(deltaTime, contextInput = {}) {\n        const context = this.buildContext(deltaTime, contextInput)\n        const pose = this.rig.createWorkingPose()\n\n        const posture = this.modules.core.apply(deltaTime, pose, context)\n        context.posture = posture\n        context.stridePhase = context.stridePhase ?? posture?.stridePhase ?? context.normalizedTime\n\n        const locomotion = this.modules.locomotion.apply(deltaTime, pose, context)\n        context.locomotion = locomotion\n        context.stridePhase = locomotion?.stridePhase ?? context.stridePhase\n\n        const combat = this.modules.combat.apply(deltaTime, pose, context)\n        context.combat = combat\n\n        const secondary = this.modules.secondary.apply(deltaTime, pose, context)\n        const environmental = this.modules.environment.apply(deltaTime, pose, context)\n\n        this.rig.commitPose(pose)\n\n        const baseTransform = this.composeTransform(context, posture, locomotion)\n\n        this.cachedTransform = {\n            ...baseTransform,\n            skeleton: this.rig.toSkeleton(),\n            secondaryMotion: secondary,\n            environmental,\n            debug: {\n                state: context.playerState,\n                stridePhase: locomotion?.stridePhase ?? 0,\n                speed: context.speed,\n                lean: posture?.lean ?? 0,\n                wind: environmental?.wind ?? 0,\n                shiver: environmental?.shiver ?? 0\n            }\n        }\n\n        return this.cachedTransform\n    }\n}\r\n\r\n\r\n\r\n\r\n","// Enhanced Player with Animation System Integration\r\n// Provides a complete player character with roll, attack, block, and hurt animations\r\n\r\nimport { CharacterAnimator, AnimationPresets } from './animation-system.js'\r\nimport PlayerProceduralAnimator from './player/procedural/player-procedural-animator.js'\r\n// SoundSystem and ParticleSystem imports removed - not used in this file\r\n\r\nexport class AnimatedPlayer {\r\n    constructor(x = 400, y = 300, options = {}) {\r\n        // Position - driven by WASM (normalized 0-1 coordinates)\r\n        this.x = x\r\n        this.y = y\r\n        this.facing = 1 // 1 for right, -1 for left\r\n        \r\n        // Player stats - WASM will manage the core stats\r\n        this.health = options.health || 100\r\n        this.maxHealth = options.maxHealth || 100\r\n        this.stamina = options.stamina || 100\r\n        this.maxStamina = options.maxStamina || 100\r\n        this._cachedHealth = this.health\r\n        this._cachedStamina = this.stamina\r\n        this.speed = options.speed || 250 // Base speed, actual speed is WASM-driven\r\n        this.rollSpeed = options.rollSpeed || 500 // Base roll speed, actual speed is WASM-driven\r\n        \r\n        // State management - now primarily WASM-driven, this is for JS animation state\r\n        this.state = 'idle' // idle, running, attacking, blocking, rolling, hurt, dead, jumping, doubleJumping, landing, wallSliding, dashing, chargingAttack\r\n        this.previousState = 'idle'\r\n        this.stateTimer = 0 // Managed by WASM now for core actions\r\n        this.stateTime = 0 // Managed by WASM now\r\n        this.stateDuration = 0 // Managed by WASM now\r\n        this._prevNormTime = 0 // Managed by WASM now\r\n        this._comboQueued = false // Logic related to combos will move to WASM\r\n        this._currentAttackType = 'light' // Managed by WASM now\r\n        this.invulnerable = false // Managed by WASM\r\n        this.invulnerabilityTimer = 0 // Managed by WASM\r\n        this.isGrounded = true // Driven by WASM\r\n        this.jumpCount = 0 // Driven by WASM\r\n        this.nearWall = false // Will be WASM-driven or removed\r\n        this.dashCooldown = 0 // Will be WASM-driven or removed\r\n        this.chargeTime = 0 // Will be WASM-driven or removed\r\n        this.maxChargeTime = 1.5 // Will be WASM-driven or removed\r\n\r\n        // Deterministic animation/event parameters - these are mostly cues for animation\r\n        this.params = {\r\n            roll: {\r\n                duration: 0.4,\r\n                iFrameStart: 0.08,\r\n                iFrameEnd: 0.36,\r\n                staminaCost: 25,\r\n                cooldown: 0.8\r\n            },\r\n            attackLight: {\r\n                duration: 0.4,\r\n                activeStart: 0.28,\r\n                activeEnd: 0.38,\r\n                staminaCost: 12,\r\n                cooldown: 0.5\r\n            },\r\n            attackHeavy: {\r\n                duration: 0.62,\r\n                activeStart: 0.32,\r\n                activeEnd: 0.48,\r\n                staminaCost: 24,\r\n                cooldown: 0.8\r\n            },\r\n            comboWindow: { start: 0.55, end: 0.75 },\r\n            parry: { duration: 0.22, window: 0.18, staminaCost: 10 }\r\n        }\r\n        \r\n        // Animation system\r\n        this.animator = new CharacterAnimator()\r\n        this.animations = AnimationPresets.createPlayerAnimations()\r\n        this.setupAnimations()\r\n        \r\n        // Player procedural animation orchestrator\r\n        const proceduralOptions = options.proceduralOptions || options.proceduralConfig || options.proceduralModules || {}\r\n        this.proceduralAnimator = new PlayerProceduralAnimator(proceduralOptions)\r\n        \r\n        // Action cooldowns - now WASM-driven\r\n        this.attackCooldown = 0\r\n        this.rollCooldown = 0\r\n        this.blockHeld = false // WASM will manage the actual block state\r\n        \r\n        // Visual properties\r\n        this.width = options.width || 32\r\n        this.height = options.height || 32\r\n        this.color = options.color || '#00ff88'\r\n        this.sprite = options.sprite || null\r\n\r\n        // Load sprite sheet if not provided\r\n        if (!this.sprite) {\r\n            this.loadSpriteSheet()\r\n        }\r\n        \r\n        // Effects\r\n        this.particleSystem = options.particleSystem || null\r\n        this.soundSystem = options.soundSystem || null\r\n        \r\n        // Combat properties - now WASM-driven\r\n        this.attackDamage = options.attackDamage || 20\r\n        this.attackDamageHeavy = options.attackDamageHeavy || 35\r\n        this.attackRange = options.attackRange || 60\r\n        this.attackRangeHeavy = options.attackRangeHeavy || 80\r\n        this.blockDamageReduction = options.blockDamageReduction || 0.5\r\n\r\n        // Locomotion cadence and footsteps - these will be driven by WASM velocity feedback\r\n        this.stridePhase = 0\r\n        this.gaitRate = 1.4\r\n        this._lastFootFlag = 0 // 0 left, 1 right alternating\r\n        this.footstepIntervalBase = 0.28\r\n\r\n        // Minimal IK proxy values (pelvis bob and foot locks for readability) - driven by WASM\r\n        this.ik = {\r\n            pelvisY: 0,\r\n            pelvisRate: 10,\r\n            left: { locked: false, y: 0 },\r\n            right: { locked: false, y: 0 },\r\n            stepHeight: 2\r\n        }\r\n\r\n        // Debug flag\r\n        this.debugMode = false\r\n\r\n        // Optional WASM module injection support for testing/integration\r\n        try {\r\n            if (options.wasmModule && !globalThis.wasmExports) {\r\n                globalThis.wasmExports = options.wasmModule\r\n            }\r\n        } catch {\r\n            // Ignore WASM module loading errors - fallback handling elsewhere\r\n        }\r\n    }\r\n\r\n    loadSpriteSheet() {\r\n        // Try to load sprite sheet with multiple possible paths\r\n        this.sprite = new Image()\r\n        \r\n        // Try different possible paths based on where the demo is running from\r\n        const possiblePaths = [\r\n            './src/images/player-sprites.png',  // From demos/ directory\r\n            '../src/images/player-sprites.png', // From docs/ directory\r\n            '../../src/images/player-sprites.png' // From deeper nested directories\r\n        ]\r\n        \r\n        let currentPathIndex = 0\r\n        \r\n        const tryNextPath = () => {\r\n            if (currentPathIndex < possiblePaths.length) {\r\n                this.sprite.src = possiblePaths[currentPathIndex]\r\n                currentPathIndex++\r\n            } else {\r\n                console.warn('Player sprite sheet not found at any expected location, using fallback rendering')\r\n                console.log('To fix this: Run \"node scripts/generate-sprite-sheet.js\" or use create-sprite-sheet.html')\r\n                this.sprite = null\r\n            }\r\n        }\r\n\r\n        this.sprite.onload = () => {\r\n            console.log(`Player sprite sheet loaded successfully from ${this.sprite.src}`)\r\n        }\r\n\r\n        this.sprite.onerror = () => {\r\n            console.warn(`Player sprite sheet not found at ${this.sprite.src}, trying next path...`)\r\n            tryNextPath()\r\n        }\r\n        \r\n        // Start with the first path\r\n        tryNextPath()\r\n    }\r\n    \r\n    setupAnimations() {\r\n        // Add all animations to the controller\r\n        Object.entries(this.animations).forEach(([name, animation]) => {\r\n            this.animator.addAnimation(name, animation)\r\n        })\r\n        \r\n        // Start with idle animation\r\n        this.animator.play('idle')\r\n    }\r\n    \r\n    update(deltaTime, input = {}) {\r\n        // Update timers - WASM manages core game timers\r\n        this._prevNormTime = this.getNormalizedTime()\r\n        this.attackCooldown = Math.max(0, this.attackCooldown - deltaTime)\r\n        this.rollCooldown = Math.max(0, this.rollCooldown - deltaTime)\r\n        \r\n        // Update invulnerability\r\n        if (this.invulnerable) {\r\n            this.invulnerabilityTimer -= deltaTime // WASM manages invulnerability timer\r\n            if (this.invulnerabilityTimer <= 0) {\r\n                this.invulnerable = false\r\n            }\r\n        }\r\n        \r\n        // Handle state transitions\r\n        // this.handleStateTransitions(input) // WASM now handles state transitions\r\n        \r\n        // Update based on current state\r\n        // this.updateState(deltaTime, input) // WASM now handles state updates\r\n\r\n        // Deterministic state event windows (hitboxes, i-frames)\r\n        // this.applyStateEvents() // WASM now handles state events\r\n        \r\n        // Update simple IK before composing overlay\r\n        this.updateIK(deltaTime)\r\n\r\n        // 1. Forward inputs to WASM - 5-button combat system\r\n        // Only send to WASM if not being managed externally (e.g., by GameStateManager)\r\n        if (!globalThis.wasmInputManagedExternally) {\r\n            let inputX = 0; let inputY = 0\r\n            if (input.left) {inputX -= 1}\r\n            if (input.right) {inputX += 1}\r\n            if (input.up) {inputY -= 1}\r\n            if (input.down) {inputY += 1}\r\n            \r\n            // New 5-button combat system: A1(light), A2(heavy), Block, Roll, Special\r\n            globalThis.wasmExports?.set_player_input?.(\r\n                inputX, inputY, \r\n                input.roll ? 1 : 0, \r\n                input.jump ? 1 : 0, \r\n                input.lightAttack ? 1 : 0, \r\n                input.heavyAttack ? 1 : 0, \r\n                input.block ? 1 : 0, \r\n                input.special ? 1 : 0\r\n            )\r\n        }\r\n\r\n        // 2. Read state for rendering\r\n        // Assuming 800x600 canvas for now. Convert WASM's 0-1 range to world coordinates.\r\n        // The game-renderer.js is responsible for this scaling when passing player position to render.\r\n        // For now, we'll directly set x and y, and let the renderer handle scaling.\r\n        // WASM provides normalized coordinates; guard against NaN/Infinity\r\n        const rx = globalThis.wasmExports?.get_x?.()\r\n        const ry = globalThis.wasmExports?.get_y?.()\r\n        \r\n        // Debug logging for WASM position updates\r\n        if (typeof rx === 'number' && typeof ry === 'number' && (rx !== 0.5 || ry !== 0.5)) {\r\n            console.log('WASM position update:', rx, ry);\r\n        }\r\n        \r\n        // Debug logging for NaN values\r\n        if (typeof rx !== 'number' || typeof ry !== 'number' || !Number.isFinite(rx) || !Number.isFinite(ry)) {\r\n            console.warn('WASM position returned invalid values:', { rx, ry, typeX: typeof rx, typeY: typeof ry });\r\n            console.warn('WASM exports available:', !!globalThis.wasmExports);\r\n            if (globalThis.wasmExports) {\r\n                console.warn('WASM get_x function:', typeof globalThis.wasmExports.get_x);\r\n                console.warn('WASM get_y function:', typeof globalThis.wasmExports.get_y);\r\n            }\r\n        }\r\n        \r\n        this.x = (typeof rx === 'number' && Number.isFinite(rx)) ? rx : 0.5\r\n        this.y = (typeof ry === 'number' && Number.isFinite(ry)) ? ry : 0.5\r\n\r\n        this.isGrounded = (globalThis.wasmExports?.get_is_grounded?.() === 1);\r\n        this.jumpCount = globalThis.wasmExports?.get_jump_count?.();\r\n\r\n        // Update animation system and cache transform\r\n        // WASM will determine facing direction implicitly from movement and actions\r\n        // Infer facing from velocity if available; preserve when nearly still\r\n        const fx = globalThis.wasmExports?.get_vel_x?.()\r\n        const fy = globalThis.wasmExports?.get_vel_y?.()\r\n        if (typeof fx === 'number' && typeof fy === 'number') {\r\n            const speed = Math.hypot(fx, fy)\r\n            if (speed > 0.001) {\r\n                this.facing = fx >= 0 ? 1 : -1\r\n            }\r\n        }\r\n\r\n        if (this.animator && typeof this.animator.setFacing === 'function') {\r\n            this.animator.setFacing(this.facing >= 0 ? 'right' : 'left')\r\n        }\r\n        // Query WASM overlay values if available\r\n        const wx = (globalThis.wasmExports?.get_anim_offset_x?.() ?? 0)\r\n        const wy = (globalThis.wasmExports?.get_anim_offset_y?.() ?? 0)\r\n        const wsx = (globalThis.wasmExports?.get_anim_scale_x?.() ?? 1)\r\n        const wsy = (globalThis.wasmExports?.get_anim_scale_y?.() ?? 1)\r\n        const wrot = (globalThis.wasmExports?.get_anim_rotation?.() ?? 0)\r\n        const wpelvis = (globalThis.wasmExports?.get_anim_pelvis_y?.() ?? 0)\r\n        \r\n        // Get the animation state from WASM and set it in the CharacterAnimator\r\n        const wasmAnimState = globalThis.wasmExports?.get_player_anim_state?.()\r\n        if (typeof wasmAnimState === 'number') {\r\n            this.setState(this.getAnimStateName(wasmAnimState), true) // Pass true to indicate WASM-driven state\r\n        }\r\n\r\n        const velocityX = Number.isFinite(fx) ? fx : 0\r\n        const velocityY = Number.isFinite(fy) ? fy : 0\r\n\r\n        const baseTransform = this.animator.update(\r\n            deltaTime,\r\n            { x: this.x, y: this.y },\r\n            { x: velocityX, y: velocityY },\r\n            this.isGrounded\r\n        ) || { scaleX: 1, scaleY: 1, rotation: 0, offsetX: 0, offsetY: 0 }\r\n\r\n        const overlay = (globalThis.wasmExports && typeof wx === 'number') ? {\r\n            scaleX: wsx,\r\n            scaleY: wsy,\r\n            rotation: wrot,\r\n            offsetX: wx,\r\n            offsetY: wy\r\n        } : this.computePoseOverlay(input)\r\n\r\n        const legLiftLeft = globalThis.wasmExports?.get_anim_leg_lift_left?.() ?? 0\r\n        const legLiftRight = globalThis.wasmExports?.get_anim_leg_lift_right?.() ?? 0\r\n        const breathing = globalThis.wasmExports?.get_anim_breathing_intensity?.() ?? 1\r\n        const fatigue = globalThis.wasmExports?.get_anim_fatigue_factor?.() ?? 0\r\n        const windResponse = globalThis.wasmExports?.get_anim_wind_response?.() ?? 0\r\n        const groundAdapt = globalThis.wasmExports?.get_anim_ground_adapt?.() ?? 0\r\n        const temperatureShiver = globalThis.wasmExports?.get_anim_temperature_shiver?.() ?? 0\r\n        const clothSway = globalThis.wasmExports?.get_anim_cloth_sway?.() ?? 0\r\n        const hairBounce = globalThis.wasmExports?.get_anim_hair_bounce?.() ?? 0\r\n        const equipmentJiggle = globalThis.wasmExports?.get_anim_equipment_jiggle?.() ?? 0\r\n        const momentumX = globalThis.wasmExports?.get_anim_momentum_x?.() ?? velocityX\r\n        const momentumY = globalThis.wasmExports?.get_anim_momentum_y?.() ?? velocityY\r\n\r\n        const normalizedTime = this.getNormalizedTime()\r\n\r\n        const currentHealth = globalThis.wasmExports?.get_hp?.() ?? globalThis.wasmExports?.get_health?.() ?? this.health\r\n        const currentStamina = globalThis.wasmExports?.get_stamina?.() ?? this.stamina\r\n        this._cachedHealth = currentHealth\r\n        this._cachedStamina = currentStamina\r\n\r\n        const proceduralTransform = this.proceduralAnimator.update(deltaTime, {\r\n            playerState: this.state,\r\n            facing: this.facing,\r\n            velocity: { x: velocityX, y: velocityY },\r\n            momentum: { x: momentumX, y: momentumY },\r\n            normalizedTime,\r\n            isGrounded: this.isGrounded,\r\n            pelvisOffset: wpelvis,\r\n            breathing,\r\n            fatigue,\r\n            legLiftLeft,\r\n            legLiftRight,\r\n            groundOffset: groundAdapt,\r\n            wind: windResponse,\r\n            temperatureShiver,\r\n            clothSway,\r\n            hairBounce,\r\n            equipmentJiggle,\r\n            staminaRatio: this.maxStamina ? currentStamina / this.maxStamina : 1,\r\n            healthRatio: this.maxHealth ? currentHealth / this.maxHealth : 1,\r\n            attackStrength: this._currentAttackType === 'heavy' ? 1.35 : 1,\r\n            attackType: this._currentAttackType,\r\n            inputState: input,\r\n            maxSpeed: this.speed,\r\n            stridePhase: this.stridePhase,\r\n            overlay\r\n        })\r\n\r\n        this.currentTransform = {\r\n            scaleX: baseTransform.scaleX * (proceduralTransform.scaleX ?? 1),\r\n            scaleY: baseTransform.scaleY * (proceduralTransform.scaleY ?? 1),\r\n            rotation: baseTransform.rotation + (proceduralTransform.rotation ?? 0),\r\n            offsetX: baseTransform.offsetX + (proceduralTransform.offsetX ?? 0),\r\n            offsetY: baseTransform.offsetY + (proceduralTransform.offsetY ?? 0),\r\n            trails: baseTransform.trails || [],\r\n            skeleton: proceduralTransform.skeleton,\r\n            secondaryMotion: proceduralTransform.secondaryMotion,\r\n            environmental: proceduralTransform.environmental,\r\n            debug: proceduralTransform.debug\r\n        }\r\n        \r\n        // Physics handled by WASM\r\n\r\n        // Stamina regeneration handled by WASM\r\n    }\r\n\r\n    // Returns a normalized [0,1] progress for the current player action/animation\r\n    // Prefer authoritative WASM timers; fallback to current animation controller progress\r\n    getNormalizedTime() {\r\n        try {\r\n            // If WASM provides an explicit attack state machine, derive normalized phase\r\n            const get = (fn) => (typeof globalThis.wasmExports?.[fn] === 'function') ? globalThis.wasmExports[fn]() : void 0\r\n            const attackState = get('get_attack_state') // 0 Idle, 1 Windup, 2 Active, 3 Recovery\r\n            const stateStartTime = get('get_attack_state_time')\r\n            const now = get('get_time_seconds')\r\n            if (typeof attackState === 'number' && typeof stateStartTime === 'number' && typeof now === 'number') {\r\n                const elapsed = Math.max(0, now - stateStartTime)\r\n                let duration = 0\r\n                if (attackState === 1) {duration = get('get_attack_windup_sec') ?? this.params.attackLight.duration}\r\n                else if (attackState === 2) {duration = get('get_attack_active_sec') ?? this.params.attackLight.duration}\r\n                else if (attackState === 3) {duration = get('get_attack_recovery_sec') ?? this.params.attackLight.duration}\r\n                if (duration && duration > 0) {\r\n                    return Math.max(0, Math.min(1, elapsed / duration))\r\n                }\r\n            }\r\n\r\n            // Rolling phase if available\r\n            const isRolling = get('get_is_rolling')\r\n            if (isRolling === 1) {\r\n                const rollDur = get('get_roll_duration') || this.params.roll.duration\r\n                const playerStateTimer = get('get_player_state_timer')\r\n                if (typeof playerStateTimer === 'number' && rollDur > 0) {\r\n                    return Math.max(0, Math.min(1, playerStateTimer / rollDur))\r\n                }\r\n            }\r\n\r\n            // Generic state timer normalization when duration is known locally\r\n            const playerStateTimer = get('get_player_state_timer')\r\n            if (typeof playerStateTimer === 'number') {\r\n                let duration = 0\r\n                switch (this.state) {\r\n                    case 'rolling': duration = this.params.roll.duration; break\r\n                    case 'attacking':\r\n                        duration = this._currentAttackType === 'heavy' ? this.params.attackHeavy.duration : this.params.attackLight.duration\r\n                        break\r\n                    default:\r\n                        duration = 0\r\n                }\r\n                if (duration > 0) {\r\n                    return Math.max(0, Math.min(1, playerStateTimer / duration))\r\n                }\r\n            }\r\n        } catch {\r\n            // Ignore WASM timing errors - fallback to animation controller\r\n        }\r\n\r\n        // Fallback: use current animation controller progress\r\n        try {\r\n            const anim = this.animator?.controller?.currentAnimation\r\n            if (anim && Array.isArray(anim.frames) && anim.frames.length > 1) {\r\n                // Use frame index over total as coarse progress\r\n                const coarse = anim.currentFrame / (anim.frames.length - 1)\r\n                return Math.max(0, Math.min(1, coarse))\r\n            }\r\n        } catch {\r\n            // Ignore animation controller errors - return default\r\n        }\r\n\r\n        return 0\r\n    }\r\n\r\n    startRoll(input) {\r\n        // Trigger WASM roll action and handle visual/audio effects\r\n        if (!globalThis.wasmExports?.on_roll_start?.()) {\r\n            // WASM determined roll could not start (e.g., stamina, cooldown)\r\n            return;\r\n        }\r\n\r\n        // Determine roll direction for local effects and WASM input\r\n        let dirX = 0; let dirY = 0\r\n        \r\n        if (input.left) {dirX -= 1}\r\n        if (input.right) {dirX += 1}\r\n        if (input.up) {dirY -= 1}\r\n        if (input.down) {dirY += 1}\r\n        \r\n        // If no direction input, roll in facing direction\r\n        if (dirX === 0 && dirY === 0) {\r\n            dirX = this.facing\r\n        }\r\n        \r\n        // Normalize direction\r\n        const length = Math.hypot(dirX, dirY)\r\n        if (length > 0) {\r\n            dirX /= length\r\n            dirY /= length\r\n        }\r\n        \r\n        this.rollDirection = { x: dirX, y: dirY }\r\n        // Visual and audio effects only - core logic handled by WASM\r\n        \r\n        // Create roll effect\r\n        if (this.particleSystem) {\r\n            this.particleSystem.createDustCloud(this.x, this.y)\r\n        }\r\n        \r\n        // Play roll sound\r\n        if (this.soundSystem) {\r\n            this.soundSystem.play('roll')\r\n        }\r\n    }\r\n    \r\n    startAttack(type = 'light') {\r\n        // Trigger WASM attack action and handle visual/audio effects\r\n        const p = type === 'heavy' ? this.params.attackHeavy : this.params.attackLight\r\n        this._currentAttackType = type\r\n\r\n        if (!globalThis.wasmExports?.on_attack?.(type === 'heavy' ? 1 : 0)) {\r\n            // WASM determined attack could not start (e.g., stamina, cooldown)\r\n            return;\r\n        }\r\n        \r\n        // Play attack sound\r\n        if (this.soundSystem) {\r\n            this.soundSystem.play('attack')\r\n        }\r\n    }\r\n\r\n    // Public input API helpers\r\n    queueAttack(type = 'light') {\r\n        // This logic is now handled in WASM\r\n        if (this.canAttack()) { // This check will still use local state, but the actual decision is WASM's\r\n            this.startAttack(type)\r\n        } else if (this.state === 'attacking') {\r\n            // This combo queuing needs to be moved to WASM if it affects gameplay\r\n            this._comboQueued = true\r\n        }\r\n    }\r\n\r\n    tryRoll(dir = null) {\r\n        // dir: {x,y} optional; if absent uses current input/facing via startRoll caller\r\n        // This logic is now handled by WASM, just call startRoll\r\n        const input = {}\r\n        if (dir && (dir.x || dir.y)) {\r\n            input.left = dir.x < -0.5\r\n            input.right = dir.x > 0.5\r\n            input.up = dir.y < -0.5\r\n            input.down = dir.y > 0.5\r\n        }\r\n        this.startRoll(input);\r\n    }\r\n\r\n    tryParry() {\r\n        // Parry logic is now handled in WASM\r\n        if (this.state === 'dead') { return }\r\n        // Stamina check is now done in WASM\r\n        // if (this.stamina < this.params.parry.staminaCost) { return }\r\n        // Enter a brief blocking-like state with a success window; integrate with combat later\r\n        // this.setState('blocking') // State is WASM-driven\r\n        // this.stateTimer = this.params.parry.duration // State timing is WASM-driven\r\n        // this.stateTime = 0 // State timing is WASM-driven\r\n        // this.stateDuration = this.params.parry.duration // State timing is WASM-driven\r\n        // this.stamina -= this.params.parry.staminaCost // Stamina cost is WASM-driven\r\n        if (!globalThis.wasmExports?.on_parry?.()) { // Assuming a new WASM on_parry function\r\n            return; // Parry failed in WASM\r\n        }\r\n        // Optional sfx\r\n        if (this.soundSystem) { this.soundSystem.play('parry') }\r\n    }\r\n    \r\n    executeAttack() {\r\n        // This method will be simplified as WASM handles attack logic.\r\n        // It will primarily be for visual effects and returning hit data for JS enemies.\r\n        const isHeavy = this._currentAttackType === 'heavy'\r\n        const range = isHeavy ? this.attackRangeHeavy : this.attackRange\r\n        const damage = isHeavy ? this.attackDamageHeavy : this.attackDamage\r\n        const hitboxX = this.x + (this.facing * range / 2)\r\n        const hitboxY = this.y\r\n        \r\n        // Create attack effect\r\n        if (this.particleSystem) {\r\n            if (isHeavy) {\r\n                this.particleSystem.createChargedSlash?.(hitboxX, hitboxY, this.facing, 1)\r\n            } else {\r\n                this.particleSystem.createSlashEffect(hitboxX, hitboxY, this.facing)\r\n            }\r\n        }\r\n        \r\n        // Return attack hitbox for collision detection (for JS-managed enemies)\r\n        return {\r\n            x: hitboxX,\r\n            y: hitboxY,\r\n            width: range,\r\n            height: this.height,\r\n            damage: damage\r\n        }\r\n    }\r\n    \r\n    startBlock() {\r\n        // This function now primarily triggers the WASM block action and handles local effects\r\n        if (!globalThis.wasmExports?.set_blocking?.(1, this.facing, 0)) {\r\n            return; // Block failed in WASM (e.g., stamina)\r\n        }\r\n        // this.setState('blocking') // State is WASM-driven\r\n        this.blockHeld = true\r\n        \r\n        // Create block effect\r\n        if (this.particleSystem) {\r\n            this.particleSystem.createShieldEffect(this.x, this.y)\r\n        }\r\n        \r\n        // Play block sound\r\n        if (this.soundSystem) {\r\n            this.soundSystem.play('block')\r\n        }\r\n    }\r\n    \r\n    stopBlock() {\r\n        // This function now primarily triggers the WASM block action\r\n        globalThis.wasmExports?.set_blocking?.(0, this.facing, 0);\r\n        // this.setState('idle') // State is WASM-driven\r\n        this.blockHeld = false\r\n    }\r\n    \r\n    takeDamage(damage, knockbackX = 0, knockbackY = 0) {\r\n        // Damage calculation is now primarily WASM-driven\r\n        // This function will be simplified or removed if WASM handles all damage and effects\r\n        if (this.invulnerable || this.state === 'dead') {return false} // Invulnerable state is WASM-driven\r\n\r\n        const actualDamage = damage\r\n        \r\n        // Reduce damage if blocking - WASM handles this logic\r\n        if (this.state === 'blocking') {\r\n            // actualDamage *= this.blockDamageReduction\r\n            \r\n            // Create block impact effect\r\n            if (this.particleSystem) {\r\n                this.particleSystem.createBlockImpact(this.x, this.y)\r\n            }\r\n            \r\n            // Play block impact sound\r\n            if (this.soundSystem) {\r\n                this.soundSystem.play('blockImpact')\r\n            }\r\n        } else {\r\n            // Not blocking, take full damage - visual/audio effects only\r\n            if (this.particleSystem) {\r\n                this.particleSystem.createBloodEffect(this.x, this.y)\r\n            }\r\n\r\n            if (this.soundSystem) {\r\n                this.soundSystem.play('hurt')\r\n            }\r\n        }\r\n\r\n        // Damage application and death check handled by WASM\r\n        \r\n        return true\r\n    }\r\n    \r\n    die() {\r\n        // Visual and audio effects only - death state handled by WASM\r\n        if (this.particleSystem) {\r\n            this.particleSystem.createDeathEffect(this.x, this.y)\r\n        }\r\n\r\n        if (this.soundSystem) {\r\n            this.soundSystem.play('death')\r\n        }\r\n    }\r\n    \r\n    respawn(_x, _y) {\r\n        // Visual and audio effects only - respawn logic handled by WASM\r\n        if (this.particleSystem) {\r\n            this.particleSystem.createRespawnEffect(this.x, this.y)\r\n        }\r\n\r\n        if (this.soundSystem) {\r\n            this.soundSystem.play('respawn')\r\n        }\r\n    }\r\n    \r\n    setState(newState, wasmDriven = false) { // Added wasmDriven parameter\r\n        if (this.state === newState) {return} // Prevent redundant state changes regardless of source\r\n\r\n        this.previousState = this.state\r\n        this.state = newState\r\n        this.stateTime = 0\r\n        this.stateDuration = 0\r\n        this._prevNormTime = 0\r\n\r\n        // Convert string state to numeric state for CharacterAnimator\r\n        const numericState = this.stateNameToNumber(newState)\r\n\r\n        // Update animation using CharacterAnimator's setAnimState method\r\n        this.animator.setAnimState(numericState)\r\n    }\r\n    \r\n    canAttack() {\r\n        // This check is now primarily WASM-driven, this local version is for UI/client-side prediction\r\n        const minCost = Math.min(this.params.attackLight.staminaCost, this.params.attackHeavy.staminaCost)\r\n        return this.attackCooldown <= 0 && \r\n               this.stamina >= minCost && // Stamina also comes from WASM\r\n               this.state !== 'dead' &&\r\n               this.state !== 'rolling' &&\r\n               this.state !== 'hurt'\r\n    }\r\n    \r\n    canRoll() {\r\n        // This check is now primarily WASM-driven, this local version is for UI/client-side prediction\r\n        return this.rollCooldown <= 0 && \r\n               this.stamina >= this.params.roll.staminaCost && // Stamina also comes from WASM\r\n               this.state !== 'dead' &&\r\n               this.state !== 'attacking' &&\r\n               this.state !== 'hurt'\r\n    }\r\n    \r\n    canBlock() {\r\n        // This check is now primarily WASM-driven, this local version is for UI/client-side prediction\r\n        return this.stamina > 0 && // Stamina also comes from WASM\r\n               this.state !== 'dead' &&\r\n               this.state !== 'rolling' &&\r\n               this.state !== 'attacking' &&\r\n               this.state !== 'hurt'\r\n    }\r\n    \r\n    render(ctx, camera = null) {\r\n        // Compute screen position from WASM-normalized coords using GameRenderer mapping if available\r\n        let screenX = 0\r\n        let screenY = 0\r\n        const camX = camera?.x || 0\r\n        const camY = camera?.y || 0\r\n        \r\n        // Debug logging for position tracking\r\n        const debugPositions = false; // Set to true for debugging\r\n        if (debugPositions && Math.random() < 0.01) { // Log occasionally to avoid spam\r\n            console.log('AnimatedPlayer.render:', {\r\n                playerPos: { x: this.x, y: this.y },\r\n                camera: { x: camX, y: camY },\r\n                hasGameRenderer: !!globalThis.gameRenderer,\r\n                hasWasmToWorld: !!(globalThis.gameRenderer?.wasmToWorld)\r\n            });\r\n        }\r\n        \r\n        if (globalThis.gameRenderer && typeof globalThis.gameRenderer.wasmToWorld === 'function') {\r\n            const pos = globalThis.gameRenderer.wasmToWorld(this.x || 0.5, this.y || 0.5)\r\n            screenX = pos.x - camX\r\n            screenY = pos.y - camY\r\n        } else {\r\n            // Fallback scaling if renderer mapping is unavailable\r\n            const worldWidth = 800\r\n            const worldHeight = 600\r\n            screenX = (this.x || 0) * worldWidth - camX\r\n            screenY = (this.y || 0) * worldHeight - camY\r\n        }\r\n        \r\n        ctx.save()\r\n        \r\n        // Apply invulnerability flashing - this will be driven by WASM\r\n        if (globalThis.wasmExports?.get_is_invulnerable?.() === 1) { // Assuming a WASM export for invulnerability\r\n            ctx.globalAlpha = 0.5 + Math.sin(Date.now() * 0.02) * 0.3\r\n        }\r\n        \r\n        // Get current animation frame\r\n        const frame = this.animator.controller.getCurrentFrame()\r\n        \r\n        if (this.sprite && frame) {\r\n            // Draw sprite animation with enhanced procedural transform\r\n            ctx.save()\r\n            const t = this.currentTransform || { scaleX: 1, scaleY: 1, rotation: 0, offsetX: 0, offsetY: 0 }\r\n            const centerX = screenX + t.offsetX\r\n            const centerY = screenY + t.offsetY\r\n            ctx.translate(centerX, centerY)\r\n            ctx.rotate(t.rotation)\r\n            ctx.scale(this.facing < 0 ? -t.scaleX : t.scaleX, t.scaleY)\r\n            \r\n            // Render secondary motion effects first (behind character)\r\n            if (t.secondaryMotion && this.debugMode) {\r\n                this.renderSecondaryMotion(ctx, t.secondaryMotion)\r\n            }\r\n            \r\n            // Draw main character sprite\r\n            ctx.drawImage(\r\n                this.sprite,\r\n                frame.x, frame.y, frame.width, frame.height,\r\n                -this.width/2, -this.height/2,\r\n                this.width, this.height\r\n            )\r\n            \r\n            // Render enhanced skeletal overlay if available and in debug mode\r\n            if (t.skeleton && this.debugMode) {\r\n                this.renderSkeletalOverlay(ctx, t.skeleton)\r\n            }\r\n            \r\n            ctx.restore()\r\n        } else {\r\n            // Fallback to colored rectangle - ensure it's always visible\r\n            ctx.fillStyle = this.color || '#4a90e2' // Default blue color\r\n            \r\n            // Apply state-based visual effects\r\n            if (this.state === 'hurt') {\r\n                ctx.fillStyle = '#ff4444'\r\n            } else if (this.state === 'blocking') {\r\n                ctx.fillStyle = '#4444ff'\r\n            } else if (this.state === 'rolling') {\r\n                ctx.fillStyle = '#ffff44'\r\n            }\r\n            \r\n            // Draw a more visible rectangle\r\n            const rectWidth = this.width || 32;\r\n            const rectHeight = this.height || 32;\r\n            \r\n            ctx.fillRect(\r\n                screenX - rectWidth/2,\r\n                screenY - rectHeight/2,\r\n                rectWidth,\r\n                rectHeight\r\n            );\r\n            \r\n            // Add a border to make it more visible\r\n            ctx.strokeStyle = '#ffffff';\r\n            ctx.lineWidth = 2;\r\n            ctx.strokeRect(\r\n                screenX - rectWidth/2,\r\n                screenY - rectHeight/2,\r\n                rectWidth,\r\n                rectHeight\r\n            );\r\n            \r\n            // Add a center dot to show exact position\r\n            ctx.fillStyle = '#ffffff';\r\n            ctx.beginPath();\r\n            ctx.arc(screenX, screenY, 3, 0, Math.PI * 2);\r\n            ctx.fill();\r\n        }\r\n        \r\n        // Draw health bar\r\n        const barWidth = 40\r\n        const barHeight = 4\r\n        const barY = screenY - this.height/2 - 10\r\n        \r\n        // Background\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.5)'\r\n        ctx.fillRect(screenX - barWidth/2, barY, barWidth, barHeight)\r\n        \r\n        // Health - get from WASM\r\n        const currentHealth = Number.isFinite(this._cachedHealth) ? this._cachedHealth : (globalThis.wasmExports?.get_hp?.() ?? globalThis.wasmExports?.get_health?.() ?? this.health);\r\n        const maxHealth = this.maxHealth; // Max health can still be local or WASM-driven if dynamic\r\n        const healthPercent = currentHealth / maxHealth\r\n        ctx.fillStyle = healthPercent > 0.5 ? '#00ff00' : \r\n                       healthPercent > 0.25 ? '#ffff00' : '#ff0000'\r\n        ctx.fillRect(screenX - barWidth/2, barY, barWidth * healthPercent, barHeight)\r\n        \r\n        // Stamina bar - get from WASM\r\n        const staminaY = barY + 5\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.5)'\r\n        ctx.fillRect(screenX - barWidth/2, staminaY, barWidth, 2)\r\n        \r\n        const currentStamina = Number.isFinite(this._cachedStamina) ? this._cachedStamina : (globalThis.wasmExports?.get_stamina?.() ?? this.stamina);\r\n        const maxStamina = this.maxStamina; // Max stamina can still be local or WASM-driven if dynamic\r\n        const staminaPercent = currentStamina / maxStamina\r\n        ctx.fillStyle = '#00aaff'\r\n        ctx.fillRect(screenX - barWidth/2, staminaY, barWidth * staminaPercent, 2)\r\n        \r\n        // Debug overlays\r\n        if (this.debugMode) {\r\n            this.renderDebug(ctx, camera, screenX, screenY)\r\n        }\r\n\r\n        ctx.restore()\r\n    }\r\n\r\n    computePoseOverlay(_input) {\r\n        // Simple procedural layers approximation for readability and responsiveness\r\n        // This can still be done in JS as it's purely visual\r\n        const t = this.getNormalizedTime() // This needs to be driven by WASM state timings\r\n        let scaleX = 1\r\n        let scaleY = 1\r\n        let rotation = 0\r\n        const offsetX = 0\r\n        let offsetY = this.ik?.pelvisY || 0\r\n\r\n        // Lean with velocity when running - velocity should come from WASM\r\n        // For now, using this.vx from CharacterAnimator.update's velocity parameter. This needs to be cleaned up.\r\n        // The CharacterAnimator.update is already being passed vx, vy, which are currently local.\r\n        // These local vx, vy are not updated from WASM, which is an issue.\r\n        // Need to pass WASM-driven velocity to CharacterAnimator.update as well.\r\n        // For now, let's assume CharacterAnimator is updated with correct velocity from WASM.\r\n        // We need an export for WASM player velocity (get_vel_x, get_vel_y)\r\n        const currentVx = globalThis.wasmExports?.get_vel_x?.() ?? 0;\r\n        const currentVy = globalThis.wasmExports?.get_vel_y?.() ?? 0;\r\n        const currentSpeed = Math.hypot(currentVx, currentVy);\r\n        const playerSpeed = globalThis.wasmExports?.get_speed?.() ?? this.speed; // Assuming WASM provides player speed\r\n\r\n        if (this.state === 'running') {\r\n            const lean = Math.max(-0.15, Math.min(0.15, (currentVx / (playerSpeed || 1)) * 0.25))\r\n            rotation += lean\r\n        }\r\n\r\n        // Block hunch\r\n        if (this.state === 'blocking') {\r\n            scaleY *= 0.98\r\n            offsetY += 1\r\n        }\r\n\r\n        // Roll tuck\r\n        if (this.state === 'rolling') {\r\n            const w = (t < 0.5 ? t * 2 : (1 - t) * 2)\r\n            scaleY *= 1 - 0.06 * w\r\n            scaleX *= 1 + 0.04 * w\r\n            rotation += (this.facing >= 0 ? 1 : -1) * 0.12 * w\r\n        }\r\n\r\n        // Attack slight forward push and recoil feel\r\n        // These will be driven by WASM attack state timings and forces\r\n        if (this.state === 'attacking') {\r\n            // Placeholder: These values should come from WASM's animation overlay exports\r\n            // if (t < 0.3) {\r\n            //     offsetX += this.facing * 2 * (t / 0.3)\r\n            // } else if (t > 0.6) {\r\n            //     offsetX -= this.facing * 2 * ((t - 0.6) / 0.4)\r\n            // }\r\n        }\r\n\r\n        return { scaleX, scaleY, rotation, offsetX, offsetY }\r\n    }\r\n\r\n    updateIK(deltaTime) {\r\n        // Pelvis bob from WASM overlay if available\r\n        const wasmPelvis = globalThis.wasmExports?.get_anim_pelvis_y?.()\r\n        if (typeof wasmPelvis === 'number') {\r\n            this.ik.pelvisY = wasmPelvis\r\n        } else {\r\n            this.ik.pelvisY = 0; // Fallback to 0 if WASM value not available\r\n        }\r\n\r\n        // Foot lock flags (alternating with steps) for future mask usage\r\n        // These should also be driven by WASM if precise synchronization is needed\r\n        const currentVx = globalThis.wasmExports?.get_vel_x?.() ?? 0;\r\n        const currentVy = globalThis.wasmExports?.get_vel_y?.() ?? 0;\r\n        const isMovingNow = Math.hypot(currentVx, currentVy) > 10\r\n        if (isMovingNow) {\r\n            // left foot considered planted near stridePhase ~ 0.0; right near ~0.5\r\n            // The stridePhase needs to be driven by WASM's locomotion state.\r\n            // For now, let's keep a local stridePhase but eventually it should be removed.\r\n            this.stridePhase = (this.stridePhase + deltaTime * this.gaitRate) % 1; // Keep local for now\r\n            const lf = (this.stridePhase < 0.25 || this.stridePhase > 0.75)\r\n            this.ik.left.locked = lf\r\n            this.ik.right.locked = !lf\r\n        } else {\r\n            this.ik.left.locked = false\r\n            this.ik.right.locked = false\r\n            this.stridePhase = 0; // Reset stride phase when idle\r\n        }\r\n    }\r\n\r\n    renderDebug(ctx, camera, screenX, screenY) {\r\n        const x = screenX\r\n        const y = screenY - this.height / 2 - 18\r\n        // Stride phase bar - needs to be updated based on WASM if stridePhase moves to WASM\r\n        ctx.save()\r\n        ctx.fillStyle = 'rgba(0,0,0,0.35)'\r\n        ctx.fillRect(x - 24, y, 48, 4)\r\n        ctx.fillStyle = '#00ffaa'\r\n        ctx.fillRect(x - 24, y, 48 * (this.stridePhase % 1), 4)\r\n\r\n        // Pelvis offset marker\r\n        ctx.strokeStyle = '#ffaa00'\r\n        ctx.beginPath()\r\n        ctx.moveTo(x + 30, y + 2)\r\n        ctx.lineTo(x + 30, y + 2 - (this.ik?.pelvisY || 0))\r\n        ctx.stroke()\r\n\r\n        // Event windows (attack/roll) - these timings are now WASM-driven\r\n        // This will require WASM exports for current attack/roll state durations and normalized times\r\n        const currentAttackState = globalThis.wasmExports?.get_attack_state?.() ?? 0; // Assuming a WASM export\r\n        const currentAttackStateTime = globalThis.wasmExports?.get_attack_state_time?.() ?? 0; // Assuming a WASM export\r\n        const totalGameTime = globalThis.wasmExports?.get_time_seconds?.() ?? 0; // Assuming a WASM export\r\n        \r\n        let norm = 0;\r\n        if (currentAttackState === 1) { // Windup\r\n            norm = (totalGameTime - currentAttackStateTime) / (globalThis.wasmExports?.get_attack_windup_sec?.() ?? this.params.attackLight.duration);\r\n        } else if (currentAttackState === 2) { // Active\r\n            norm = (totalGameTime - currentAttackStateTime) / (globalThis.wasmExports?.get_attack_active_sec?.() ?? this.params.attackLight.duration);\r\n        } else if (currentAttackState === 3) { // Recovery\r\n            norm = (totalGameTime - currentAttackStateTime) / (globalThis.wasmExports?.get_attack_recovery_sec?.() ?? this.params.attackLight.duration);\r\n        }\r\n\r\n        const barY = y + 8\r\n        ctx.fillStyle = 'rgba(0,0,0,0.35)'\r\n        ctx.fillRect(x - 24, barY, 48, 3)\r\n\r\n        // These ranges should be driven by WASM exports if precise\r\n        if (currentAttackState === 2) { // Active attack phase\r\n            ctx.fillStyle = '#ff4477'\r\n            // Placeholder: actual activeStart/End should come from WASM\r\n            ctx.fillRect(x - 24 + 48 * 0.28, barY, 48 * (0.38 - 0.28), 3)\r\n        }\r\n        if (globalThis.wasmExports?.get_is_rolling?.() === 1) { // If rolling\r\n            ctx.fillStyle = '#ffee55'\r\n            // Placeholder: iFrameStart/End should come from WASM\r\n            ctx.fillRect(x - 24 + 48 * 0.08, barY, 48 * (0.36 - 0.08), 3)\r\n        }\r\n        // Current norm marker\r\n        ctx.fillStyle = '#ffffff'\r\n        ctx.fillRect(x - 24 + 48 * norm - 1, barY - 1, 2, 5)\r\n\r\n        ctx.restore()\r\n    }\r\n    \r\n    // Helper function to convert numeric WASM state to string for internal use\r\n    getAnimStateName(state) {\r\n        switch(state) {\r\n            case 0: return 'idle'\r\n            case 1: return 'running'\r\n            case 2: return 'attacking'\r\n            case 3: return 'blocking'\r\n            case 4: return 'rolling'\r\n            case 5: return 'hurt'\r\n            case 6: return 'dead'\r\n            case 7: return 'jumping'\r\n            case 8: return 'doubleJumping'\r\n            case 9: return 'landing'\r\n            case 10: return 'wallSliding'\r\n            case 11: return 'dashing'\r\n            case 12: return 'chargingAttack'\r\n            default: return 'idle'\r\n        }\r\n    }\r\n\r\n    // Helper function to convert string state to numeric for CharacterAnimator\r\n    stateNameToNumber(stateName) {\r\n        switch(stateName) {\r\n            case 'idle': return 0\r\n            case 'running': return 1\r\n            case 'attacking': return 2\r\n            case 'blocking': return 3\r\n            case 'rolling': return 4\r\n            case 'hurt': return 5\r\n            case 'dead': return 6\r\n            case 'jumping': return 7\r\n            case 'doubleJumping': return 8\r\n            case 'landing': return 9\r\n            case 'wallSliding': return 10\r\n            case 'dashing': return 11\r\n            case 'chargingAttack': return 12\r\n            default: return 0\r\n        }\r\n    }\r\n\r\n    // Get animation state code for WASM integration\r\n    getAnimationStateCode() {\r\n        return this.stateNameToNumber(this.state);\r\n    }\r\n    \r\n    // Get current animation info for debugging\r\n    getAnimationInfo() {\r\n        return {\r\n            state: this.state, // Now directly reflecting the local state derived from WASM\r\n            animation: this.animator.controller.currentAnimation?.name,\r\n            frame: this.animator.controller.getCurrentFrame(),\r\n            stateTimer: globalThis.wasmExports?.get_player_state_timer?.() ?? 0, // Assuming WASM exports player state timer\r\n            invulnerable: globalThis.wasmExports?.get_is_invulnerable?.() === 1,\r\n            \r\n            // Enhanced procedural animation info\r\n            proceduralData: this.currentTransform?.debug || null,\r\n            skeletalData: this.currentTransform?.skeleton || null,\r\n            secondaryMotion: this.currentTransform?.secondaryMotion || null,\r\n            environmental: this.currentTransform?.environmental || null\r\n        }\r\n    }\r\n    \r\n    // Render secondary motion effects (cloth, hair, equipment)\r\n    renderSecondaryMotion(ctx, secondaryMotion) {\r\n        if (!secondaryMotion) {return}\r\n        \r\n        ctx.save()\r\n        ctx.globalAlpha = 0.8\r\n        \r\n        // Render cloth physics\r\n        if (secondaryMotion.cloth) {\r\n            ctx.strokeStyle = '#4A4A4A'\r\n            ctx.lineWidth = 2\r\n            ctx.beginPath()\r\n            secondaryMotion.cloth.forEach((point, index) => {\r\n                if (index === 0) {\r\n                    ctx.moveTo(point.position.x, point.position.y)\r\n                } else {\r\n                    ctx.lineTo(point.position.x, point.position.y)\r\n                }\r\n            })\r\n            ctx.stroke()\r\n        }\r\n        \r\n        // Render hair physics\r\n        if (secondaryMotion.hair) {\r\n            ctx.strokeStyle = '#8B4513'\r\n            ctx.lineWidth = 3\r\n            ctx.lineCap = 'round'\r\n            ctx.beginPath()\r\n            secondaryMotion.hair.forEach((segment, index) => {\r\n                if (index === 0) {\r\n                    ctx.moveTo(segment.position.x, segment.position.y)\r\n                } else {\r\n                    ctx.lineTo(segment.position.x, segment.position.y)\r\n                }\r\n            })\r\n            ctx.stroke()\r\n        }\r\n        \r\n        // Render equipment physics\r\n        if (secondaryMotion.equipment) {\r\n            secondaryMotion.equipment.forEach(item => {\r\n                ctx.fillStyle = item.type === 'sword' ? '#C0C0C0' : '#8B4513'\r\n                ctx.fillRect(item.position.x - 2, item.position.y - 1, 4, 2)\r\n            })\r\n        }\r\n        \r\n        ctx.restore()\r\n    }\r\n    \r\n    // Render skeletal overlay for debugging and enhanced visualization\r\n    renderSkeletalOverlay(ctx, skeleton) {\r\n        if (!skeleton) {return}\r\n        \r\n        ctx.save()\r\n        ctx.strokeStyle = '#00ff88'\r\n        ctx.fillStyle = '#ffff44'\r\n        ctx.lineWidth = 1\r\n        ctx.globalAlpha = 0.6\r\n        \r\n        // Draw bones\r\n        this.drawBone(ctx, skeleton.torso, skeleton.head)\r\n        this.drawBone(ctx, skeleton.torso, skeleton.pelvis)\r\n        \r\n        // Draw arms\r\n        this.drawBone(ctx, skeleton.leftArm.shoulder, skeleton.leftArm.elbow)\r\n        this.drawBone(ctx, skeleton.leftArm.elbow, skeleton.leftArm.hand)\r\n        this.drawBone(ctx, skeleton.rightArm.shoulder, skeleton.rightArm.elbow)\r\n        this.drawBone(ctx, skeleton.rightArm.elbow, skeleton.rightArm.hand)\r\n        \r\n        // Draw legs\r\n        this.drawBone(ctx, skeleton.leftLeg.hip, skeleton.leftLeg.knee)\r\n        this.drawBone(ctx, skeleton.leftLeg.knee, skeleton.leftLeg.foot)\r\n        this.drawBone(ctx, skeleton.rightLeg.hip, skeleton.rightLeg.knee)\r\n        this.drawBone(ctx, skeleton.rightLeg.knee, skeleton.rightLeg.foot)\r\n        \r\n        // Draw joints\r\n        const joints = [\r\n            skeleton.head, skeleton.torso, skeleton.pelvis,\r\n            skeleton.leftArm.shoulder, skeleton.leftArm.elbow, skeleton.leftArm.hand,\r\n            skeleton.rightArm.shoulder, skeleton.rightArm.elbow, skeleton.rightArm.hand,\r\n            skeleton.leftLeg.hip, skeleton.leftLeg.knee, skeleton.leftLeg.foot,\r\n            skeleton.rightLeg.hip, skeleton.rightLeg.knee, skeleton.rightLeg.foot\r\n        ]\r\n        \r\n        joints.forEach(joint => {\r\n            if (joint && typeof joint.x !== \"undefined\" && typeof joint.y !== \"undefined\") {\r\n                ctx.beginPath()\r\n                ctx.arc(joint.x, joint.y, 2, 0, Math.PI * 2)\r\n                ctx.fill()\r\n            }\r\n        })\r\n        \r\n        ctx.restore()\r\n    }\r\n    \r\n    // Helper method to draw bones\r\n    drawBone(ctx, start, end) {\r\n        if (!start || !end || typeof start.x === \"undefined\" || typeof end.x === \"undefined\") {return}\r\n        \r\n        ctx.beginPath()\r\n        ctx.moveTo(start.x, start.y)\r\n        ctx.lineTo(end.x, end.y)\r\n        ctx.stroke()\r\n    }\r\n    \r\n    // Input helper to convert keyboard to player input - 5-button combat system\r\n    static createInputFromKeys(keys) {\r\n        return {\r\n            // Movement\r\n            left: keys.a || keys.arrowleft,\r\n            right: keys.d || keys.arrowright,\r\n            up: keys.w || keys.arrowup,\r\n            down: keys.s || keys.arrowdown,\r\n            \r\n            // 5-Button Combat System\r\n            lightAttack: keys.j || keys['1'],        // A1 = Light Attack\r\n            heavyAttack: keys.k || keys['2'],        // A2 = Heavy Attack  \r\n            block: keys.shift || keys['3'],          // Block = Hold to guard, tap to parry\r\n            roll: keys.control || keys['4'],         // Roll = Dodge with i-frames\r\n            special: keys.l || keys['5'],            // Special = Hero move\r\n            \r\n            // Legacy support\r\n            attack: keys.j || keys[' '],             // Maps to light attack\r\n            jump: keys.space || keys.z\r\n        }\r\n    }\r\n    \r\n    // New movement methods for enhanced animations\r\n    // These methods now just trigger actions, WASM will handle state changes\r\n    jump() {\r\n        // WASM will drive the jump state, so we just trigger the action\r\n        globalThis.wasmExports?.on_jump?.(); // New WASM function call for jumping\r\n        if (this.particleSystem) {\r\n            this.particleSystem.createDustCloud(this.x, this.y + this.height/2)\r\n        }\r\n        \r\n        if (this.soundSystem) {\r\n            this.soundSystem.play('jump')\r\n        }\r\n    }\r\n    \r\n}\r\n\r\nexport default AnimatedPlayer\r\n\r\n// Static helper: attach a key to toggle debug overlays for a given player instance\r\nAnimatedPlayer.attachDebugToggle = function(playerInstance, key = 'F3') {\r\n    if (!playerInstance || playerInstance.__debugToggleAttached) { return }\r\n    const targetKey = (key || 'F3').toLowerCase()\r\n    const handler = (e) => {\r\n        const k = (e.key || '').toLowerCase()\r\n        if (k === targetKey.toLowerCase()) {\r\n            playerInstance.debugMode = !playerInstance.debugMode\r\n        }\r\n    }\r\n    try {\r\n        addEventListener('keydown', handler)\r\n        playerInstance.__debugToggleAttached = true\r\n    } catch {\r\n        // Ignore debug handler attachment errors\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["clamp","damp"],"mappings":"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"}