{"version":3,"file":"player-animator.min.js.map","sources":["../src/animation/animation-system.js","../src/animation/player/procedural/player-procedural-rig.js","../src/animation/player/procedural/modules/core-posture-module.js","../src/animation/player/procedural/modules/locomotion-module.js","../src/animation/player/procedural/modules/combat-module.js","../src/animation/player/procedural/modules/secondary-motion-module.js","../src/animation/player/procedural/modules/environment-module.js","../src/animation/player/procedural/player-procedural-animator.js","../src/animation/player-animator.js"],"sourcesContent":["// Advanced Animation System for Smooth Character and Object Animations\r\n// Provides sprite animations, procedural animations, and smooth transitions\r\n\r\nconst toMilliseconds = (value) => {\r\n    if (!Number.isFinite(value) || value <= 0) {return 0}\r\n    return value > 10 ? value : value * 1000\r\n}\r\n\r\nexport class AnimationFrame {\r\n    constructor(x, y, width, height, duration = 100) {\r\n        this.x = x\r\n        this.y = y\r\n        this.width = width\r\n        this.height = height\r\n        this.duration = duration // milliseconds\r\n    }\r\n}\r\n\r\nexport class Animation {\r\n    constructor(name, frames, options = {}) {\r\n        this.name = name\r\n        this.frames = frames\r\n        this.loop = options.loop !== null && options.loop !== void 0 ? options.loop : true\r\n        this.pingPong = options.pingPong || false\r\n        this.speed = options.speed || 1.0\r\n        this.onComplete = options.onComplete || null\r\n        this.onFrame = options.onFrame || null\r\n        \r\n        this.currentFrame = 0\r\n        this.elapsedTime = 0\r\n        this.direction = 1\r\n        this.isPlaying = false\r\n        this.hasCompleted = false\r\n    }\r\n\r\n    play() {\r\n        this.isPlaying = true\r\n        this.hasCompleted = false\r\n        this.currentFrame = 0\r\n        this.elapsedTime = 0\r\n        this.direction = 1\r\n    }\r\n\r\n    stop() {\r\n        this.isPlaying = false\r\n        this.reset()\r\n    }\r\n\r\n    pause() {\r\n        this.isPlaying = false\r\n    }\r\n\r\n    resume() {\r\n        this.isPlaying = true\r\n    }\r\n\r\n    reset() {\r\n        this.currentFrame = 0\r\n        this.elapsedTime = 0\r\n        this.direction = 1\r\n        this.hasCompleted = false\r\n    }\r\n\r\n    update(deltaTime) {\r\n        if (!this.isPlaying || this.frames.length === 0) {\r\n            return\r\n        }\r\n\r\n        const deltaMs = toMilliseconds(deltaTime) * this.speed\r\n        if (deltaMs <= 0) {\r\n            return\r\n        }\r\n\r\n        this.elapsedTime += deltaMs\r\n\r\n        if (this.frames.length <= 1) {\r\n            const singleFrame = this.frames[0]\r\n            if (!singleFrame) {\r\n                this.elapsedTime = 0\r\n                return\r\n            }\r\n\r\n            if (singleFrame.duration <= 0) {\r\n                if (!this.loop) {\r\n                    this.isPlaying = false\r\n                    this.hasCompleted = true\r\n                    if (this.onComplete) {this.onComplete()}\r\n                }\r\n                this.elapsedTime = 0\r\n                return\r\n            }\r\n\r\n            if (this.elapsedTime >= singleFrame.duration) {\r\n                if (this.loop) {\r\n                    this.elapsedTime = this.elapsedTime % singleFrame.duration\r\n                } else {\r\n                    this.currentFrame = 0\r\n                    this.isPlaying = false\r\n                    this.hasCompleted = true\r\n                    this.elapsedTime = 0\r\n                    if (this.onComplete) {this.onComplete()}\r\n                }\r\n            }\r\n            return\r\n        }\r\n\r\n        const maxSteps = this.frames.length * 3\r\n        let steps = 0\r\n\r\n        while (steps < maxSteps) {\r\n            const currentFrameData = this.frames[this.currentFrame]\r\n\r\n            if (!currentFrameData) {\r\n                this.currentFrame = Math.min(Math.max(this.currentFrame, 0), this.frames.length - 1)\r\n                this.elapsedTime = 0\r\n                break\r\n            }\r\n\r\n            if (currentFrameData.duration <= 0) {\r\n                if (!this.loop && this.currentFrame === this.frames.length - 1) {\r\n                    this.isPlaying = false\r\n                    this.hasCompleted = true\r\n                    if (this.onComplete) {this.onComplete()}\r\n                }\r\n                this.elapsedTime = 0\r\n                break\r\n            }\r\n\r\n            if (this.elapsedTime < currentFrameData.duration) {\r\n                break\r\n            }\r\n\r\n            this.elapsedTime -= currentFrameData.duration\r\n\r\n            const previousFrame = this.currentFrame\r\n            this.currentFrame += this.direction\r\n\r\n            if (this.pingPong) {\r\n                if (this.currentFrame >= this.frames.length || this.currentFrame < 0) {\r\n                    this.direction *= -1\r\n                    this.currentFrame = previousFrame + this.direction\r\n                }\r\n            } else if (this.currentFrame >= this.frames.length) {\r\n                if (this.loop) {\r\n                    this.currentFrame = 0\r\n                } else {\r\n                    this.currentFrame = this.frames.length - 1\r\n                    this.isPlaying = false\r\n                    this.hasCompleted = true\r\n                    this.elapsedTime = 0\r\n                    if (this.onComplete) {this.onComplete()}\r\n                    if (this.onFrame && this.currentFrame !== previousFrame) {\r\n                        const frameData = this.frames[this.currentFrame]\r\n                        if (frameData) {\r\n                            this.onFrame(this.currentFrame, frameData)\r\n                        }\r\n                    }\r\n                    break\r\n                }\r\n            } else if (this.currentFrame < 0) {\r\n                this.currentFrame = this.loop ? this.frames.length - 1 : 0\r\n            }\r\n\r\n            if (this.onFrame && this.currentFrame !== previousFrame) {\r\n                const frameData = this.frames[this.currentFrame]\r\n                if (frameData) {\r\n                    this.onFrame(this.currentFrame, frameData)\r\n                }\r\n            }\r\n\r\n            steps += 1\r\n        }\r\n    }\r\n\r\n    getCurrentFrame() {\r\n        if (this.frames.length === 0) {return null}\r\n        if (this.currentFrame < 0 || this.currentFrame >= this.frames.length) {return null}\r\n        return this.frames[this.currentFrame]\r\n    }\r\n\r\n    getProgress() {\r\n        if (this.frames.length <= 1) {return 0}\r\n        return this.currentFrame / (this.frames.length - 1)\r\n    }\r\n\r\n    // Utility: get frame by index with bounds checking\r\n    getFrameAt(index) {\r\n        if (index < 0 || index >= this.frames.length) {return null}\r\n        return this.frames[index]\r\n    }\r\n}\r\n\r\nexport class AnimationController {\r\n    constructor() {\r\n        this.animations = Object.create(null)\r\n        this._animationMap = new Map()\r\n        this.currentAnimation = null\r\n        this.blendTime = 0\r\n        this.blendFrom = null\r\n        this.blendProgress = 0\r\n        this.isTransitioning = false\r\n        this.transitionDuration = 0\r\n    }\r\n\r\n    addAnimation(nameOrAnimation, maybeAnimation) {\r\n        let name = null\r\n        let animation = null\r\n\r\n        if (typeof nameOrAnimation === 'string' && maybeAnimation) {\r\n            name = nameOrAnimation\r\n            animation = maybeAnimation\r\n        } else {\r\n            animation = nameOrAnimation\r\n            if (animation && typeof animation.name === 'string') {\r\n                name = animation.name\r\n            }\r\n        }\r\n\r\n        if (!name || !animation) {return}\r\n\r\n        this.animations[name] = animation\r\n        this._animationMap.set(name, animation)\r\n    }\r\n\r\n    getAnimation(name) {\r\n        if (!name) {return null}\r\n        return this._animationMap.get(name) || this.animations[name] || null\r\n    }\r\n\r\n    play(animationName, options = {}) {\r\n        const animation = this.getAnimation(animationName)\r\n        if (!animation) {\r\n            return\r\n        }\r\n\r\n        const hasCurrent = !!this.currentAnimation\r\n        const rawTransition = options.transition\r\n        const explicitDuration = typeof options.transitionDuration === 'number' ? options.transitionDuration : 0\r\n        let transitionDuration = 0\r\n\r\n        if (typeof rawTransition === 'number' && rawTransition > 0) {\r\n            transitionDuration = rawTransition\r\n        } else if ((rawTransition === true || explicitDuration > 0) && explicitDuration > 0) {\r\n            transitionDuration = explicitDuration\r\n        } else if (rawTransition === true && explicitDuration === 0) {\r\n            transitionDuration = 150\r\n        } else if (explicitDuration > 0) {\r\n            transitionDuration = explicitDuration\r\n        }\r\n\r\n        const blendDurationMs = toMilliseconds(transitionDuration)\r\n\r\n        if (hasCurrent && blendDurationMs > 0) {\r\n            this.blendFrom = this.currentAnimation\r\n            this.blendTime = blendDurationMs\r\n            this.blendProgress = 0\r\n            this.isTransitioning = true\r\n            this.transitionDuration = blendDurationMs\r\n        } else {\r\n            this.blendFrom = null\r\n            this.blendTime = 0\r\n            this.blendProgress = 0\r\n            this.isTransitioning = false\r\n            this.transitionDuration = 0\r\n        }\r\n\r\n        this.currentAnimation = animation\r\n        animation.play()\r\n    }\r\n\r\n    stop() {\r\n        if (this.currentAnimation) {\r\n            this.currentAnimation.stop()\r\n        }\r\n        this.isTransitioning = false\r\n        this.blendTime = 0\r\n        this.blendFrom = null\r\n        this.blendProgress = 0\r\n        this.transitionDuration = 0\r\n    }\r\n\r\n    update(deltaTime) {\r\n        const deltaMs = toMilliseconds(deltaTime)\r\n\r\n        if (this.blendTime > 0 && deltaMs > 0) {\r\n            this.blendProgress += deltaMs\r\n            if (this.blendProgress >= this.blendTime) {\r\n                this.blendTime = 0\r\n                this.blendFrom = null\r\n                this.blendProgress = 0\r\n                this.isTransitioning = false\r\n                this.transitionDuration = 0\r\n            }\r\n        }\r\n\r\n        if (this.currentAnimation) {\r\n            this.currentAnimation.update(deltaTime)\r\n        }\r\n    }\r\n\r\n    getCurrentFrame() {\r\n        if (!this.currentAnimation) {return null}\r\n        return this.currentAnimation.getCurrentFrame()\r\n    }\r\n\r\n    getBlendFrames() {\r\n        if (this.blendTime === 0 || !this.blendFrom) {\r\n            return { current: this.getCurrentFrame(), blend: null, blendFactor: 0 }\r\n        }\r\n\r\n        const blendFactor = this.blendTime > 0 ? Math.min(1, this.blendProgress / this.blendTime) : 0\r\n        return {\r\n            current: this.currentAnimation ? this.currentAnimation.getCurrentFrame() : null,\r\n            blend: this.blendFrom ? this.blendFrom.getCurrentFrame() : null,\r\n            blendFactor\r\n        }\r\n    }\r\n\r\n    isPlaying(animationName) {\r\n        return this.currentAnimation &&\r\n               this.currentAnimation.name === animationName &&\r\n               this.currentAnimation.isPlaying\r\n    }\r\n\r\n    setSpeed(speed) {\r\n        if (this.currentAnimation) {\r\n            this.currentAnimation.speed = speed\r\n        }\r\n    }\r\n}\r\n\r\nexport class ProceduralAnimator {\r\n    constructor() {\r\n        this.animations = Object.create(null)\r\n    }\r\n\r\n    addAnimation(name, updateFn, options = {}) {\r\n        if (!name || typeof updateFn !== 'function') {return null}\r\n\r\n        const entry = {\r\n            name,\r\n            update: updateFn,\r\n            duration: typeof options.duration === 'number' ? options.duration : null,\r\n            loop: options.loop !== undefined ? options.loop : true,\r\n            isPlaying: options.autoStart === undefined ? true : options.autoStart !== false,\r\n            elapsed: 0,\r\n            meta: options.meta ?? null\r\n        }\r\n\r\n        this.animations[name] = entry\r\n        return entry\r\n    }\r\n\r\n    play(name) {\r\n        const animation = this.animations[name]\r\n        if (!animation) {return}\r\n        animation.isPlaying = true\r\n        animation.elapsed = 0\r\n    }\r\n\r\n    stop(name) {\r\n        const animation = this.animations[name]\r\n        if (!animation) {return}\r\n        animation.isPlaying = false\r\n        animation.elapsed = 0\r\n    }\r\n\r\n    update(deltaTime) {\r\n        const dt = Number.isFinite(deltaTime) ? deltaTime : 0\r\n\r\n        for (const animation of Object.values(this.animations)) {\r\n            if (!animation || animation.isPlaying === false || typeof animation.update !== 'function') {\r\n                continue\r\n            }\r\n\r\n            animation.elapsed += dt\r\n            animation.update(dt, animation)\r\n\r\n            if (animation.duration && animation.duration > 0 && animation.elapsed >= animation.duration) {\r\n                if (animation.loop) {\r\n                    animation.elapsed = animation.elapsed % animation.duration\r\n                } else {\r\n                    animation.isPlaying = false\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Enhanced breathing animation with state-based modulation\r\n    createBreathingAnimation(options = {}) {\r\n        const {\r\n            baseScale = 1.0,\r\n            intensity = 0.015,\r\n            speed = 2.0,\r\n            asymmetry = 0.2\r\n        } = options\r\n\r\n        return {\r\n            time: 0,\r\n            phase: 0,\r\n            breathRate: speed,\r\n            currentIntensity: intensity,\r\n            depthMod: 1.0,\r\n            asymmetryOffset: 0,\r\n            _buf: {\r\n                scaleX: baseScale,\r\n                scaleY: baseScale,\r\n                offsetY: 0,\r\n                chestExpansion: 0,\r\n                phase: 0,\r\n                intensity: 0\r\n            },\r\n\r\n            // State-based modulation\r\n            modulateForState(state) {\r\n                switch(state) {\r\n                    case 'running':\r\n                        this.depthMod = 0.3\r\n                        this.breathRate = speed * 3.0\r\n                        break\r\n                    case 'attacking':\r\n                        this.depthMod = 0.5\r\n                        this.breathRate = speed * 1.8\r\n                        break\r\n                    case 'blocking':\r\n                        this.depthMod = 0.2\r\n                        this.breathRate = speed * 1.3\r\n                        break\r\n                    case 'hurt':\r\n                        this.depthMod = 0.1\r\n                        this.breathRate = speed * 0.5\r\n                        break\r\n                    case 'dead':\r\n                        this.depthMod = 0.0\r\n                        this.breathRate = 0.0\r\n                        break\r\n                    default: // idle, rolling\r\n                        this.depthMod = 1.0\r\n                        this.breathRate = speed\r\n                }\r\n            },\r\n\r\n            update(deltaTime) {\r\n                const res = this._buf\r\n\r\n                if (this.breathRate <= 0) {\r\n                    res.scaleX = baseScale\r\n                    res.scaleY = baseScale\r\n                    res.offsetY = 0\r\n                    res.chestExpansion = 0\r\n                    res.phase = 0\r\n                    res.intensity = 0\r\n                    return res\r\n                }\r\n\r\n                this.time += deltaTime * this.breathRate\r\n                this.phase = Math.sin(this.time)\r\n\r\n                // Calculate breathing with realistic parameters\r\n                const currentIntensity = this.currentIntensity * this.depthMod\r\n                const breathScaleX = baseScale + this.phase * currentIntensity\r\n                const breathScaleY = baseScale + this.phase * currentIntensity * 0.7\r\n\r\n                // Add slight asymmetry for more natural feel\r\n                const asymmetryFactor = Math.sin(this.time * 0.7) * asymmetry\r\n                const finalScaleX = breathScaleX + asymmetryFactor * currentIntensity * 0.3\r\n\r\n                // Chest expansion effect (subtle upward movement)\r\n                const chestExpansion = this.phase * currentIntensity * 2\r\n\r\n                // Smooth transitions\r\n                const smoothFactor = 1 - Math.exp(-deltaTime * 5)\r\n                this.currentIntensity = this.currentIntensity + (currentIntensity - this.currentIntensity) * smoothFactor\r\n\r\n                res.scaleX = finalScaleX\r\n                res.scaleY = breathScaleY\r\n                res.offsetY = -chestExpansion * 0.5\r\n                res.chestExpansion = chestExpansion\r\n                res.phase = this.phase\r\n                res.intensity = currentIntensity\r\n                return res\r\n            }\r\n        }\r\n    }\r\n\r\n    // Bobbing animation for floating objects\r\n    createBobbingAnimation(amplitude = 5, speed = 2) {\r\n        return {\r\n            time: 0,\r\n            _buf: { offsetY: 0, rotation: 0 },\r\n            update(deltaTime) {\r\n                this.time += deltaTime * speed\r\n                const res = this._buf\r\n                res.offsetY = Math.sin(this.time) * amplitude\r\n                res.rotation = Math.sin(this.time * 0.5) * 0.05\r\n                return res\r\n            }\r\n        }\r\n    }\r\n\r\n    // Squash and stretch for impacts and jumps\r\n    createSquashStretch(intensity = 0.3, duration = 0.2) {\r\n        return {\r\n            time: 0,\r\n            active: false,\r\n            _buf: { scaleX: 1, scaleY: 1 },\r\n            trigger() {\r\n                this.time = 0\r\n                this.active = true\r\n            },\r\n            update(deltaTime) {\r\n                const res = this._buf\r\n\r\n                if (!this.active) {\r\n                    res.scaleX = 1\r\n                    res.scaleY = 1\r\n                    return res\r\n                }\r\n\r\n                this.time += deltaTime\r\n                const progress = Math.min(this.time / duration, 1)\r\n\r\n                if (progress >= 1) {\r\n                    this.active = false\r\n                    res.scaleX = 1\r\n                    res.scaleY = 1\r\n                    return res\r\n                }\r\n\r\n                // Elastic easing\r\n                const t = progress\r\n                const p = 0.3\r\n                const s = p / 4\r\n                const postFix = 2**(-10 * t) * Math.sin((t - s) * (2 * Math.PI) / p) + 1\r\n\r\n                const squash = 1 - postFix * intensity\r\n                const stretch = 1 + postFix * intensity * 0.5\r\n\r\n                res.scaleX = progress < 0.5 ? stretch : squash\r\n                res.scaleY = progress < 0.5 ? squash : stretch\r\n                return res\r\n            }\r\n        }\r\n    }\r\n\r\n    // Wobble effect for jelly-like movement\r\n    createWobble(frequency = 10, damping = 0.8, intensity = 0.1) {\r\n        return {\r\n            velocity: 0,\r\n            displacement: 0,\r\n            _buf: { scaleX: 1, scaleY: 1, rotation: 0 },\r\n            update(deltaTime, force = 0) {\r\n                // Spring physics\r\n                const springForce = -frequency * this.displacement\r\n                const dampingForce = -damping * this.velocity\r\n\r\n                this.velocity += (springForce + dampingForce + force) * deltaTime\r\n                this.displacement += this.velocity * deltaTime\r\n\r\n                const res = this._buf\r\n                res.scaleX = 1 + this.displacement * intensity\r\n                res.scaleY = 1 - this.displacement * intensity * 0.5\r\n                res.rotation = this.displacement * 0.1\r\n                return res\r\n            },\r\n            impulse(force) {\r\n                this.velocity += force\r\n            }\r\n        }\r\n    }\r\n\r\n    // Anticipation animation for attacks\r\n    createAnticipation(duration = 0.3, intensity = 0.15) {\r\n        return {\r\n            time: 0,\r\n            active: false,\r\n            phase: 'idle', // idle, anticipation, action, recovery\r\n            _buf: { scaleX: 1, scaleY: 1, offsetX: 0 },\r\n            trigger() {\r\n                this.time = 0\r\n                this.active = true\r\n                this.phase = 'anticipation'\r\n            },\r\n            update(deltaTime) {\r\n                const res = this._buf\r\n                if (!this.active) {\r\n                    res.scaleX = 1\r\n                    res.scaleY = 1\r\n                    res.offsetX = 0\r\n                    return res\r\n                }\r\n\r\n                this.time += deltaTime\r\n\r\n                if (this.phase === 'anticipation') {\r\n                    const progress = Math.min(this.time / (duration * 0.4), 1)\r\n                    const eased = 1 - Math.cos(progress * Math.PI * 0.5)\r\n\r\n                    if (progress >= 1) {\r\n                        this.phase = 'action'\r\n                        this.time = 0\r\n                    }\r\n\r\n                    res.scaleX = 1 - eased * intensity\r\n                    res.scaleY = 1 + eased * intensity * 0.5\r\n                    res.offsetX = -eased * 10\r\n                    return res\r\n                } else if (this.phase === 'action') {\r\n                    const progress = Math.min(this.time / (duration * 0.2), 1)\r\n                    const eased = Math.sin(progress * Math.PI * 0.5)\r\n\r\n                    if (progress >= 1) {\r\n                        this.phase = 'recovery'\r\n                        this.time = 0\r\n                    }\r\n\r\n                    res.scaleX = 1 + eased * intensity * 2\r\n                    res.scaleY = 1 - eased * intensity\r\n                    res.offsetX = eased * 20\r\n                    return res\r\n                } else if (this.phase === 'recovery') {\r\n                    const progress = Math.min(this.time / (duration * 0.4), 1)\r\n                    const eased = 1 - (1 - progress)**3\r\n\r\n                    if (progress >= 1) {\r\n                        this.active = false\r\n                        this.phase = 'idle'\r\n                    }\r\n\r\n                    res.scaleX = 1 + (1 - eased) * intensity * 0.5\r\n                    res.scaleY = 1 - (1 - eased) * intensity * 0.25\r\n                    res.offsetX = (1 - eased) * 10\r\n                    return res\r\n                }\r\n\r\n                res.scaleX = 1\r\n                res.scaleY = 1\r\n                res.offsetX = 0\r\n                return res\r\n            }\r\n        }\r\n    }\r\n\r\n    // Advanced Inverse Kinematics for limbs and weapon positioning\r\n    createAdvancedIK(options = {}) {\r\n        const {\r\n            armLength = 25,\r\n            forearmLength = 20,\r\n            damping = 0.8,\r\n            stiffness = 0.5,\r\n            maxReach = 40\r\n        } = options\r\n\r\n        return {\r\n            shoulder: { x: 0, y: 0 },\r\n            elbow: { x: 0, y: 0 },\r\n            hand: { x: 0, y: 0 },\r\n            target: { x: 0, y: 0 },\r\n            targetVelocity: { x: 0, y: 0 },\r\n            _buf: {\r\n                shoulder: { x: 0, y: 0 },\r\n                elbow: { x: 0, y: 0 },\r\n                hand: { x: 0, y: 0 },\r\n                target: { x: 0, y: 0 },\r\n                reach: 0,\r\n                stiffness: 0\r\n            },\r\n\r\n            // Two-bone IK solver (CCD - Cyclic Coordinate Descent)\r\n            solveIK(targetX, targetY, shoulderX, shoulderY) {\r\n                this.target.x = targetX\r\n                this.target.y = targetY\r\n                this.shoulder.x = shoulderX\r\n                this.shoulder.y = shoulderY\r\n\r\n                // Calculate distance to target\r\n                const dx = targetX - shoulderX\r\n                const dy = targetY - shoulderY\r\n                const distance = Math.sqrt(dx * dx + dy * dy)\r\n\r\n                // Clamp to maximum reach\r\n                const clampedDistance = Math.min(distance, maxReach)\r\n                const scale = clampedDistance / distance\r\n                const clampedTargetX = shoulderX + dx * scale\r\n                const clampedTargetY = shoulderY + dy * scale\r\n\r\n                // Solve for elbow and hand positions\r\n                const totalLength = armLength + forearmLength\r\n                const cosAngle = Math.max(-1, Math.min(1, clampedDistance / totalLength))\r\n\r\n                // Law of cosines for elbow angle\r\n                const elbowAngle = Math.acos(cosAngle)\r\n                const shoulderAngle = Math.atan2(clampedTargetY - shoulderY, clampedTargetX - shoulderX)\r\n\r\n                // Position elbow\r\n                this.elbow.x = shoulderX + Math.cos(shoulderAngle - elbowAngle * 0.5) * armLength\r\n                this.elbow.y = shoulderY + Math.sin(shoulderAngle - elbowAngle * 0.5) * armLength\r\n\r\n                // Position hand\r\n                this.hand.x = this.elbow.x + Math.cos(shoulderAngle + elbowAngle * 0.5) * forearmLength\r\n                this.hand.y = this.elbow.y + Math.sin(shoulderAngle + elbowAngle * 0.5) * forearmLength\r\n\r\n                const res = this._buf\r\n                res.shoulder.x = this.shoulder.x\r\n                res.shoulder.y = this.shoulder.y\r\n                res.elbow.x = this.elbow.x\r\n                res.elbow.y = this.elbow.y\r\n                res.hand.x = this.hand.x\r\n                res.hand.y = this.hand.y\r\n                res.target.x = clampedTargetX\r\n                res.target.y = clampedTargetY\r\n                res.reach = clampedDistance / totalLength\r\n                return res\r\n            },\r\n\r\n            // Smooth IK with velocity prediction\r\n            update(deltaTime, targetX, targetY, shoulderX, shoulderY) {\r\n                // Predict target position based on velocity\r\n                const predictedTargetX = targetX + this.targetVelocity.x * deltaTime * 0.1\r\n                const predictedTargetY = targetY + this.targetVelocity.y * deltaTime * 0.1\r\n\r\n                // Update target velocity for smoothing\r\n                this.targetVelocity.x = (predictedTargetX - this.target.x) / deltaTime * damping\r\n                this.targetVelocity.y = (predictedTargetY - this.target.y) / deltaTime * damping\r\n\r\n                // Solve IK with damping\r\n                const solution = this.solveIK(predictedTargetX, predictedTargetY, shoulderX, shoulderY)\r\n\r\n                // Apply stiffness damping to joints\r\n                const stiffnessFactor = 1 - Math.exp(-stiffness * deltaTime)\r\n\r\n                const res = this._buf\r\n                res.shoulder.x = solution.shoulder.x\r\n                res.shoulder.y = solution.shoulder.y\r\n                res.elbow.x = solution.elbow.x\r\n                res.elbow.y = solution.elbow.y\r\n                res.hand.x = solution.hand.x\r\n                res.hand.y = solution.hand.y\r\n                res.target.x = solution.target.x\r\n                res.target.y = solution.target.y\r\n                res.reach = solution.reach\r\n                res.stiffness = stiffnessFactor\r\n                return res\r\n            }\r\n        }\r\n    }\r\n\r\n    // Secondary motion system for cloth, hair, and equipment\r\n    createSecondaryMotion(options = {}) {\r\n        const {\r\n            segments = 5,\r\n            length = 15,\r\n            damping = 0.85,\r\n            gravity = 0.5,\r\n            windStrength = 0.1\r\n        } = options\r\n\r\n        return {\r\n            segments: [],\r\n            anchorPoint: { x: 0, y: 0 },\r\n            windTime: 0,\r\n            _segBuf: [],\r\n\r\n            initialize(anchorX, anchorY) {\r\n                this.anchorPoint = { x: anchorX, y: anchorY }\r\n                this.segments = []\r\n\r\n                // Create chain segments\r\n                for (let i = 0; i < segments; i++) {\r\n                    this.segments.push({\r\n                        x: anchorX,\r\n                        y: anchorY + i * (length / segments),\r\n                        vx: 0,\r\n                        vy: 0,\r\n                        prevX: anchorX,\r\n                        prevY: anchorY + i * (length / segments)\r\n                    })\r\n                }\r\n            },\r\n\r\n            update(deltaTime, anchorX, anchorY, windDirection = 0) {\r\n                this.anchorPoint.x = anchorX\r\n                this.anchorPoint.y = anchorY\r\n                this.windTime += deltaTime\r\n\r\n                // Update anchor point\r\n                this.segments[0].x = anchorX\r\n                this.segments[0].y = anchorY\r\n\r\n                // Simulate chain physics\r\n                for (let i = 1; i < this.segments.length; i++) {\r\n                    const segment = this.segments[i]\r\n                    const prevSegment = this.segments[i - 1]\r\n\r\n                    // Calculate desired position (maintain distance from previous segment)\r\n                    const dx = segment.x - prevSegment.x\r\n                    const dy = segment.y - prevSegment.y\r\n                    const distance = Math.sqrt(dx * dx + dy * dy)\r\n                    const targetDistance = length / segments\r\n\r\n                    if (distance > 0) {\r\n                        const ratio = targetDistance / distance\r\n                        segment.x = prevSegment.x + dx * ratio\r\n                        segment.y = prevSegment.y + dy * ratio\r\n                    }\r\n\r\n                    // Apply gravity\r\n                    segment.vy += gravity * deltaTime\r\n\r\n                    // Apply wind\r\n                    const windX = Math.sin(this.windTime * 2 + windDirection) * windStrength\r\n                    const windY = Math.cos(this.windTime * 1.5 + windDirection) * windStrength * 0.5\r\n                    segment.vx += windX * deltaTime\r\n                    segment.vy += windY * deltaTime\r\n\r\n                    // Verlet integration for smooth movement\r\n                    const tempX = segment.x\r\n                    const tempY = segment.y\r\n                    segment.x += (segment.x - segment.prevX) * damping + segment.vx * deltaTime\r\n                    segment.y += (segment.y - segment.prevY) * damping + segment.vy * deltaTime\r\n                    segment.prevX = tempX\r\n                    segment.prevY = tempY\r\n\r\n                    // Dampen velocity\r\n                    segment.vx *= damping\r\n                    segment.vy *= damping\r\n                }\r\n\r\n                if (!this._segBuf || this._segBuf.length !== this.segments.length) {\r\n                    this._segBuf = new Array(this.segments.length)\r\n                }\r\n                for (let i = 0; i < this.segments.length; i++) {\r\n                    this._segBuf[i] = this.segments[i]\r\n                }\r\n                return this._segBuf\r\n            },\r\n\r\n            applyForce(forceX, forceY, segmentIndex = -1) {\r\n                if (segmentIndex === -1) {\r\n                    // Apply to all segments\r\n                    this.segments.forEach(segment => {\r\n                        segment.vx += forceX\r\n                        segment.vy += forceY\r\n                    })\r\n                } else if (segmentIndex < this.segments.length) {\r\n                    this.segments[segmentIndex].vx += forceX\r\n                    this.segments[segmentIndex].vy += forceY\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Momentum-based animation adjustments\r\n    createMomentumSystem(options = {}) {\r\n        const {\r\n            maxMomentum = 10,\r\n            momentumDecay = 0.9,\r\n            momentumInfluence = 0.3,\r\n            directionSmoothing = 0.8\r\n        } = options\r\n\r\n        return {\r\n            momentum: { x: 0, y: 0 },\r\n            smoothedDirection: { x: 0, y: 0 },\r\n            lastVelocity: { x: 0, y: 0 },\r\n            _buf: {\r\n                momentum: { x: 0, y: 0 },\r\n                smoothedDirection: { x: 0, y: 0 },\r\n                leanAngle: 0,\r\n                bounceFactor: 0,\r\n                stretchFactor: 0\r\n            },\r\n\r\n            update(deltaTime, velocityX, velocityY, isGrounded = true) {\r\n                // Calculate velocity change\r\n                const deltaVx = velocityX - this.lastVelocity.x\r\n                const deltaVy = velocityY - this.lastVelocity.y\r\n                this.lastVelocity = { x: velocityX, y: velocityY }\r\n\r\n                // Build momentum from acceleration\r\n                const acceleration = Math.sqrt(deltaVx * deltaVx + deltaVy * deltaVy)\r\n                if (acceleration > 0.1) {\r\n                    const momentumStrength = Math.min(acceleration * momentumInfluence, maxMomentum)\r\n                    const momentumDirX = deltaVx / acceleration\r\n                    const momentumDirY = deltaVy / acceleration\r\n\r\n                    this.momentum.x += momentumDirX * momentumStrength\r\n                    this.momentum.y += momentumDirY * momentumStrength\r\n                }\r\n\r\n                // Apply momentum decay\r\n                this.momentum.x *= momentumDecay\r\n                this.momentum.y *= momentumDecay\r\n\r\n                // Clamp momentum\r\n                const momentumMagnitude = Math.sqrt(this.momentum.x * this.momentum.x + this.momentum.y * this.momentum.y)\r\n                if (momentumMagnitude > maxMomentum) {\r\n                    this.momentum.x = (this.momentum.x / momentumMagnitude) * maxMomentum\r\n                    this.momentum.y = (this.momentum.y / momentumMagnitude) * maxMomentum\r\n                }\r\n\r\n                // Smooth direction changes\r\n                const currentDirection = { x: velocityX, y: velocityY }\r\n                const directionMagnitude = Math.sqrt(currentDirection.x * currentDirection.x + currentDirection.y * currentDirection.y)\r\n\r\n                if (directionMagnitude > 0.1) {\r\n                    const normalizedDir = {\r\n                        x: currentDirection.x / directionMagnitude,\r\n                        y: currentDirection.y / directionMagnitude\r\n                    }\r\n\r\n                    this.smoothedDirection.x = this.smoothedDirection.x * (1 - directionSmoothing) + normalizedDir.x * directionSmoothing\r\n                    this.smoothedDirection.y = this.smoothedDirection.y * (1 - directionSmoothing) + normalizedDir.y * directionSmoothing\r\n                }\r\n\r\n                const res = this._buf\r\n                res.momentum.x = this.momentum.x\r\n                res.momentum.y = this.momentum.y\r\n                res.smoothedDirection.x = this.smoothedDirection.x\r\n                res.smoothedDirection.y = this.smoothedDirection.y\r\n                res.leanAngle = isGrounded ? Math.atan2(this.momentum.x, Math.abs(this.momentum.y) + 1) * 0.3 : 0\r\n                res.bounceFactor = momentumMagnitude * 0.1\r\n                res.stretchFactor = Math.max(0, momentumMagnitude * 0.05)\r\n                return res\r\n            },\r\n\r\n            addImpulse(impulseX, impulseY) {\r\n                this.momentum.x += impulseX\r\n                this.momentum.y += impulseY\r\n            }\r\n        }\r\n    }\r\n\r\n    // Trail effect for fast movement\r\n    createTrailEffect(maxTrails = 5, fadeSpeed = 0.3) {\r\n        return {\r\n            trails: [],\r\n            lastPosition: null,\r\n            update(deltaTime, currentPosition) {\r\n                // Fade existing trails\r\n                this.trails = this.trails.filter(trail => {\r\n                    trail.alpha -= fadeSpeed * deltaTime\r\n                    return trail.alpha > 0\r\n                })\r\n\r\n                // Add new trail if moved enough\r\n                if (this.lastPosition) {\r\n                    const dx = currentPosition.x - this.lastPosition.x\r\n                    const dy = currentPosition.y - this.lastPosition.y\r\n                    const distance = Math.sqrt(dx * dx + dy * dy)\r\n\r\n                    if (distance > 10) {\r\n                        this.trails.push({\r\n                            x: this.lastPosition.x,\r\n                            y: this.lastPosition.y,\r\n                            alpha: 0.5,\r\n                            scale: 0.8\r\n                        })\r\n\r\n                        if (this.trails.length > maxTrails) {\r\n                            this.trails.shift()\r\n                        }\r\n\r\n                        this.lastPosition = { ...currentPosition }\r\n                    }\r\n                } else {\r\n                    this.lastPosition = { ...currentPosition }\r\n                }\r\n\r\n                return this.trails\r\n            },\r\n            clear() {\r\n                this.trails = []\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class CharacterAnimator {\r\n    constructor() {\r\n        this.controller = new AnimationController()\r\n        this.procedural = new ProceduralAnimator()\r\n        this.animations = Object.create(null)\r\n        this.currentAnimation = null\r\n        \r\n        // Event system integration\r\n        this.eventSystem = null\r\n        this.eventListeners = new Map()\r\n\r\n        // Enhanced procedural animation instances\r\n        this.breathing = this.procedural.createBreathingAnimation({\r\n            intensity: 0.012,\r\n            speed: 1.8,\r\n            asymmetry: 0.15\r\n        })\r\n        this.squashStretch = this.procedural.createSquashStretch()\r\n        this.wobble = this.procedural.createWobble()\r\n        this.anticipation = this.procedural.createAnticipation()\r\n        this.trail = this.procedural.createTrailEffect()\r\n\r\n        // New advanced systems\r\n        this.advancedIK = this.procedural.createAdvancedIK({\r\n            armLength: 22,\r\n            forearmLength: 18,\r\n            damping: 0.75,\r\n            stiffness: 0.4\r\n        })\r\n        this.secondaryMotion = this.procedural.createSecondaryMotion({\r\n            segments: 4,\r\n            length: 12,\r\n            damping: 0.82,\r\n            stiffness: 0.25,\r\n            gravity: 0.3,\r\n            windStrength: 0.08\r\n        })\r\n        this.momentumSystem = this.procedural.createMomentumSystem({\r\n            maxMomentum: 8,\r\n            momentumDecay: 0.88,\r\n            momentumInfluence: 0.25,\r\n            directionSmoothing: 0.75\r\n        })\r\n        \r\n        // State\r\n        this.state = 0 // numeric state code; default to idle\r\n        this.stateName = 'idle'\r\n        this.facing = 'right'\r\n        this.moving = false\r\n        this.attacking = false\r\n        this.blocking = false\r\n        this.rolling = false\r\n        this.hurt = false\r\n        this.jumping = false\r\n        this.doubleJumping = false\r\n        this.wallSliding = false\r\n        this.dashing = false\r\n        this.charging = false\r\n        this.dead = false\r\n        this.landing = false\r\n        \r\n        // Animation blending\r\n        this.blendFactors = {\r\n            idle: 1,\r\n            running: 0,\r\n            attacking: 0,\r\n            blocking: 0,\r\n            rolling: 0,\r\n            hurt: 0,\r\n            jumping: 0,\r\n            doubleJumping: 0,\r\n            landing: 0,\r\n            wallSliding: 0,\r\n            dashing: 0,\r\n            chargingAttack: 0,\r\n            dead: 0\r\n        }\r\n        \r\n        this.targetBlendFactors = { ...this.blendFactors }\r\n        this.blendSpeed = 0.2\r\n\r\n        // Internal timers for temporary states\r\n        this.hurtTimer = 0\r\n        this.attackTimer = 0\r\n        this.rollTimer = 0\r\n    }\r\n\r\n    resetActionTimers() {\r\n        this.hurtTimer = 0\r\n        this.attackTimer = 0\r\n        this.rollTimer = 0\r\n    }\r\n\r\n    addAnimation(name, animation) {\r\n        if (!animation) {return}\r\n        const key = name || (animation && animation.name)\r\n        if (!key) {return}\r\n        this.animations[key] = animation\r\n        this.controller.addAnimation(key, animation)\r\n    }\r\n\r\n    play(name, options = {}) {\r\n        if (!name || !this.animations[name]) {return}\r\n        this.controller.play(name, options)\r\n        this.currentAnimation = this.controller.currentAnimation\r\n        if (typeof name === 'string') {\r\n            this.stateName = name\r\n        }\r\n    }\r\n\r\n    // Helper function to convert numeric WASM state to string for internal use\r\n    getAnimStateName(state) {\r\n        switch(state) {\r\n            case 0: return 'idle'\r\n            case 1: return 'running'\r\n            case 2: return 'attacking'\r\n            case 3: return 'blocking'\r\n            case 4: return 'rolling'\r\n            case 5: return 'hurt'\r\n            case 6: return 'dead'\r\n            case 7: return 'jumping'\r\n            case 8: return 'doubleJumping'\r\n            case 9: return 'landing'\r\n            case 10: return 'wallSliding'\r\n            case 11: return 'dashing'\r\n            case 12: return 'chargingAttack'\r\n            default: return 'idle'\r\n        }\r\n    }\r\n\r\n    setAnimState(newState) {\r\n        if (this.state === newState) {return}\r\n        this.resetActionTimers()\r\n\r\n        const previousState = this.state\r\n        const previousStateName = this.stateName\r\n        \r\n        this.state = newState\r\n        this.stateName = this.getAnimStateName(newState)\r\n        \r\n        // Emit state change event\r\n        this.emit('stateChange', {\r\n            fromState: previousState,\r\n            toState: newState,\r\n            fromStateName: previousStateName,\r\n            toStateName: this.stateName\r\n        })\r\n        \r\n        // Update target blend factors\r\n        Object.keys(this.targetBlendFactors).forEach(key => {\r\n            this.targetBlendFactors[key] = 0\r\n        })\r\n        this.targetBlendFactors[this.stateName] = 1\r\n        \r\n        // Play animation based on state\r\n        this.play(this.stateName, { transition: 0.1 })\r\n        \r\n        // Trigger procedural animations\r\n        switch(newState) {\r\n            case 2: // Attacking\r\n                this.anticipation.trigger()\r\n                break\r\n            case 5: // Hurt\r\n                this.squashStretch.trigger()\r\n                this.wobble.impulse(10)\r\n                break\r\n            case 4: // Rolling\r\n                this.trail.clear()\r\n                break\r\n            case 7: // Jumping\r\n                this.squashStretch.trigger()\r\n                break\r\n            case 8: // DoubleJumping\r\n                this.wobble.impulse(5)\r\n                this.trail.clear()\r\n                break\r\n            case 9: // Landing\r\n                this.squashStretch.trigger()\r\n                this.wobble.impulse(15)\r\n                break\r\n            case 11: // Dashing\r\n                this.trail.clear()\r\n                break\r\n            case 12: // ChargingAttack\r\n                this.anticipation.trigger()\r\n                this.wobble.impulse(3)\r\n                break\r\n            case 6: // Death\r\n                this.squashStretch.trigger()\r\n                this.wobble.impulse(20)\r\n                break\r\n        }\r\n    }\r\n\r\n    update(deltaTime, position, velocity = { x: 0, y: 0 }, isGrounded = true) {\r\n        // Update state timers\r\n        if (this.hurtTimer > 0) {\r\n            this.hurtTimer -= deltaTime\r\n            if (this.hurtTimer <= 0 && this.state === 5) {\r\n                this.setAnimState(0) // Idle\r\n            }\r\n        }\r\n        if (this.attackTimer > 0) {\r\n            this.attackTimer -= deltaTime\r\n            if (this.attackTimer <= 0 && this.state === 2) {\r\n                this.setAnimState(0) // Idle\r\n            }\r\n        }\r\n        if (this.rollTimer > 0) {\r\n            this.rollTimer -= deltaTime\r\n            if (this.rollTimer <= 0 && this.state === 4) {\r\n                this.setAnimState(0) // Idle\r\n            }\r\n        }\r\n\r\n        // Update animation controller\r\n        this.controller.update(deltaTime)\r\n\r\n        // Update blend factors\r\n        Object.keys(this.blendFactors).forEach(key => {\r\n            const diff = this.targetBlendFactors[key] - this.blendFactors[key]\r\n            this.blendFactors[key] += diff * this.blendSpeed\r\n        })\r\n\r\n        // Update enhanced breathing with state modulation\r\n        this.breathing.modulateForState(this.stateName)\r\n        const breathing = this.breathing.update(deltaTime)\r\n\r\n        // Update momentum system\r\n        const momentumData = this.momentumSystem.update(deltaTime, velocity.x, velocity.y, isGrounded)\r\n\r\n        // Update secondary motion (initialize if needed)\r\n        if (this.secondaryMotion.segments.length === 0) {\r\n            this.secondaryMotion.initialize(position.x, position.y - 8)\r\n        }\r\n        const secondaryMotion = this.secondaryMotion.update(deltaTime, position.x, position.y - 8)\r\n\r\n        // Update other procedural animations\r\n        const squashStretch = this.squashStretch.update(deltaTime)\r\n        const wobble = this.wobble.update(deltaTime)\r\n        const anticipation = this.anticipation.update(deltaTime)\r\n        const trails = this.trail.update(deltaTime, position)\r\n\r\n        // Combine all transformations\r\n        const transform = {\r\n            scaleX: 1,\r\n            scaleY: 1,\r\n            rotation: 0,\r\n            offsetX: 0,\r\n            offsetY: 0,\r\n            trails: trails,\r\n            secondaryMotion: secondaryMotion,\r\n            momentum: momentumData,\r\n            ik: null // Will be set if weapon/arms are used\r\n        }\r\n\r\n        // Apply enhanced breathing\r\n        if (this.blendFactors.idle > 0 || this.blendFactors.running > 0) {\r\n            transform.scaleX *= breathing.scaleX\r\n            transform.scaleY *= breathing.scaleY\r\n            transform.offsetY += breathing.offsetY\r\n        }\r\n\r\n        // Apply momentum-based adjustments\r\n        transform.rotation += momentumData.leanAngle\r\n        transform.scaleY *= (1 + momentumData.stretchFactor)\r\n        transform.offsetY += momentumData.bounceFactor * Math.sin(Date.now() * 0.01)\r\n\r\n        // Apply squash/stretch\r\n        transform.scaleX *= squashStretch.scaleX\r\n        transform.scaleY *= squashStretch.scaleY\r\n\r\n        // Apply wobble\r\n        transform.scaleX *= wobble.scaleX\r\n        transform.scaleY *= wobble.scaleY\r\n        transform.rotation += wobble.rotation\r\n\r\n        // Apply anticipation\r\n        if (this.stateName === 'attacking' || this.stateName === 'chargingAttack') {\r\n            transform.scaleX *= anticipation.scaleX\r\n            transform.scaleY *= anticipation.scaleY\r\n            transform.offsetX += anticipation.offsetX\r\n        }\r\n\r\n        // Apply facing direction\r\n        if (this.facing === 'left') {\r\n            transform.scaleX *= -1\r\n        }\r\n\r\n        return transform\r\n    }\r\n\r\n    setFacing(direction) {\r\n        this.facing = direction\r\n    }\r\n    \r\n    // Event system integration\r\n    setEventSystem(eventSystem) {\r\n        this.eventSystem = eventSystem\r\n    }\r\n    \r\n    // Subscribe to animation events\r\n    on(eventName, callback, context = null) {\r\n        if (!this.eventListeners.has(eventName)) {\r\n            this.eventListeners.set(eventName, new Set())\r\n        }\r\n        \r\n        const listener = { callback, context, once: false }\r\n        this.eventListeners.get(eventName).add(listener)\r\n        \r\n        // Also subscribe to global event system if available\r\n        if (this.eventSystem) {\r\n            return this.eventSystem.on(eventName, callback, context)\r\n        }\r\n        \r\n        return () => this.off(eventName, callback)\r\n    }\r\n    \r\n    // Subscribe to one-time animation events\r\n    once(eventName, callback, context = null) {\r\n        if (!this.eventListeners.has(eventName)) {\r\n            this.eventListeners.set(eventName, new Set())\r\n        }\r\n        \r\n        const listener = { callback, context, once: true }\r\n        this.eventListeners.get(eventName).add(listener)\r\n        \r\n        // Also subscribe to global event system if available\r\n        if (this.eventSystem) {\r\n            return this.eventSystem.once(eventName, callback, context)\r\n        }\r\n        \r\n        return () => this.off(eventName, callback)\r\n    }\r\n    \r\n    // Unsubscribe from animation events\r\n    off(eventName, callback) {\r\n        if (!this.eventListeners.has(eventName)) {\r\n            return false\r\n        }\r\n        \r\n        const listeners = this.eventListeners.get(eventName)\r\n        for (const listener of listeners) {\r\n            if (listener.callback === callback) {\r\n                listeners.delete(listener)\r\n                break\r\n            }\r\n        }\r\n        \r\n        if (listeners.size === 0) {\r\n            this.eventListeners.delete(eventName)\r\n        }\r\n        \r\n        // Also unsubscribe from global event system if available\r\n        if (this.eventSystem) {\r\n            this.eventSystem.off(eventName, callback)\r\n        }\r\n        \r\n        return true\r\n    }\r\n    \r\n    // Emit animation events\r\n    emit(eventName, data = {}) {\r\n        // Emit to local listeners\r\n        if (this.eventListeners.has(eventName)) {\r\n            const listeners = Array.from(this.eventListeners.get(eventName))\r\n            \r\n            for (const listener of listeners) {\r\n                try {\r\n                    if (listener.context) {\r\n                        listener.callback.call(listener.context, data)\r\n                    } else {\r\n                        listener.callback(data)\r\n                    }\r\n                    \r\n                    if (listener.once) {\r\n                        this.eventListeners.get(eventName).delete(listener)\r\n                    }\r\n                } catch (error) {\r\n                    console.error(`Error in animation event listener for ${eventName}:`, error)\r\n                }\r\n            }\r\n        }\r\n        \r\n        // Emit to global event system if available\r\n        if (this.eventSystem) {\r\n            this.eventSystem.emit(eventName, data)\r\n        }\r\n    }\r\n\r\n    triggerHurt() {\r\n        this.setAnimState(5) // Hurt\r\n        this.hurtTimer = 300\r\n        this.emit('hurt', { timer: this.hurtTimer })\r\n    }\r\n\r\n    triggerAttack() {\r\n        this.setAnimState(2) // Attack\r\n        this.attackTimer = 400\r\n        this.emit('attack', { timer: this.attackTimer })\r\n    }\r\n\r\n    triggerRoll() {\r\n        this.setAnimState(4) // Roll\r\n        this.rollTimer = 400\r\n        this.emit('roll', { timer: this.rollTimer })\r\n    }\r\n\r\n    triggerBlock() {\r\n        this.setAnimState(3) // Block\r\n        this.emit('block')\r\n    }\r\n\r\n    releaseBlock() {\r\n        if (this.state === 3) { // Block\r\n            this.setAnimState(0) // Idle\r\n            this.emit('blockRelease')\r\n        }\r\n    }\r\n\r\n    setMoving(isMoving) {\r\n        this.moving = isMoving\r\n        if (isMoving && this.state === 0) { // Idle\r\n            this.setAnimState(1) // Run\r\n        } else if (!isMoving && this.state === 1) { // Run\r\n            this.setAnimState(0) // Idle\r\n        }\r\n    }\r\n}\r\n\r\n// Animation presets for common game objects\r\nexport const AnimationPresets = {\r\n    playerWalk: { frameCount: 6, frameDuration: 100, loop: true },\r\n    playerRun: { frameCount: 6, frameDuration: 80, loop: true },\r\n    playerJump: { frameCount: 3, frameDuration: 100, loop: false },\r\n    wolfWalk: { frameCount: 4, frameDuration: 150, loop: true },\r\n    wolfRun: { frameCount: 6, frameDuration: 100, loop: true },\r\n    wolfAttack: { frameCount: 5, frameDuration: 80, loop: false },\r\n\r\n    // Character animations\r\n    createPlayerAnimations() {\r\n        return {\r\n            idle: new Animation('idle', [\r\n                new AnimationFrame(0, 0, 32, 32, 200),\r\n                new AnimationFrame(32, 0, 32, 32, 200),\r\n                new AnimationFrame(64, 0, 32, 32, 200),\r\n                new AnimationFrame(96, 0, 32, 32, 200)\r\n            ]),\r\n            running: new Animation('running', [\r\n                new AnimationFrame(0, 32, 32, 32, 100),\r\n                new AnimationFrame(32, 32, 32, 32, 100),\r\n                new AnimationFrame(64, 32, 32, 32, 100),\r\n                new AnimationFrame(96, 32, 32, 32, 100),\r\n                new AnimationFrame(128, 32, 32, 32, 100),\r\n                new AnimationFrame(160, 32, 32, 32, 100)\r\n            ]),\r\n            attacking: new Animation('attacking', [\r\n                new AnimationFrame(0, 64, 32, 32, 50),\r\n                new AnimationFrame(32, 64, 32, 32, 50),\r\n                new AnimationFrame(64, 64, 32, 32, 100),\r\n                new AnimationFrame(96, 64, 32, 32, 50)\r\n            ], { loop: false }),\r\n            blocking: new Animation('blocking', [\r\n                new AnimationFrame(0, 96, 32, 32, 100)\r\n            ], { loop: false }),\r\n            rolling: new Animation('rolling', [\r\n                new AnimationFrame(0, 128, 32, 32, 50),\r\n                new AnimationFrame(32, 128, 32, 32, 50),\r\n                new AnimationFrame(64, 128, 32, 32, 50),\r\n                new AnimationFrame(96, 128, 32, 32, 50)\r\n            ], { loop: false }),\r\n            hurt: new Animation('hurt', [\r\n                new AnimationFrame(0, 160, 32, 32, 100),\r\n                new AnimationFrame(32, 160, 32, 32, 100)\r\n            ], { loop: false }),\r\n            dead: new Animation('dead', [\r\n                new AnimationFrame(0, 192, 32, 32, 100),\r\n                new AnimationFrame(32, 192, 32, 32, 100),\r\n                new AnimationFrame(64, 192, 32, 32, 100),\r\n                new AnimationFrame(96, 192, 32, 32, 200),\r\n                new AnimationFrame(128, 192, 32, 32, -1) // Final frame, holds indefinitely\r\n            ], { loop: false }),\r\n            jumping: new Animation('jumping', [\r\n                new AnimationFrame(0, 224, 32, 32, 100),\r\n                new AnimationFrame(32, 224, 32, 32, 100),\r\n                new AnimationFrame(64, 224, 32, 32, -1) // Hold in air\r\n            ], { loop: false }),\r\n            doubleJumping: new Animation('doubleJumping', [\r\n                new AnimationFrame(0, 256, 32, 32, 50),\r\n                new AnimationFrame(32, 256, 32, 32, 50),\r\n                new AnimationFrame(64, 256, 32, 32, 50),\r\n                new AnimationFrame(96, 256, 32, 32, 50),\r\n                new AnimationFrame(128, 256, 32, 32, 50),\r\n                new AnimationFrame(160, 256, 32, 32, 50),\r\n                new AnimationFrame(192, 256, 32, 32, 50),\r\n                new AnimationFrame(224, 256, 32, 32, -1) // Complete flip\r\n            ], { loop: false }),\r\n            landing: new Animation('landing', [\r\n                new AnimationFrame(0, 288, 32, 32, 50),\r\n                new AnimationFrame(32, 288, 32, 32, 50),\r\n                new AnimationFrame(64, 288, 32, 32, 100)\r\n            ], { loop: false }),\r\n            wallSliding: new Animation('wallSliding', [\r\n                new AnimationFrame(0, 320, 32, 32, 100),\r\n                new AnimationFrame(32, 320, 32, 32, 100)\r\n            ], { loop: true }),\r\n            dashing: new Animation('dashing', [\r\n                new AnimationFrame(0, 352, 32, 32, 50),\r\n                new AnimationFrame(32, 352, 32, 32, 50),\r\n                new AnimationFrame(64, 352, 32, 32, 100),\r\n                new AnimationFrame(96, 352, 32, 32, 50)\r\n            ], { loop: false }),\r\n            chargingAttack: new Animation('chargingAttack', [\r\n                new AnimationFrame(0, 384, 32, 32, 100),\r\n                new AnimationFrame(32, 384, 32, 32, 100),\r\n                new AnimationFrame(64, 384, 32, 32, 100),\r\n                new AnimationFrame(96, 384, 32, 32, 50),\r\n                new AnimationFrame(128, 384, 32, 32, 50),\r\n                new AnimationFrame(160, 384, 32, 32, 100)\r\n            ], { loop: false })\r\n        }\r\n    },\r\n\r\n    // Enemy animations\r\n    createWolfAnimations() {\r\n        return {\r\n            idle: new Animation('idle', [\r\n                new AnimationFrame(0, 0, 48, 32, 300),\r\n                new AnimationFrame(48, 0, 48, 32, 300)\r\n            ]),\r\n            prowl: new Animation('prowl', [\r\n                new AnimationFrame(0, 32, 48, 32, 150),\r\n                new AnimationFrame(48, 32, 48, 32, 150),\r\n                new AnimationFrame(96, 32, 48, 32, 150),\r\n                new AnimationFrame(144, 32, 48, 32, 150)\r\n            ]),\r\n            lunge: new Animation('lunge', [\r\n                new AnimationFrame(0, 64, 48, 32, 50),\r\n                new AnimationFrame(48, 64, 48, 32, 100),\r\n                new AnimationFrame(96, 64, 48, 32, 50)\r\n            ], { loop: false }),\r\n            hurt: new Animation('hurt', [\r\n                new AnimationFrame(0, 96, 48, 32, 100)\r\n            ], { loop: false }),\r\n            howl: new Animation('howl', [\r\n                new AnimationFrame(0, 128, 48, 32, 200),\r\n                new AnimationFrame(48, 128, 48, 32, 300),\r\n                new AnimationFrame(96, 128, 48, 32, 400),\r\n                new AnimationFrame(144, 128, 48, 32, 300),\r\n                new AnimationFrame(192, 128, 48, 32, 200)\r\n            ], { loop: false }),\r\n            death: new Animation('death', [\r\n                new AnimationFrame(0, 160, 48, 32, 100),\r\n                new AnimationFrame(48, 160, 48, 32, 100),\r\n                new AnimationFrame(96, 160, 48, 32, 100),\r\n                new AnimationFrame(144, 160, 48, 32, 200),\r\n                new AnimationFrame(192, 160, 48, 32, -1) // Final frame\r\n            ], { loop: false }),\r\n            packRun: new Animation('packRun', [\r\n                new AnimationFrame(0, 192, 48, 32, 80),\r\n                new AnimationFrame(48, 192, 48, 32, 80),\r\n                new AnimationFrame(96, 192, 48, 32, 80),\r\n                new AnimationFrame(144, 192, 48, 32, 80),\r\n                new AnimationFrame(192, 192, 48, 32, 80),\r\n                new AnimationFrame(240, 192, 48, 32, 80)\r\n            ], { loop: true })\r\n        }\r\n    },\r\n\r\n    // Effect animations\r\n    createEffectAnimations() {\r\n        return {\r\n            explosion: new Animation('explosion', [\r\n                new AnimationFrame(0, 0, 64, 64, 50),\r\n                new AnimationFrame(64, 0, 64, 64, 50),\r\n                new AnimationFrame(128, 0, 64, 64, 50),\r\n                new AnimationFrame(192, 0, 64, 64, 50),\r\n                new AnimationFrame(256, 0, 64, 64, 50)\r\n            ], { loop: false }),\r\n            spark: new Animation('spark', [\r\n                new AnimationFrame(0, 64, 32, 32, 30),\r\n                new AnimationFrame(32, 64, 32, 32, 30),\r\n                new AnimationFrame(64, 64, 32, 32, 30)\r\n            ], { loop: false }),\r\n            projectileSpawn: new Animation('projectileSpawn', [\r\n                new AnimationFrame(0, 128, 16, 16, 30),\r\n                new AnimationFrame(16, 128, 16, 16, 30),\r\n                new AnimationFrame(32, 128, 16, 16, 30)\r\n            ], { loop: false }),\r\n            projectileImpact: new Animation('projectileImpact', [\r\n                new AnimationFrame(0, 144, 32, 32, 40),\r\n                new AnimationFrame(32, 144, 32, 32, 40),\r\n                new AnimationFrame(64, 144, 32, 32, 40),\r\n                new AnimationFrame(96, 144, 32, 32, 40)\r\n            ], { loop: false }),\r\n            itemPickup: new Animation('itemPickup', [\r\n                new AnimationFrame(0, 176, 32, 32, 50),\r\n                new AnimationFrame(32, 176, 32, 32, 50),\r\n                new AnimationFrame(64, 176, 32, 32, 50),\r\n                new AnimationFrame(96, 176, 32, 32, 50),\r\n                new AnimationFrame(128, 176, 32, 32, 50)\r\n            ], { loop: false }),\r\n            powerUp: new Animation('powerUp', [\r\n                new AnimationFrame(0, 208, 64, 64, 60),\r\n                new AnimationFrame(64, 208, 64, 64, 60),\r\n                new AnimationFrame(128, 208, 64, 64, 60),\r\n                new AnimationFrame(192, 208, 64, 64, 60),\r\n                new AnimationFrame(256, 208, 64, 64, 60),\r\n                new AnimationFrame(320, 208, 64, 64, 60)\r\n            ], { loop: false })\r\n        }\r\n    }\r\n}\r\n\r\nexport class WolfAnimator {\r\n    constructor() {\r\n        this.controller = new AnimationController()\r\n        this.procedural = new ProceduralAnimator()\r\n        // ... other procedural animations for wolf\r\n        this.sniffing = this.procedural.createBreathingAnimation({intensity: 0.008, speed: 0.5});\r\n        this.howling = this.procedural.createAnticipation({duration: 0.5, intensity: 0.2});\r\n\r\n        this.state = 'idle';\r\n        this.facing = 'right';\r\n    }\r\n\r\n    setWolfState(newState) {\r\n        if (this.state === newState) {\r\n            return;\r\n        }\r\n        this.state = newState;\r\n        this.play(newState);\r\n        // Trigger procedural effects specific to wolf\r\n        switch(newState) {\r\n            case 'lunge':\r\n                this.sniffing.modulateForState('attacking');\r\n                break;\r\n            case 'howl':\r\n                this.howling.trigger();\r\n                this.sniffing.modulateForState('idle'); // Breathing for howl anticipation\r\n                break;\r\n            case 'prowl':\r\n                this.sniffing.modulateForState('running');\r\n                break;\r\n            case 'hurt':\r\n                this.sniffing.modulateForState('hurt');\r\n                break;\r\n            case 'death':\r\n                this.sniffing.modulateForState('dead');\r\n                break;\r\n            default:\r\n                this.sniffing.modulateForState('idle');\r\n        }\r\n    }\r\n\r\n    update(deltaTime) {\r\n        this.controller.update(deltaTime);\r\n        \r\n        const breathing = this.sniffing.update(deltaTime);\r\n        const howling = this.howling.update(deltaTime);\r\n\r\n        const transform = {\r\n            scaleX: 1,\r\n            scaleY: 1,\r\n            rotation: 0,\r\n            offsetX: 0,\r\n            offsetY: 0\r\n        };\r\n\r\n        // Apply breathing\r\n        transform.scaleX *= breathing.scaleX;\r\n        transform.scaleY *= breathing.scaleY;\r\n        transform.offsetY += breathing.offsetY;\r\n\r\n        // Apply howling anticipation\r\n        transform.scaleX *= howling.scaleX;\r\n        transform.scaleY *= howling.scaleY;\r\n        transform.offsetX += howling.offsetX;\r\n\r\n        // Facing direction\r\n        if (this.facing === 'left') {\r\n            transform.scaleX *= -1;\r\n        }\r\n\r\n        return transform;\r\n    }\r\n\r\n    setFacing(direction) {\r\n        this.facing = direction;\r\n    }\r\n}\r\n\r\nexport default {\r\n    Animation,\r\n    AnimationController,\r\n    AnimationFrame,\r\n    ProceduralAnimator,\r\n    CharacterAnimator,\r\n    AnimationPresets,\r\n    WolfAnimator\r\n}","// PlayerProceduralRig represents the joint hierarchy used by the procedural pipeline.\n// It exposes helper methods to clone and mutate the rig in a controlled manner so\n// each module can focus on its specific concern.\n\nexport default class PlayerProceduralRig {\n    constructor(initialPose = PlayerProceduralRig.createDefaultPose()) {\n        this.pose = PlayerProceduralRig.clonePose(initialPose)\n    }\n\n    static createDefaultPose() {\n        return {\n            root: { x: 0, y: 0 },\n            pelvis: { x: 0, y: 0 },\n            torso: { x: 0, y: -14 },\n            head: { x: 0, y: -26 },\n            leftArm: {\n                shoulder: { x: -7, y: -17 },\n                elbow: { x: -11, y: -9 },\n                hand: { x: -14, y: 0 }\n            },\n            rightArm: {\n                shoulder: { x: 7, y: -17 },\n                elbow: { x: 11, y: -9 },\n                hand: { x: 14, y: 0 }\n            },\n            leftLeg: {\n                hip: { x: -4, y: 0 },\n                knee: { x: -5, y: 10 },\n                foot: { x: -6, y: 21 }\n            },\n            rightLeg: {\n                hip: { x: 4, y: 0 },\n                knee: { x: 5, y: 10 },\n                foot: { x: 6, y: 21 }\n            }\n        }\n    }\n\n    static clonePose(pose) {\n        const cloneSegment = (segment) => {\n            const result = {}\n            Object.entries(segment).forEach(([key, value]) => {\n                if (value && typeof value === 'object' && 'x' in value) {\n                    result[key] = { x: value.x, y: value.y }\n                } else if (value && typeof value === 'object') {\n                    result[key] = cloneSegment(value)\n                } else {\n                    result[key] = value\n                }\n            })\n            return result\n        }\n        return cloneSegment(pose)\n    }\n\n    createWorkingPose() {\n        return PlayerProceduralRig.clonePose(this.pose)\n    }\n\n    commitPose(updatedPose) {\n        this.pose = PlayerProceduralRig.clonePose(updatedPose)\n    }\n\n    toSkeleton() {\n        return this.createWorkingPose()\n    }\n}\r\n","const clamp = (value, min, max) => Math.min(max, Math.max(min, value))\r\n\r\nconst damp = (current, target, deltaTime, speed) => {\r\n    const lambda = Math.exp(-speed * deltaTime)\r\n    return (current * lambda) + (target * (1 - lambda))\r\n}\r\n\r\n// CorePostureModule adjusts pelvis, torso, and head based on locomotion metrics\r\n// while staying agnostic of game logic. All required data is supplied through\r\n// the context so the module can be unit tested in isolation.\r\nexport default class CorePostureModule {\r\n    constructor(config = {}) {\r\n        this.config = {\r\n            maxLean: config.maxLean ?? 0.35,\r\n            pelvisBobAmplitude: config.pelvisBobAmplitude ?? 3,\r\n            headStabilization: config.headStabilization ?? 0.55,\r\n            leanResponsiveness: config.leanResponsiveness ?? 10,\r\n            bobResponsiveness: config.bobResponsiveness ?? 14\r\n        }\r\n        this.lean = 0\r\n        this.pelvisOffset = 0\r\n        this.breathTimer = 0\r\n    }\r\n\r\n    apply(deltaTime, pose, context) {\r\n        const velocity = context.velocity || { x: 0, y: 0 }\r\n        const facing = context.facing ?? 1\r\n        const maxSpeed = context.maxSpeed ?? 240\r\n        const normalizedTime = context.normalizedTime ?? 0\r\n        const isGrounded = context.isGrounded ?? true\r\n        const pelvisOverlay = context.pelvisOffset ?? 0\r\n        const breathing = context.breathing ?? 1\r\n        const fatigue = clamp(context.fatigue ?? 0, 0, 1)\r\n\r\n        const horizontalVelocity = clamp(velocity.x / maxSpeed, -1, 1)\r\n        const leanTarget = horizontalVelocity * this.config.maxLean\r\n        this.lean = damp(this.lean, leanTarget, deltaTime, this.config.leanResponsiveness)\r\n\r\n        const gaitPhase = context.stridePhase ?? normalizedTime\r\n        const bobAmplitude = isGrounded ? this.config.pelvisBobAmplitude : this.config.pelvisBobAmplitude * 0.3\r\n        const fatigueDrop = fatigue * bobAmplitude * 0.5\r\n        const bobTarget = Math.sin(gaitPhase * Math.PI * 2) * bobAmplitude - fatigueDrop + pelvisOverlay\r\n        this.pelvisOffset = damp(this.pelvisOffset, bobTarget, deltaTime, this.config.bobResponsiveness)\r\n\r\n        this.breathTimer += deltaTime * clamp(breathing, 0.25, 2)\r\n        const breathOffset = Math.sin(this.breathTimer * Math.PI * 2) * 0.6 * breathing\r\n\r\n        pose.pelvis.x = this.lean * 4 * facing\n        pose.pelvis.y = this.pelvisOffset\r\n        pose.torso.x = this.lean * 12 * facing\r\n        pose.torso.y = -14 + this.pelvisOffset * 0.35\r\n        pose.torso.rotation = this.lean * 0.25\r\n\r\n        pose.head.x = this.lean * 6 * facing\r\n        pose.head.y = -26 + (this.pelvisOffset * (1 - this.config.headStabilization)) + breathOffset\r\n        pose.head.rotation = -this.lean * 0.2\r\n\r\n        return {\r\n            offsetX: this.lean * 3 * facing,\r\n            offsetY: this.pelvisOffset * 0.2,\r\n            rotation: this.lean * 0.12,\r\n            pelvis: this.pelvisOffset,\r\n            lean: this.lean,\r\n            breathOffset\r\n        }\r\n    }\r\n}\r\n","const clamp = (value, min, max) => Math.min(max, Math.max(min, value))\n\nconst damp = (current, target, deltaTime, speed) => {\n    const lambda = Math.exp(-speed * deltaTime)\n    return (current * lambda) + (target * (1 - lambda))\n}\n\n// LocomotionModule drives leg placement and maintains a stride phase based on\n// supplied velocity, keeping the implementation pure and easily testable.\nexport default class LocomotionModule {\n    constructor(config = {}) {\n        this.config = {\n            strideLength: config.strideLength ?? 12,\n            stepHeight: config.stepHeight ?? 5,\n            stanceWidth: config.stanceWidth ?? 8,\n            maxStrideSpeed: config.maxStrideSpeed ?? 220,\n            phaseSpeed: config.phaseSpeed ?? 2.2\n        }\n        this.phase = 0\n        this.lastStepPower = 0\n    }\n\n    apply(deltaTime, pose, context) {\n        const velocity = context.velocity || { x: 0, y: 0 }\n        const speed = context.speed ?? Math.hypot(velocity.x, velocity.y)\n        const facing = context.facing ?? 1\n        const isGrounded = context.isGrounded ?? true\n        const legLiftLeft = context.legLiftLeft ?? 0\n        const legLiftRight = context.legLiftRight ?? 0\n        const groundOffset = context.groundOffset ?? 0\n\n        const speedRatio = clamp(speed / this.config.maxStrideSpeed, 0, 1)\n        const moving = speedRatio > 0.05 && isGrounded\n\n        if (moving) {\n            const strideRate = this.config.phaseSpeed + speedRatio * this.config.phaseSpeed\n            this.phase = (this.phase + deltaTime * strideRate) % 1\n        } else {\n            this.phase = damp(this.phase, 0, deltaTime, 6)\n        }\n\n        const strideAmount = this.config.strideLength * speedRatio\n        const baseLeftX = -this.config.stanceWidth * 0.5\n        const baseRightX = this.config.stanceWidth * 0.5\n        const baseY = 21 + groundOffset\n\n        const leftPhase = this.phase\n        const rightPhase = (this.phase + 0.5) % 1\n\n        const leftLift = Math.max(0, Math.sin(leftPhase * Math.PI)) * this.config.stepHeight + legLiftLeft * this.config.stepHeight\n        const rightLift = Math.max(0, Math.sin(rightPhase * Math.PI)) * this.config.stepHeight + legLiftRight * this.config.stepHeight\n\n        const leftStride = Math.sin(leftPhase * Math.PI * 2) * strideAmount\n        const rightStride = Math.sin(rightPhase * Math.PI * 2) * strideAmount\n\n        pose.leftLeg.foot.x = baseLeftX + facing * leftStride\n        pose.leftLeg.foot.y = baseY - leftLift\n        pose.rightLeg.foot.x = baseRightX + facing * rightStride\n        pose.rightLeg.foot.y = baseY - rightLift\n\n        pose.leftLeg.knee.x = (pose.leftLeg.hip.x + pose.leftLeg.foot.x) * 0.5\n        pose.leftLeg.knee.y = (pose.leftLeg.hip.y + pose.leftLeg.foot.y) * 0.5 - (moving ? this.config.stepHeight * 0.5 : 2)\n        pose.rightLeg.knee.x = (pose.rightLeg.hip.x + pose.rightLeg.foot.x) * 0.5\n        pose.rightLeg.knee.y = (pose.rightLeg.hip.y + pose.rightLeg.foot.y) * 0.5 - (moving ? this.config.stepHeight * 0.5 : 2)\n\n        this.lastStepPower = damp(this.lastStepPower, moving ? speedRatio : 0, deltaTime, 8)\n\n        return {\n            stridePhase: this.phase,\n            moving,\n            stepPower: this.lastStepPower,\n            footContacts: {\n                left: leftLift < 0.2,\n                right: rightLift < 0.2\n            }\n        }\n    }\n}\r\n","const clamp = (value, min, max) => Math.min(max, Math.max(min, value))\n\nconst damp = (current, target, deltaTime, speed) => {\n    const lambda = Math.exp(-speed * deltaTime)\n    return (current * lambda) + (target * (1 - lambda))\n}\n\n// CombatModule controls arm targeting for attacks, blocks, and locomotion sway.\nexport default class CombatModule {\n    constructor(config = {}) {\n        this.config = {\n            attackReach: config.attackReach ?? 18,\n            blockGuardHeight: config.blockGuardHeight ?? -10,\n            blendSpeed: config.blendSpeed ?? 14,\n            swingAmplitude: config.swingAmplitude ?? 7\n        }\n        this.currentTargets = {\n            leftHand: { x: -12, y: -2 },\n            rightHand: { x: 12, y: -2 }\n        }\n    }\n\n    apply(deltaTime, pose, context) {\n        const state = context.playerState || 'idle'\n        const facing = context.facing ?? 1\n        const normalizedTime = clamp(context.normalizedTime ?? 0, 0, 1)\n        const locomotion = context.locomotion || { stridePhase: 0, moving: false }\n        const speed = context.speed ?? 0\n\n        const baseLeft = { x: -12, y: -2 }\n        const baseRight = { x: 12, y: -2 }\n        let targetLeft = { ...baseLeft }\n        let targetRight = { ...baseRight }\n\n        if (state === 'attacking') {\n            const swing = Math.sin(normalizedTime * Math.PI)\n            const reach = this.config.attackReach * (context.attackStrength ?? 1)\n            targetRight.x = facing * (reach * swing)\n            targetRight.y = -6 - swing * 6\n            targetLeft.x = facing * (reach * 0.35)\n            targetLeft.y = -8 - swing * 2\n        } else if (state === 'blocking') {\n            targetRight.x = facing * 10\n            targetRight.y = this.config.blockGuardHeight\n            targetLeft.x = facing * 6\n            targetLeft.y = this.config.blockGuardHeight - 1\n        } else if (state === 'rolling') {\n            targetRight.x = facing * 6\n            targetRight.y = -4\n            targetLeft.x = -facing * 6\n            targetLeft.y = -4\n        } else {\n            const swing = Math.sin(locomotion.stridePhase * Math.PI * 2) * (locomotion.moving ? 1 : 0)\n            targetRight.x = baseRight.x + facing * swing * this.config.swingAmplitude\n            targetRight.y = baseRight.y + Math.cos(locomotion.stridePhase * Math.PI * 2) * 2\n            targetLeft.x = baseLeft.x - facing * swing * this.config.swingAmplitude\n            targetLeft.y = baseLeft.y - Math.cos(locomotion.stridePhase * Math.PI * 2) * 2\n        }\n\n        const blendSpeed = this.config.blendSpeed + speed * 0.02\n        this.currentTargets.leftHand.x = damp(this.currentTargets.leftHand.x, targetLeft.x, deltaTime, blendSpeed)\n        this.currentTargets.leftHand.y = damp(this.currentTargets.leftHand.y, targetLeft.y, deltaTime, blendSpeed)\n        this.currentTargets.rightHand.x = damp(this.currentTargets.rightHand.x, targetRight.x, deltaTime, blendSpeed)\n        this.currentTargets.rightHand.y = damp(this.currentTargets.rightHand.y, targetRight.y, deltaTime, blendSpeed)\n\n        pose.leftArm.hand.x = this.currentTargets.leftHand.x\n        pose.leftArm.hand.y = this.currentTargets.leftHand.y\n        pose.rightArm.hand.x = this.currentTargets.rightHand.x\n        pose.rightArm.hand.y = this.currentTargets.rightHand.y\n\n        pose.leftArm.elbow.x = (pose.leftArm.shoulder.x + pose.leftArm.hand.x) * 0.5\n        pose.leftArm.elbow.y = (pose.leftArm.shoulder.y + pose.leftArm.hand.y) * 0.5 + 4\n        pose.rightArm.elbow.x = (pose.rightArm.shoulder.x + pose.rightArm.hand.x) * 0.5\n        pose.rightArm.elbow.y = (pose.rightArm.shoulder.y + pose.rightArm.hand.y) * 0.5 + 4\n\n        return {\n            handTargets: {\n                left: { ...this.currentTargets.leftHand },\n                right: { ...this.currentTargets.rightHand }\n            },\n            poseState: state\n        }\n    }\n}\r\n","const damp = (current, target, deltaTime, speed) => {\n    const lambda = Math.exp(-speed * deltaTime)\n    return (current * lambda) + (target * (1 - lambda))\n}\n\nconst cloneChain = (chain) => chain.map(point => ({\n    position: { x: point.position.x, y: point.position.y }\n}))\n\n// SecondaryMotionModule creates lightweight trailing data for cloth, hair, and\n// equipment. The module only relies on the pose and context, keeping the physics\n// approximation deterministic and testable.\nexport default class SecondaryMotionModule {\n    constructor(config = {}) {\n        const clothPoints = Math.max(2, config.clothPoints ?? 5)\n        const hairSegments = Math.max(2, config.hairSegments ?? 4)\n\n        this.cloth = Array.from({ length: clothPoints }, (_, index) => ({\n            position: { x: 0, y: index * 4 }\n        }))\n        this.hair = Array.from({ length: hairSegments }, (_, index) => ({\n            position: { x: 0, y: -index * 3 }\n        }))\n        this.equipment = [{ type: 'sword', position: { x: 0, y: 0 } }]\n        this.time = 0\n    }\n\n    apply(deltaTime, pose, context) {\n        this.time += deltaTime\n\n        const wind = context.wind ?? 0\n        const momentum = context.momentum || context.velocity || { x: 0, y: 0 }\n        const facing = context.facing ?? 1\n        const clothSway = context.clothSway ?? 0\n        const hairBounce = context.hairBounce ?? 0\n        const equipmentJiggle = context.equipmentJiggle ?? 0\n\n        this.updateChain(this.cloth, {\n            x: pose.pelvis.x ?? 0,\n            y: pose.pelvis.y + 4\n        }, deltaTime, {\n            wind,\n            momentum,\n            gravity: 12,\n            sway: clothSway,\n            bounce: clothSway * 0.5\n        })\n\n        this.updateChain(this.hair, {\n            x: pose.head.x,\n            y: pose.head.y - 6\n        }, deltaTime, {\n            wind: wind * 0.8,\n            momentum,\n            gravity: 4,\n            sway: hairBounce,\n            bounce: hairBounce\n        })\n\n        const anchor = {\n            x: pose.rightArm.hand.x,\n            y: pose.rightArm.hand.y\n        }\n        const weapon = this.equipment[0]\n        const jiggleX = Math.sin(this.time * 6) * equipmentJiggle * 2\n        const jiggleY = Math.cos(this.time * 4) * equipmentJiggle * 2\n        weapon.position.x = damp(weapon.position.x, anchor.x - facing * 6 + momentum.x * 0.06 + jiggleX, deltaTime, 10)\n        weapon.position.y = damp(weapon.position.y, anchor.y + 6 + momentum.y * 0.06 + jiggleY, deltaTime, 10)\n\n        return {\n            cloth: cloneChain(this.cloth),\n            hair: cloneChain(this.hair),\n            equipment: this.equipment.map(item => ({\n                type: item.type,\n                position: { x: item.position.x, y: item.position.y }\n            }))\n        }\n    }\n\n    updateChain(chain, anchor, deltaTime, forces) {\n        let previous = anchor\n        chain.forEach((point, index) => {\n            const sway = (forces.sway ?? 0) * Math.sin((this.time * 3) + index * 0.6)\n            const bounce = (forces.bounce ?? 0) * Math.cos((this.time * 4) + index * 0.5)\n            const targetX = previous.x + forces.wind * (index + 1) * 0.3 + forces.momentum.x * 0.02 + sway\n            const targetY = previous.y + index * 4 + forces.momentum.y * 0.015 + forces.gravity * 0.05 + bounce\n            point.position.x = damp(point.position.x, targetX, deltaTime, 12)\n            point.position.y = damp(point.position.y, targetY, deltaTime, 12)\n            previous = point.position\n        })\n    }\n}\r\n","const damp = (current, target, deltaTime, speed) => {\n    const lambda = Math.exp(-speed * deltaTime)\n    return (current * lambda) + (target * (1 - lambda))\n}\n\n// EnvironmentModule applies wind and temperature responses without touching game logic.\nexport default class EnvironmentModule {\n    constructor(config = {}) {\n        this.config = {\n            windInfluence: config.windInfluence ?? 0.25,\n            shiverMagnitude: config.shiverMagnitude ?? 0.6,\n            windResponsiveness: config.windResponsiveness ?? 4,\n            shiverResponsiveness: config.shiverResponsiveness ?? 6\n        }\n        this.wind = 0\n        this.shiver = 0\n        this.shiverPhase = 0\n    }\n\n    apply(deltaTime, pose, context) {\n        const targetWind = context.wind ?? 0\n        const targetShiver = context.temperatureShiver ?? 0\n\n        this.wind = damp(this.wind, targetWind, deltaTime, this.config.windResponsiveness)\n        this.shiver = damp(this.shiver, targetShiver, deltaTime, this.config.shiverResponsiveness)\n        this.shiverPhase = (this.shiverPhase + deltaTime * 18) % (Math.PI * 2)\n\n        const shiverOffset = Math.sin(this.shiverPhase) * this.shiver * this.config.shiverMagnitude\n\n        pose.torso.x += this.wind * this.config.windInfluence\n        pose.head.x += this.wind * this.config.windInfluence * 1.5\n        pose.leftArm.hand.x += this.wind * this.config.windInfluence * 1.2\n        pose.rightArm.hand.x += this.wind * this.config.windInfluence * 1.2\n\n        pose.torso.y += shiverOffset * 0.6\n        pose.head.y += shiverOffset * 0.4\n\n        return {\n            wind: this.wind,\n            shiver: shiverOffset,\n            temperature: targetShiver\n        }\n    }\n}\r\n","import PlayerProceduralRig from './player-procedural-rig.js'\nimport CorePostureModule from './modules/core-posture-module.js'\nimport LocomotionModule from './modules/locomotion-module.js'\nimport CombatModule from './modules/combat-module.js'\nimport SecondaryMotionModule from './modules/secondary-motion-module.js'\nimport EnvironmentModule from './modules/environment-module.js'\n\nconst identityTransform = () => ({\n    scaleX: 1,\n    scaleY: 1,\n    rotation: 0,\n    offsetX: 0,\n    offsetY: 0,\n    trails: []\n})\n\n// PlayerProceduralAnimator combines specialized modules into a deterministic\n// animation overlay that sits on top of the sprite system. Each module receives\n// only the data it needs so behaviour stays predictable and testable.\nexport default class PlayerProceduralAnimator {\n    constructor(options = {}) {\n        this.rig = new PlayerProceduralRig()\n        this.modules = {\n            core: new CorePostureModule(options.core),\n            locomotion: new LocomotionModule(options.locomotion),\n            combat: new CombatModule(options.combat),\n            secondary: new SecondaryMotionModule(options.secondary),\n            environment: new EnvironmentModule(options.environment)\n        }\n        this.cachedTransform = {\n            ...identityTransform(),\n            skeleton: this.rig.toSkeleton(),\n            secondaryMotion: null,\n            environmental: null,\n            debug: null\n        }\n    }\n\n    buildContext(deltaTime, inputContext = {}) {\n        const overlay = inputContext.overlay || {}\n        const velocity = inputContext.velocity || { x: 0, y: 0 }\n        const momentum = inputContext.momentum || velocity\n        const speed = Math.hypot(velocity.x, velocity.y)\n\n        return {\n            deltaTime,\n            playerState: inputContext.playerState || 'idle',\n            facing: inputContext.facing ?? 1,\n            velocity,\n            momentum,\n            speed,\n            maxSpeed: inputContext.maxSpeed ?? 260,\n            normalizedTime: inputContext.normalizedTime ?? 0,\n            stridePhase: inputContext.stridePhase,\n            isGrounded: inputContext.isGrounded ?? true,\n            pelvisOffset: inputContext.pelvisOffset ?? 0,\n            breathing: inputContext.breathing ?? 1,\n            fatigue: inputContext.fatigue ?? 0,\n            legLiftLeft: inputContext.legLiftLeft ?? 0,\n            legLiftRight: inputContext.legLiftRight ?? 0,\n            groundOffset: inputContext.groundOffset ?? 0,\n            wind: inputContext.wind ?? 0,\n            temperatureShiver: inputContext.temperatureShiver ?? 0,\n            clothSway: inputContext.clothSway ?? 0,\n            hairBounce: inputContext.hairBounce ?? 0,\n            equipmentJiggle: inputContext.equipmentJiggle ?? 0,\n            staminaRatio: inputContext.staminaRatio ?? 1,\n            healthRatio: inputContext.healthRatio ?? 1,\n            inputState: inputContext.inputState || {},\n            attackStrength: inputContext.attackStrength ?? 1,\n            attackType: inputContext.attackType || 'light',\n            overlay: {\n                scaleX: overlay.scaleX ?? 1,\n                scaleY: overlay.scaleY ?? 1,\n                rotation: overlay.rotation ?? 0,\n                offsetX: overlay.offsetX ?? 0,\n                offsetY: overlay.offsetY ?? 0\n            }\n        }\n    }\n    composeTransform(context, posture, locomotion) {\n        const base = context.overlay\n        const locomotionLift = locomotion?.stepPower ? -locomotion.stepPower * 1.4 : 0\n\n        return {\n            scaleX: base.scaleX,\n            scaleY: base.scaleY,\n            rotation: base.rotation + (posture?.rotation ?? 0),\n            offsetX: base.offsetX + (posture?.offsetX ?? 0),\n            offsetY: base.offsetY + (posture?.offsetY ?? 0) + locomotionLift,\n            trails: base.trails || []\n        }\n    }\n\n    update(deltaTime, contextInput = {}) {\n        const context = this.buildContext(deltaTime, contextInput)\n        const pose = this.rig.createWorkingPose()\n\n        const posture = this.modules.core.apply(deltaTime, pose, context)\n        context.posture = posture\n        context.stridePhase = context.stridePhase ?? posture?.stridePhase ?? context.normalizedTime\n\n        const locomotion = this.modules.locomotion.apply(deltaTime, pose, context)\n        context.locomotion = locomotion\n        context.stridePhase = locomotion?.stridePhase ?? context.stridePhase\n\n        const combat = this.modules.combat.apply(deltaTime, pose, context)\n        context.combat = combat\n\n        const secondary = this.modules.secondary.apply(deltaTime, pose, context)\n        const environmental = this.modules.environment.apply(deltaTime, pose, context)\n\n        this.rig.commitPose(pose)\n\n        const baseTransform = this.composeTransform(context, posture, locomotion)\n\n        this.cachedTransform = {\n            ...baseTransform,\n            skeleton: this.rig.toSkeleton(),\n            secondaryMotion: secondary,\n            environmental,\n            debug: {\n                state: context.playerState,\n                stridePhase: locomotion?.stridePhase ?? 0,\n                speed: context.speed,\n                lean: posture?.lean ?? 0,\n                wind: environmental?.wind ?? 0,\n                shiver: environmental?.shiver ?? 0\n            }\n        }\n\n        return this.cachedTransform\n    }\n}\r\n\r\n\r\n\r\n\r\n","// Enhanced Player with Animation System Integration\r\n// Provides a complete player character with roll, attack, block, and hurt animations\r\n\r\nimport { CharacterAnimator, AnimationPresets } from './animation-system.js'\r\nimport PlayerProceduralAnimator from './player/procedural/player-procedural-animator.js'\r\n// SoundSystem and ParticleSystem imports removed - not used in this file\r\n\r\nexport class AnimatedPlayer {\r\n    constructor(x = 400, y = 300, options = {}) {\r\n        // Position - driven by WASM (normalized 0-1 coordinates)\r\n        this.x = x\r\n        this.y = y\r\n        this.facing = 1 // 1 for right, -1 for left\r\n        \r\n        // Player stats - WASM will manage the core stats\r\n        this.health = options.health || 100\r\n        this.maxHealth = options.maxHealth || 100\r\n        this.stamina = options.stamina || 100\r\n        this.maxStamina = options.maxStamina || 100\r\n        this._cachedHealth = this.health\r\n        this._cachedStamina = this.stamina\r\n        this.speed = options.speed || 250 // Base speed, actual speed is WASM-driven\r\n        this.rollSpeed = options.rollSpeed || 500 // Base roll speed, actual speed is WASM-driven\r\n        \r\n        // State management - now primarily WASM-driven, this is for JS animation state\r\n        this.state = 'idle' // idle, running, attacking, blocking, rolling, hurt, dead, jumping, doubleJumping, landing, wallSliding, dashing, chargingAttack\r\n        this.previousState = 'idle'\r\n        this.stateTimer = 0 // Managed by WASM now for core actions\r\n        this.stateTime = 0 // Managed by WASM now\r\n        this.stateDuration = 0 // Managed by WASM now\r\n        this._prevNormTime = 0 // Managed by WASM now\r\n        this._comboQueued = false // Logic related to combos will move to WASM\r\n        this._currentAttackType = 'light' // Managed by WASM now\r\n        this.invulnerable = false // Managed by WASM\r\n        this.invulnerabilityTimer = 0 // Managed by WASM\r\n        this.isGrounded = true // Driven by WASM\r\n        this.jumpCount = 0 // Driven by WASM\r\n        this.nearWall = false // Will be WASM-driven or removed\r\n        this.dashCooldown = 0 // Will be WASM-driven or removed\r\n        this.chargeTime = 0 // Will be WASM-driven or removed\r\n        this.maxChargeTime = 1.5 // Will be WASM-driven or removed\r\n\r\n        // Deterministic animation/event parameters - these are mostly cues for animation\r\n        this.params = {\r\n            roll: {\r\n                duration: 0.4,\r\n                iFrameStart: 0.08,\r\n                iFrameEnd: 0.36,\r\n                staminaCost: 25,\r\n                cooldown: 0.8\r\n            },\r\n            attackLight: {\r\n                duration: 0.4,\r\n                activeStart: 0.28,\r\n                activeEnd: 0.38,\r\n                staminaCost: 12,\r\n                cooldown: 0.5\r\n            },\r\n            attackHeavy: {\r\n                duration: 0.62,\r\n                activeStart: 0.32,\r\n                activeEnd: 0.48,\r\n                staminaCost: 24,\r\n                cooldown: 0.8\r\n            },\r\n            comboWindow: { start: 0.55, end: 0.75 },\r\n            parry: { duration: 0.22, window: 0.18, staminaCost: 10 }\r\n        }\r\n        \r\n        // Animation system\r\n        this.animator = new CharacterAnimator()\r\n        this.animations = AnimationPresets.createPlayerAnimations()\r\n        this.setupAnimations()\r\n        \r\n        // Player procedural animation orchestrator\r\n        const proceduralOptions = options.proceduralOptions || options.proceduralConfig || options.proceduralModules || {}\r\n        this.proceduralAnimator = new PlayerProceduralAnimator(proceduralOptions)\r\n        \r\n        // Action cooldowns - now WASM-driven\r\n        this.attackCooldown = 0\r\n        this.rollCooldown = 0\r\n        this.blockHeld = false // WASM will manage the actual block state\r\n        \r\n        // Visual properties\r\n        this.width = options.width || 32\r\n        this.height = options.height || 32\r\n        this.color = options.color || '#00ff88'\r\n        this.sprite = options.sprite || null\r\n\r\n        // Load sprite sheet if not provided\r\n        if (!this.sprite) {\r\n            this.loadSpriteSheet()\r\n        }\r\n        \r\n        // Effects\r\n        this.particleSystem = options.particleSystem || null\r\n        this.soundSystem = options.soundSystem || null\r\n        \r\n        // Combat properties - now WASM-driven\r\n        this.attackDamage = options.attackDamage || 20\r\n        this.attackDamageHeavy = options.attackDamageHeavy || 35\r\n        this.attackRange = options.attackRange || 60\r\n        this.attackRangeHeavy = options.attackRangeHeavy || 80\r\n        this.blockDamageReduction = options.blockDamageReduction || 0.5\r\n\r\n        // Locomotion cadence and footsteps - these will be driven by WASM velocity feedback\r\n        this.stridePhase = 0\r\n        this.gaitRate = 1.4\r\n        this._lastFootFlag = 0 // 0 left, 1 right alternating\r\n        this.footstepIntervalBase = 0.28\r\n\r\n        // Minimal IK proxy values (pelvis bob and foot locks for readability) - driven by WASM\r\n        this.ik = {\r\n            pelvisY: 0,\r\n            pelvisRate: 10,\r\n            left: { locked: false, y: 0 },\r\n            right: { locked: false, y: 0 },\r\n            stepHeight: 2\r\n        }\r\n\r\n        // Debug flag\r\n        this.debugMode = false\r\n\r\n        // Optional WASM module injection support for testing/integration\r\n        try {\r\n            if (options.wasmModule && !globalThis.wasmExports) {\r\n                globalThis.wasmExports = options.wasmModule\r\n            }\r\n        } catch {\r\n            // Ignore WASM module loading errors - fallback handling elsewhere\r\n        }\r\n    }\r\n\r\n    loadSpriteSheet() {\r\n        // Try to load sprite sheet with multiple possible paths\r\n        this.sprite = new Image()\r\n        \r\n        // Try different possible paths based on where the demo is running from\r\n        const possiblePaths = [\r\n            './src/images/player-sprites.png',  // From demos/ directory\r\n            '../src/images/player-sprites.png', // From docs/ directory\r\n            '../../src/images/player-sprites.png' // From deeper nested directories\r\n        ]\r\n        \r\n        let currentPathIndex = 0\r\n        \r\n        const tryNextPath = () => {\r\n            if (currentPathIndex < possiblePaths.length) {\r\n                this.sprite.src = possiblePaths[currentPathIndex]\r\n                currentPathIndex++\r\n            } else {\r\n                console.warn('Player sprite sheet not found at any expected location, using fallback rendering')\r\n                console.log('To fix this: Run \"node scripts/generate-sprite-sheet.js\" or use create-sprite-sheet.html')\r\n                this.sprite = null\r\n            }\r\n        }\r\n\r\n        this.sprite.onload = () => {\r\n            console.log(`Player sprite sheet loaded successfully from ${this.sprite.src}`)\r\n        }\r\n\r\n        this.sprite.onerror = () => {\r\n            console.warn(`Player sprite sheet not found at ${this.sprite.src}, trying next path...`)\r\n            tryNextPath()\r\n        }\r\n        \r\n        // Start with the first path\r\n        tryNextPath()\r\n    }\r\n    \r\n    setupAnimations() {\r\n        // Add all animations to the controller\r\n        Object.entries(this.animations).forEach(([name, animation]) => {\r\n            this.animator.addAnimation(name, animation)\r\n        })\r\n        \r\n        // Start with idle animation\r\n        this.animator.play('idle')\r\n    }\r\n    \r\n    update(deltaTime, input = {}) {\r\n        // Update timers - WASM manages core game timers\r\n        this._prevNormTime = this.getNormalizedTime()\r\n        this.attackCooldown = Math.max(0, this.attackCooldown - deltaTime)\r\n        this.rollCooldown = Math.max(0, this.rollCooldown - deltaTime)\r\n        \r\n        // Update invulnerability\r\n        if (this.invulnerable) {\r\n            this.invulnerabilityTimer -= deltaTime // WASM manages invulnerability timer\r\n            if (this.invulnerabilityTimer <= 0) {\r\n                this.invulnerable = false\r\n            }\r\n        }\r\n        \r\n        // Handle state transitions\r\n        // this.handleStateTransitions(input) // WASM now handles state transitions\r\n        \r\n        // Update based on current state\r\n        // this.updateState(deltaTime, input) // WASM now handles state updates\r\n\r\n        // Deterministic state event windows (hitboxes, i-frames)\r\n        // this.applyStateEvents() // WASM now handles state events\r\n        \r\n        // Update simple IK before composing overlay\r\n        this.updateIK(deltaTime)\r\n\r\n        // 1. Forward inputs to WASM - 5-button combat system\r\n        // Only send to WASM if not being managed externally (e.g., by GameStateManager)\r\n        if (!globalThis.wasmInputManagedExternally) {\r\n            let inputX = 0; let inputY = 0\r\n            if (input.left) {inputX -= 1}\r\n            if (input.right) {inputX += 1}\r\n            if (input.up) {inputY -= 1}\r\n            if (input.down) {inputY += 1}\r\n            \r\n            // New 5-button combat system: A1(light), A2(heavy), Block, Roll, Special\r\n            globalThis.wasmExports?.set_player_input?.(\r\n                inputX, inputY, \r\n                input.roll ? 1 : 0, \r\n                input.jump ? 1 : 0, \r\n                input.lightAttack ? 1 : 0, \r\n                input.heavyAttack ? 1 : 0, \r\n                input.block ? 1 : 0, \r\n                input.special ? 1 : 0\r\n            )\r\n        }\r\n\r\n        // 2. Read state for rendering\r\n        // Assuming 800x600 canvas for now. Convert WASM's 0-1 range to world coordinates.\r\n        // The game-renderer.js is responsible for this scaling when passing player position to render.\r\n        // For now, we'll directly set x and y, and let the renderer handle scaling.\r\n        // WASM provides normalized coordinates; guard against NaN/Infinity\r\n        const rx = globalThis.wasmExports?.get_x?.()\r\n        const ry = globalThis.wasmExports?.get_y?.()\r\n        \r\n        // Debug logging for WASM position updates\r\n        if (typeof rx === 'number' && typeof ry === 'number' && (rx !== 0.5 || ry !== 0.5)) {\r\n            console.log('WASM position update:', rx, ry);\r\n        }\r\n        \r\n        // Debug logging for NaN values\r\n        if (typeof rx !== 'number' || typeof ry !== 'number' || !Number.isFinite(rx) || !Number.isFinite(ry)) {\r\n            console.warn('WASM position returned invalid values:', { rx, ry, typeX: typeof rx, typeY: typeof ry });\r\n            console.warn('WASM exports available:', !!globalThis.wasmExports);\r\n            if (globalThis.wasmExports) {\r\n                console.warn('WASM get_x function:', typeof globalThis.wasmExports.get_x);\r\n                console.warn('WASM get_y function:', typeof globalThis.wasmExports.get_y);\r\n            }\r\n        }\r\n        \r\n        this.x = (typeof rx === 'number' && Number.isFinite(rx)) ? rx : 0.5\r\n        this.y = (typeof ry === 'number' && Number.isFinite(ry)) ? ry : 0.5\r\n\r\n        this.isGrounded = (globalThis.wasmExports?.get_is_grounded?.() === 1);\r\n        this.jumpCount = globalThis.wasmExports?.get_jump_count?.();\r\n\r\n        // Update animation system and cache transform\r\n        // WASM will determine facing direction implicitly from movement and actions\r\n        // Infer facing from velocity if available; preserve when nearly still\r\n        const fx = globalThis.wasmExports?.get_vel_x?.()\r\n        const fy = globalThis.wasmExports?.get_vel_y?.()\r\n        if (typeof fx === 'number' && typeof fy === 'number') {\r\n            const speed = Math.hypot(fx, fy)\r\n            if (speed > 0.001) {\r\n                this.facing = fx >= 0 ? 1 : -1\r\n            }\r\n        }\r\n\r\n        if (this.animator && typeof this.animator.setFacing === 'function') {\r\n            this.animator.setFacing(this.facing >= 0 ? 'right' : 'left')\r\n        }\r\n        // Query WASM overlay values if available\r\n        const wx = (globalThis.wasmExports?.get_anim_offset_x?.() ?? 0)\r\n        const wy = (globalThis.wasmExports?.get_anim_offset_y?.() ?? 0)\r\n        const wsx = (globalThis.wasmExports?.get_anim_scale_x?.() ?? 1)\r\n        const wsy = (globalThis.wasmExports?.get_anim_scale_y?.() ?? 1)\r\n        const wrot = (globalThis.wasmExports?.get_anim_rotation?.() ?? 0)\r\n        const wpelvis = (globalThis.wasmExports?.get_anim_pelvis_y?.() ?? 0)\r\n        \r\n        // Get the animation state from WASM and set it in the CharacterAnimator\r\n        const wasmAnimState = globalThis.wasmExports?.get_player_anim_state?.()\r\n        if (typeof wasmAnimState === 'number') {\r\n            this.setState(this.getAnimStateName(wasmAnimState), true) // Pass true to indicate WASM-driven state\r\n        }\r\n\r\n        const velocityX = Number.isFinite(fx) ? fx : 0\r\n        const velocityY = Number.isFinite(fy) ? fy : 0\r\n\r\n        const baseTransform = this.animator.update(\r\n            deltaTime,\r\n            { x: this.x, y: this.y },\r\n            { x: velocityX, y: velocityY },\r\n            this.isGrounded\r\n        ) || { scaleX: 1, scaleY: 1, rotation: 0, offsetX: 0, offsetY: 0 }\r\n\r\n        const overlay = (globalThis.wasmExports && typeof wx === 'number') ? {\r\n            scaleX: wsx,\r\n            scaleY: wsy,\r\n            rotation: wrot,\r\n            offsetX: wx,\r\n            offsetY: wy\r\n        } : this.computePoseOverlay(input)\r\n\r\n        const legLiftLeft = globalThis.wasmExports?.get_anim_leg_lift_left?.() ?? 0\r\n        const legLiftRight = globalThis.wasmExports?.get_anim_leg_lift_right?.() ?? 0\r\n        const breathing = globalThis.wasmExports?.get_anim_breathing_intensity?.() ?? 1\r\n        const fatigue = globalThis.wasmExports?.get_anim_fatigue_factor?.() ?? 0\r\n        const windResponse = globalThis.wasmExports?.get_anim_wind_response?.() ?? 0\r\n        const groundAdapt = globalThis.wasmExports?.get_anim_ground_adapt?.() ?? 0\r\n        const temperatureShiver = globalThis.wasmExports?.get_anim_temperature_shiver?.() ?? 0\r\n        const clothSway = globalThis.wasmExports?.get_anim_cloth_sway?.() ?? 0\r\n        const hairBounce = globalThis.wasmExports?.get_anim_hair_bounce?.() ?? 0\r\n        const equipmentJiggle = globalThis.wasmExports?.get_anim_equipment_jiggle?.() ?? 0\r\n        const momentumX = globalThis.wasmExports?.get_anim_momentum_x?.() ?? velocityX\r\n        const momentumY = globalThis.wasmExports?.get_anim_momentum_y?.() ?? velocityY\r\n\r\n        const normalizedTime = this.getNormalizedTime()\r\n\r\n        const currentHealth = globalThis.wasmExports?.get_hp?.() ?? globalThis.wasmExports?.get_health?.() ?? this.health\r\n        const currentStamina = globalThis.wasmExports?.get_stamina?.() ?? this.stamina\r\n        this._cachedHealth = currentHealth\r\n        this._cachedStamina = currentStamina\r\n\r\n        const proceduralTransform = this.proceduralAnimator.update(deltaTime, {\r\n            playerState: this.state,\r\n            facing: this.facing,\r\n            velocity: { x: velocityX, y: velocityY },\r\n            momentum: { x: momentumX, y: momentumY },\r\n            normalizedTime,\r\n            isGrounded: this.isGrounded,\r\n            pelvisOffset: wpelvis,\r\n            breathing,\r\n            fatigue,\r\n            legLiftLeft,\r\n            legLiftRight,\r\n            groundOffset: groundAdapt,\r\n            wind: windResponse,\r\n            temperatureShiver,\r\n            clothSway,\r\n            hairBounce,\r\n            equipmentJiggle,\r\n            staminaRatio: this.maxStamina ? currentStamina / this.maxStamina : 1,\r\n            healthRatio: this.maxHealth ? currentHealth / this.maxHealth : 1,\r\n            attackStrength: this._currentAttackType === 'heavy' ? 1.35 : 1,\r\n            attackType: this._currentAttackType,\r\n            inputState: input,\r\n            maxSpeed: this.speed,\r\n            stridePhase: this.stridePhase,\r\n            overlay\r\n        })\r\n\r\n        this.currentTransform = {\r\n            scaleX: baseTransform.scaleX * (proceduralTransform.scaleX ?? 1),\r\n            scaleY: baseTransform.scaleY * (proceduralTransform.scaleY ?? 1),\r\n            rotation: baseTransform.rotation + (proceduralTransform.rotation ?? 0),\r\n            offsetX: baseTransform.offsetX + (proceduralTransform.offsetX ?? 0),\r\n            offsetY: baseTransform.offsetY + (proceduralTransform.offsetY ?? 0),\r\n            trails: baseTransform.trails || [],\r\n            skeleton: proceduralTransform.skeleton,\r\n            secondaryMotion: proceduralTransform.secondaryMotion,\r\n            environmental: proceduralTransform.environmental,\r\n            debug: proceduralTransform.debug\r\n        }\r\n        \r\n        // Physics handled by WASM\r\n\r\n        // Stamina regeneration handled by WASM\r\n    }\r\n\r\n    // Returns a normalized [0,1] progress for the current player action/animation\r\n    // Prefer authoritative WASM timers; fallback to current animation controller progress\r\n    getNormalizedTime() {\r\n        try {\r\n            // If WASM provides an explicit attack state machine, derive normalized phase\r\n            const get = (fn) => (typeof globalThis.wasmExports?.[fn] === 'function') ? globalThis.wasmExports[fn]() : void 0\r\n            const attackState = get('get_attack_state') // 0 Idle, 1 Windup, 2 Active, 3 Recovery\r\n            const stateStartTime = get('get_attack_state_time')\r\n            const now = get('get_time_seconds')\r\n            if (typeof attackState === 'number' && typeof stateStartTime === 'number' && typeof now === 'number') {\r\n                const elapsed = Math.max(0, now - stateStartTime)\r\n                let duration = 0\r\n                if (attackState === 1) {duration = get('get_attack_windup_sec') ?? this.params.attackLight.duration}\r\n                else if (attackState === 2) {duration = get('get_attack_active_sec') ?? this.params.attackLight.duration}\r\n                else if (attackState === 3) {duration = get('get_attack_recovery_sec') ?? this.params.attackLight.duration}\r\n                if (duration && duration > 0) {\r\n                    return Math.max(0, Math.min(1, elapsed / duration))\r\n                }\r\n            }\r\n\r\n            // Rolling phase if available\r\n            const isRolling = get('get_is_rolling')\r\n            if (isRolling === 1) {\r\n                const rollDur = get('get_roll_duration') || this.params.roll.duration\r\n                const playerStateTimer = get('get_player_state_timer')\r\n                if (typeof playerStateTimer === 'number' && rollDur > 0) {\r\n                    return Math.max(0, Math.min(1, playerStateTimer / rollDur))\r\n                }\r\n            }\r\n\r\n            // Generic state timer normalization when duration is known locally\r\n            const playerStateTimer = get('get_player_state_timer')\r\n            if (typeof playerStateTimer === 'number') {\r\n                let duration = 0\r\n                switch (this.state) {\r\n                    case 'rolling': duration = this.params.roll.duration; break\r\n                    case 'attacking':\r\n                        duration = this._currentAttackType === 'heavy' ? this.params.attackHeavy.duration : this.params.attackLight.duration\r\n                        break\r\n                    default:\r\n                        duration = 0\r\n                }\r\n                if (duration > 0) {\r\n                    return Math.max(0, Math.min(1, playerStateTimer / duration))\r\n                }\r\n            }\r\n        } catch {\r\n            // Ignore WASM timing errors - fallback to animation controller\r\n        }\r\n\r\n        // Fallback: use current animation controller progress\r\n        try {\r\n            const anim = this.animator?.controller?.currentAnimation\r\n            if (anim && Array.isArray(anim.frames) && anim.frames.length > 1) {\r\n                // Use frame index over total as coarse progress\r\n                const coarse = anim.currentFrame / (anim.frames.length - 1)\r\n                return Math.max(0, Math.min(1, coarse))\r\n            }\r\n        } catch {\r\n            // Ignore animation controller errors - return default\r\n        }\r\n\r\n        return 0\r\n    }\r\n\r\n    startRoll(input) {\r\n        // Trigger WASM roll action and handle visual/audio effects\r\n        if (!globalThis.wasmExports?.on_roll_start?.()) {\r\n            // WASM determined roll could not start (e.g., stamina, cooldown)\r\n            return;\r\n        }\r\n\r\n        // Determine roll direction for local effects and WASM input\r\n        let dirX = 0; let dirY = 0\r\n        \r\n        if (input.left) {dirX -= 1}\r\n        if (input.right) {dirX += 1}\r\n        if (input.up) {dirY -= 1}\r\n        if (input.down) {dirY += 1}\r\n        \r\n        // If no direction input, roll in facing direction\r\n        if (dirX === 0 && dirY === 0) {\r\n            dirX = this.facing\r\n        }\r\n        \r\n        // Normalize direction\r\n        const length = Math.hypot(dirX, dirY)\r\n        if (length > 0) {\r\n            dirX /= length\r\n            dirY /= length\r\n        }\r\n        \r\n        this.rollDirection = { x: dirX, y: dirY }\r\n        // Visual and audio effects only - core logic handled by WASM\r\n        \r\n        // Create roll effect\r\n        if (this.particleSystem) {\r\n            this.particleSystem.createDustCloud(this.x, this.y)\r\n        }\r\n        \r\n        // Play roll sound\r\n        if (this.soundSystem) {\r\n            this.soundSystem.play('roll')\r\n        }\r\n    }\r\n    \r\n    startAttack(type = 'light') {\r\n        // Trigger WASM attack action and handle visual/audio effects\r\n        const p = type === 'heavy' ? this.params.attackHeavy : this.params.attackLight\r\n        this._currentAttackType = type\r\n\r\n        if (!globalThis.wasmExports?.on_attack?.(type === 'heavy' ? 1 : 0)) {\r\n            // WASM determined attack could not start (e.g., stamina, cooldown)\r\n            return;\r\n        }\r\n        \r\n        // Play attack sound\r\n        if (this.soundSystem) {\r\n            this.soundSystem.play('attack')\r\n        }\r\n    }\r\n\r\n    // Public input API helpers\r\n    queueAttack(type = 'light') {\r\n        // This logic is now handled in WASM\r\n        if (this.canAttack()) { // This check will still use local state, but the actual decision is WASM's\r\n            this.startAttack(type)\r\n        } else if (this.state === 'attacking') {\r\n            // This combo queuing needs to be moved to WASM if it affects gameplay\r\n            this._comboQueued = true\r\n        }\r\n    }\r\n\r\n    tryRoll(dir = null) {\r\n        // dir: {x,y} optional; if absent uses current input/facing via startRoll caller\r\n        // This logic is now handled by WASM, just call startRoll\r\n        const input = {}\r\n        if (dir && (dir.x || dir.y)) {\r\n            input.left = dir.x < -0.5\r\n            input.right = dir.x > 0.5\r\n            input.up = dir.y < -0.5\r\n            input.down = dir.y > 0.5\r\n        }\r\n        this.startRoll(input);\r\n    }\r\n\r\n    tryParry() {\r\n        // Parry logic is now handled in WASM\r\n        if (this.state === 'dead') { return }\r\n        // Stamina check is now done in WASM\r\n        // if (this.stamina < this.params.parry.staminaCost) { return }\r\n        // Enter a brief blocking-like state with a success window; integrate with combat later\r\n        // this.setState('blocking') // State is WASM-driven\r\n        // this.stateTimer = this.params.parry.duration // State timing is WASM-driven\r\n        // this.stateTime = 0 // State timing is WASM-driven\r\n        // this.stateDuration = this.params.parry.duration // State timing is WASM-driven\r\n        // this.stamina -= this.params.parry.staminaCost // Stamina cost is WASM-driven\r\n        if (!globalThis.wasmExports?.on_parry?.()) { // Assuming a new WASM on_parry function\r\n            return; // Parry failed in WASM\r\n        }\r\n        // Optional sfx\r\n        if (this.soundSystem) { this.soundSystem.play('parry') }\r\n    }\r\n    \r\n    executeAttack() {\r\n        // This method will be simplified as WASM handles attack logic.\r\n        // It will primarily be for visual effects and returning hit data for JS enemies.\r\n        const isHeavy = this._currentAttackType === 'heavy'\r\n        const range = isHeavy ? this.attackRangeHeavy : this.attackRange\r\n        const damage = isHeavy ? this.attackDamageHeavy : this.attackDamage\r\n        const hitboxX = this.x + (this.facing * range / 2)\r\n        const hitboxY = this.y\r\n        \r\n        // Create attack effect\r\n        if (this.particleSystem) {\r\n            if (isHeavy) {\r\n                this.particleSystem.createChargedSlash?.(hitboxX, hitboxY, this.facing, 1)\r\n            } else {\r\n                this.particleSystem.createSlashEffect(hitboxX, hitboxY, this.facing)\r\n            }\r\n        }\r\n        \r\n        // Return attack hitbox for collision detection (for JS-managed enemies)\r\n        return {\r\n            x: hitboxX,\r\n            y: hitboxY,\r\n            width: range,\r\n            height: this.height,\r\n            damage: damage\r\n        }\r\n    }\r\n    \r\n    startBlock() {\r\n        // This function now primarily triggers the WASM block action and handles local effects\r\n        if (!globalThis.wasmExports?.set_blocking?.(1, this.facing, 0)) {\r\n            return; // Block failed in WASM (e.g., stamina)\r\n        }\r\n        // this.setState('blocking') // State is WASM-driven\r\n        this.blockHeld = true\r\n        \r\n        // Create block effect\r\n        if (this.particleSystem) {\r\n            this.particleSystem.createShieldEffect(this.x, this.y)\r\n        }\r\n        \r\n        // Play block sound\r\n        if (this.soundSystem) {\r\n            this.soundSystem.play('block')\r\n        }\r\n    }\r\n    \r\n    stopBlock() {\r\n        // This function now primarily triggers the WASM block action\r\n        globalThis.wasmExports?.set_blocking?.(0, this.facing, 0);\r\n        // this.setState('idle') // State is WASM-driven\r\n        this.blockHeld = false\r\n    }\r\n    \r\n    takeDamage(damage, knockbackX = 0, knockbackY = 0) {\r\n        // Damage calculation is now primarily WASM-driven\r\n        // This function will be simplified or removed if WASM handles all damage and effects\r\n        if (this.invulnerable || this.state === 'dead') {return false} // Invulnerable state is WASM-driven\r\n\r\n        const actualDamage = damage\r\n        \r\n        // Reduce damage if blocking - WASM handles this logic\r\n        if (this.state === 'blocking') {\r\n            // actualDamage *= this.blockDamageReduction\r\n            \r\n            // Create block impact effect\r\n            if (this.particleSystem) {\r\n                this.particleSystem.createBlockImpact(this.x, this.y)\r\n            }\r\n            \r\n            // Play block impact sound\r\n            if (this.soundSystem) {\r\n                this.soundSystem.play('blockImpact')\r\n            }\r\n        } else {\r\n            // Not blocking, take full damage - visual/audio effects only\r\n            if (this.particleSystem) {\r\n                this.particleSystem.createBloodEffect(this.x, this.y)\r\n            }\r\n\r\n            if (this.soundSystem) {\r\n                this.soundSystem.play('hurt')\r\n            }\r\n        }\r\n\r\n        // Damage application and death check handled by WASM\r\n        \r\n        return true\r\n    }\r\n    \r\n    die() {\r\n        // Visual and audio effects only - death state handled by WASM\r\n        if (this.particleSystem) {\r\n            this.particleSystem.createDeathEffect(this.x, this.y)\r\n        }\r\n\r\n        if (this.soundSystem) {\r\n            this.soundSystem.play('death')\r\n        }\r\n    }\r\n    \r\n    respawn(_x, _y) {\r\n        // Visual and audio effects only - respawn logic handled by WASM\r\n        if (this.particleSystem) {\r\n            this.particleSystem.createRespawnEffect(this.x, this.y)\r\n        }\r\n\r\n        if (this.soundSystem) {\r\n            this.soundSystem.play('respawn')\r\n        }\r\n    }\r\n    \r\n    setState(newState, wasmDriven = false) { // Added wasmDriven parameter\r\n        if (this.state === newState) {return} // Prevent redundant state changes regardless of source\r\n\r\n        this.previousState = this.state\r\n        this.state = newState\r\n        this.stateTime = 0\r\n        this.stateDuration = 0\r\n        this._prevNormTime = 0\r\n\r\n        // Convert string state to numeric state for CharacterAnimator\r\n        const numericState = this.stateNameToNumber(newState)\r\n\r\n        // Update animation using CharacterAnimator's setAnimState method\r\n        this.animator.setAnimState(numericState)\r\n    }\r\n    \r\n    canAttack() {\r\n        // This check is now primarily WASM-driven, this local version is for UI/client-side prediction\r\n        const minCost = Math.min(this.params.attackLight.staminaCost, this.params.attackHeavy.staminaCost)\r\n        return this.attackCooldown <= 0 && \r\n               this.stamina >= minCost && // Stamina also comes from WASM\r\n               this.state !== 'dead' &&\r\n               this.state !== 'rolling' &&\r\n               this.state !== 'hurt'\r\n    }\r\n    \r\n    canRoll() {\r\n        // This check is now primarily WASM-driven, this local version is for UI/client-side prediction\r\n        return this.rollCooldown <= 0 && \r\n               this.stamina >= this.params.roll.staminaCost && // Stamina also comes from WASM\r\n               this.state !== 'dead' &&\r\n               this.state !== 'attacking' &&\r\n               this.state !== 'hurt'\r\n    }\r\n    \r\n    canBlock() {\r\n        // This check is now primarily WASM-driven, this local version is for UI/client-side prediction\r\n        return this.stamina > 0 && // Stamina also comes from WASM\r\n               this.state !== 'dead' &&\r\n               this.state !== 'rolling' &&\r\n               this.state !== 'attacking' &&\r\n               this.state !== 'hurt'\r\n    }\r\n    \r\n    render(ctx, camera = null) {\r\n        // Compute screen position from WASM-normalized coords using GameRenderer mapping if available\r\n        let screenX = 0\r\n        let screenY = 0\r\n        const camX = camera?.x || 0\r\n        const camY = camera?.y || 0\r\n        \r\n        // Debug logging for position tracking\r\n        const debugPositions = false; // Set to true for debugging\r\n        if (debugPositions && Math.random() < 0.01) { // Log occasionally to avoid spam\r\n            console.log('AnimatedPlayer.render:', {\r\n                playerPos: { x: this.x, y: this.y },\r\n                camera: { x: camX, y: camY },\r\n                hasGameRenderer: !!globalThis.gameRenderer,\r\n                hasWasmToWorld: !!(globalThis.gameRenderer?.wasmToWorld)\r\n            });\r\n        }\r\n        \r\n        if (globalThis.gameRenderer && typeof globalThis.gameRenderer.wasmToWorld === 'function') {\r\n            const pos = globalThis.gameRenderer.wasmToWorld(this.x || 0.5, this.y || 0.5)\r\n            screenX = pos.x - camX\r\n            screenY = pos.y - camY\r\n        } else {\r\n            // Fallback scaling if renderer mapping is unavailable\r\n            const worldWidth = 800\r\n            const worldHeight = 600\r\n            screenX = (this.x || 0) * worldWidth - camX\r\n            screenY = (this.y || 0) * worldHeight - camY\r\n        }\r\n        \r\n        ctx.save()\r\n        \r\n        // Apply invulnerability flashing - this will be driven by WASM\r\n        if (globalThis.wasmExports?.get_is_invulnerable?.() === 1) { // Assuming a WASM export for invulnerability\r\n            ctx.globalAlpha = 0.5 + Math.sin(Date.now() * 0.02) * 0.3\r\n        }\r\n        \r\n        // Get current animation frame\r\n        const frame = this.animator.controller.getCurrentFrame()\r\n        \r\n        if (this.sprite && frame) {\r\n            // Draw sprite animation with enhanced procedural transform\r\n            ctx.save()\r\n            const t = this.currentTransform || { scaleX: 1, scaleY: 1, rotation: 0, offsetX: 0, offsetY: 0 }\r\n            const centerX = screenX + t.offsetX\r\n            const centerY = screenY + t.offsetY\r\n            ctx.translate(centerX, centerY)\r\n            ctx.rotate(t.rotation)\r\n            ctx.scale(this.facing < 0 ? -t.scaleX : t.scaleX, t.scaleY)\r\n            \r\n            // Render secondary motion effects first (behind character)\r\n            if (t.secondaryMotion && this.debugMode) {\r\n                this.renderSecondaryMotion(ctx, t.secondaryMotion)\r\n            }\r\n            \r\n            // Draw main character sprite\r\n            ctx.drawImage(\r\n                this.sprite,\r\n                frame.x, frame.y, frame.width, frame.height,\r\n                -this.width/2, -this.height/2,\r\n                this.width, this.height\r\n            )\r\n            \r\n            // Render enhanced skeletal overlay if available and in debug mode\r\n            if (t.skeleton && this.debugMode) {\r\n                this.renderSkeletalOverlay(ctx, t.skeleton)\r\n            }\r\n            \r\n            ctx.restore()\r\n        } else {\r\n            // Fallback to colored rectangle - ensure it's always visible\r\n            ctx.fillStyle = this.color || '#4a90e2' // Default blue color\r\n            \r\n            // Apply state-based visual effects\r\n            if (this.state === 'hurt') {\r\n                ctx.fillStyle = '#ff4444'\r\n            } else if (this.state === 'blocking') {\r\n                ctx.fillStyle = '#4444ff'\r\n            } else if (this.state === 'rolling') {\r\n                ctx.fillStyle = '#ffff44'\r\n            }\r\n            \r\n            // Draw a more visible rectangle\r\n            const rectWidth = this.width || 32;\r\n            const rectHeight = this.height || 32;\r\n            \r\n            ctx.fillRect(\r\n                screenX - rectWidth/2,\r\n                screenY - rectHeight/2,\r\n                rectWidth,\r\n                rectHeight\r\n            );\r\n            \r\n            // Add a border to make it more visible\r\n            ctx.strokeStyle = '#ffffff';\r\n            ctx.lineWidth = 2;\r\n            ctx.strokeRect(\r\n                screenX - rectWidth/2,\r\n                screenY - rectHeight/2,\r\n                rectWidth,\r\n                rectHeight\r\n            );\r\n            \r\n            // Add a center dot to show exact position\r\n            ctx.fillStyle = '#ffffff';\r\n            ctx.beginPath();\r\n            ctx.arc(screenX, screenY, 3, 0, Math.PI * 2);\r\n            ctx.fill();\r\n        }\r\n        \r\n        // Draw health bar\r\n        const barWidth = 40\r\n        const barHeight = 4\r\n        const barY = screenY - this.height/2 - 10\r\n        \r\n        // Background\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.5)'\r\n        ctx.fillRect(screenX - barWidth/2, barY, barWidth, barHeight)\r\n        \r\n        // Health - get from WASM\r\n        const currentHealth = Number.isFinite(this._cachedHealth) ? this._cachedHealth : (globalThis.wasmExports?.get_hp?.() ?? globalThis.wasmExports?.get_health?.() ?? this.health);\r\n        const maxHealth = this.maxHealth; // Max health can still be local or WASM-driven if dynamic\r\n        const healthPercent = currentHealth / maxHealth\r\n        ctx.fillStyle = healthPercent > 0.5 ? '#00ff00' : \r\n                       healthPercent > 0.25 ? '#ffff00' : '#ff0000'\r\n        ctx.fillRect(screenX - barWidth/2, barY, barWidth * healthPercent, barHeight)\r\n        \r\n        // Stamina bar - get from WASM\r\n        const staminaY = barY + 5\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.5)'\r\n        ctx.fillRect(screenX - barWidth/2, staminaY, barWidth, 2)\r\n        \r\n        const currentStamina = Number.isFinite(this._cachedStamina) ? this._cachedStamina : (globalThis.wasmExports?.get_stamina?.() ?? this.stamina);\r\n        const maxStamina = this.maxStamina; // Max stamina can still be local or WASM-driven if dynamic\r\n        const staminaPercent = currentStamina / maxStamina\r\n        ctx.fillStyle = '#00aaff'\r\n        ctx.fillRect(screenX - barWidth/2, staminaY, barWidth * staminaPercent, 2)\r\n        \r\n        // Debug overlays\r\n        if (this.debugMode) {\r\n            this.renderDebug(ctx, camera, screenX, screenY)\r\n        }\r\n\r\n        ctx.restore()\r\n    }\r\n\r\n    computePoseOverlay(_input) {\r\n        // Simple procedural layers approximation for readability and responsiveness\r\n        // This can still be done in JS as it's purely visual\r\n        const t = this.getNormalizedTime() // This needs to be driven by WASM state timings\r\n        let scaleX = 1\r\n        let scaleY = 1\r\n        let rotation = 0\r\n        const offsetX = 0\r\n        let offsetY = this.ik?.pelvisY || 0\r\n\r\n        // Lean with velocity when running - velocity should come from WASM\r\n        // For now, using this.vx from CharacterAnimator.update's velocity parameter. This needs to be cleaned up.\r\n        // The CharacterAnimator.update is already being passed vx, vy, which are currently local.\r\n        // These local vx, vy are not updated from WASM, which is an issue.\r\n        // Need to pass WASM-driven velocity to CharacterAnimator.update as well.\r\n        // For now, let's assume CharacterAnimator is updated with correct velocity from WASM.\r\n        // We need an export for WASM player velocity (get_vel_x, get_vel_y)\r\n        const currentVx = globalThis.wasmExports?.get_vel_x?.() ?? 0;\r\n        const currentVy = globalThis.wasmExports?.get_vel_y?.() ?? 0;\r\n        const currentSpeed = Math.hypot(currentVx, currentVy);\r\n        const playerSpeed = globalThis.wasmExports?.get_speed?.() ?? this.speed; // Assuming WASM provides player speed\r\n\r\n        if (this.state === 'running') {\r\n            const lean = Math.max(-0.15, Math.min(0.15, (currentVx / (playerSpeed || 1)) * 0.25))\r\n            rotation += lean\r\n        }\r\n\r\n        // Block hunch\r\n        if (this.state === 'blocking') {\r\n            scaleY *= 0.98\r\n            offsetY += 1\r\n        }\r\n\r\n        // Roll tuck\r\n        if (this.state === 'rolling') {\r\n            const w = (t < 0.5 ? t * 2 : (1 - t) * 2)\r\n            scaleY *= 1 - 0.06 * w\r\n            scaleX *= 1 + 0.04 * w\r\n            rotation += (this.facing >= 0 ? 1 : -1) * 0.12 * w\r\n        }\r\n\r\n        // Attack slight forward push and recoil feel\r\n        // These will be driven by WASM attack state timings and forces\r\n        if (this.state === 'attacking') {\r\n            // Placeholder: These values should come from WASM's animation overlay exports\r\n            // if (t < 0.3) {\r\n            //     offsetX += this.facing * 2 * (t / 0.3)\r\n            // } else if (t > 0.6) {\r\n            //     offsetX -= this.facing * 2 * ((t - 0.6) / 0.4)\r\n            // }\r\n        }\r\n\r\n        return { scaleX, scaleY, rotation, offsetX, offsetY }\r\n    }\r\n\r\n    updateIK(deltaTime) {\r\n        // Pelvis bob from WASM overlay if available\r\n        const wasmPelvis = globalThis.wasmExports?.get_anim_pelvis_y?.()\r\n        if (typeof wasmPelvis === 'number') {\r\n            this.ik.pelvisY = wasmPelvis\r\n        } else {\r\n            this.ik.pelvisY = 0; // Fallback to 0 if WASM value not available\r\n        }\r\n\r\n        // Foot lock flags (alternating with steps) for future mask usage\r\n        // These should also be driven by WASM if precise synchronization is needed\r\n        const currentVx = globalThis.wasmExports?.get_vel_x?.() ?? 0;\r\n        const currentVy = globalThis.wasmExports?.get_vel_y?.() ?? 0;\r\n        const isMovingNow = Math.hypot(currentVx, currentVy) > 10\r\n        if (isMovingNow) {\r\n            // left foot considered planted near stridePhase ~ 0.0; right near ~0.5\r\n            // The stridePhase needs to be driven by WASM's locomotion state.\r\n            // For now, let's keep a local stridePhase but eventually it should be removed.\r\n            this.stridePhase = (this.stridePhase + deltaTime * this.gaitRate) % 1; // Keep local for now\r\n            const lf = (this.stridePhase < 0.25 || this.stridePhase > 0.75)\r\n            this.ik.left.locked = lf\r\n            this.ik.right.locked = !lf\r\n        } else {\r\n            this.ik.left.locked = false\r\n            this.ik.right.locked = false\r\n            this.stridePhase = 0; // Reset stride phase when idle\r\n        }\r\n    }\r\n\r\n    renderDebug(ctx, camera, screenX, screenY) {\r\n        const x = screenX\r\n        const y = screenY - this.height / 2 - 18\r\n        // Stride phase bar - needs to be updated based on WASM if stridePhase moves to WASM\r\n        ctx.save()\r\n        ctx.fillStyle = 'rgba(0,0,0,0.35)'\r\n        ctx.fillRect(x - 24, y, 48, 4)\r\n        ctx.fillStyle = '#00ffaa'\r\n        ctx.fillRect(x - 24, y, 48 * (this.stridePhase % 1), 4)\r\n\r\n        // Pelvis offset marker\r\n        ctx.strokeStyle = '#ffaa00'\r\n        ctx.beginPath()\r\n        ctx.moveTo(x + 30, y + 2)\r\n        ctx.lineTo(x + 30, y + 2 - (this.ik?.pelvisY || 0))\r\n        ctx.stroke()\r\n\r\n        // Event windows (attack/roll) - these timings are now WASM-driven\r\n        // This will require WASM exports for current attack/roll state durations and normalized times\r\n        const currentAttackState = globalThis.wasmExports?.get_attack_state?.() ?? 0; // Assuming a WASM export\r\n        const currentAttackStateTime = globalThis.wasmExports?.get_attack_state_time?.() ?? 0; // Assuming a WASM export\r\n        const totalGameTime = globalThis.wasmExports?.get_time_seconds?.() ?? 0; // Assuming a WASM export\r\n        \r\n        let norm = 0;\r\n        if (currentAttackState === 1) { // Windup\r\n            norm = (totalGameTime - currentAttackStateTime) / (globalThis.wasmExports?.get_attack_windup_sec?.() ?? this.params.attackLight.duration);\r\n        } else if (currentAttackState === 2) { // Active\r\n            norm = (totalGameTime - currentAttackStateTime) / (globalThis.wasmExports?.get_attack_active_sec?.() ?? this.params.attackLight.duration);\r\n        } else if (currentAttackState === 3) { // Recovery\r\n            norm = (totalGameTime - currentAttackStateTime) / (globalThis.wasmExports?.get_attack_recovery_sec?.() ?? this.params.attackLight.duration);\r\n        }\r\n\r\n        const barY = y + 8\r\n        ctx.fillStyle = 'rgba(0,0,0,0.35)'\r\n        ctx.fillRect(x - 24, barY, 48, 3)\r\n\r\n        // These ranges should be driven by WASM exports if precise\r\n        if (currentAttackState === 2) { // Active attack phase\r\n            ctx.fillStyle = '#ff4477'\r\n            // Placeholder: actual activeStart/End should come from WASM\r\n            ctx.fillRect(x - 24 + 48 * 0.28, barY, 48 * (0.38 - 0.28), 3)\r\n        }\r\n        if (globalThis.wasmExports?.get_is_rolling?.() === 1) { // If rolling\r\n            ctx.fillStyle = '#ffee55'\r\n            // Placeholder: iFrameStart/End should come from WASM\r\n            ctx.fillRect(x - 24 + 48 * 0.08, barY, 48 * (0.36 - 0.08), 3)\r\n        }\r\n        // Current norm marker\r\n        ctx.fillStyle = '#ffffff'\r\n        ctx.fillRect(x - 24 + 48 * norm - 1, barY - 1, 2, 5)\r\n\r\n        ctx.restore()\r\n    }\r\n    \r\n    // Helper function to convert numeric WASM state to string for internal use\r\n    getAnimStateName(state) {\r\n        switch(state) {\r\n            case 0: return 'idle'\r\n            case 1: return 'running'\r\n            case 2: return 'attacking'\r\n            case 3: return 'blocking'\r\n            case 4: return 'rolling'\r\n            case 5: return 'hurt'\r\n            case 6: return 'dead'\r\n            case 7: return 'jumping'\r\n            case 8: return 'doubleJumping'\r\n            case 9: return 'landing'\r\n            case 10: return 'wallSliding'\r\n            case 11: return 'dashing'\r\n            case 12: return 'chargingAttack'\r\n            default: return 'idle'\r\n        }\r\n    }\r\n\r\n    // Helper function to convert string state to numeric for CharacterAnimator\r\n    stateNameToNumber(stateName) {\r\n        switch(stateName) {\r\n            case 'idle': return 0\r\n            case 'running': return 1\r\n            case 'attacking': return 2\r\n            case 'blocking': return 3\r\n            case 'rolling': return 4\r\n            case 'hurt': return 5\r\n            case 'dead': return 6\r\n            case 'jumping': return 7\r\n            case 'doubleJumping': return 8\r\n            case 'landing': return 9\r\n            case 'wallSliding': return 10\r\n            case 'dashing': return 11\r\n            case 'chargingAttack': return 12\r\n            default: return 0\r\n        }\r\n    }\r\n\r\n    // Get animation state code for WASM integration\r\n    getAnimationStateCode() {\r\n        return this.stateNameToNumber(this.state);\r\n    }\r\n    \r\n    // Get current animation info for debugging\r\n    getAnimationInfo() {\r\n        return {\r\n            state: this.state, // Now directly reflecting the local state derived from WASM\r\n            animation: this.animator.controller.currentAnimation?.name,\r\n            frame: this.animator.controller.getCurrentFrame(),\r\n            stateTimer: globalThis.wasmExports?.get_player_state_timer?.() ?? 0, // Assuming WASM exports player state timer\r\n            invulnerable: globalThis.wasmExports?.get_is_invulnerable?.() === 1,\r\n            \r\n            // Enhanced procedural animation info\r\n            proceduralData: this.currentTransform?.debug || null,\r\n            skeletalData: this.currentTransform?.skeleton || null,\r\n            secondaryMotion: this.currentTransform?.secondaryMotion || null,\r\n            environmental: this.currentTransform?.environmental || null\r\n        }\r\n    }\r\n    \r\n    // Render secondary motion effects (cloth, hair, equipment)\r\n    renderSecondaryMotion(ctx, secondaryMotion) {\r\n        if (!secondaryMotion) {return}\r\n        \r\n        ctx.save()\r\n        ctx.globalAlpha = 0.8\r\n        \r\n        // Render cloth physics\r\n        if (secondaryMotion.cloth) {\r\n            ctx.strokeStyle = '#4A4A4A'\r\n            ctx.lineWidth = 2\r\n            ctx.beginPath()\r\n            secondaryMotion.cloth.forEach((point, index) => {\r\n                if (index === 0) {\r\n                    ctx.moveTo(point.position.x, point.position.y)\r\n                } else {\r\n                    ctx.lineTo(point.position.x, point.position.y)\r\n                }\r\n            })\r\n            ctx.stroke()\r\n        }\r\n        \r\n        // Render hair physics\r\n        if (secondaryMotion.hair) {\r\n            ctx.strokeStyle = '#8B4513'\r\n            ctx.lineWidth = 3\r\n            ctx.lineCap = 'round'\r\n            ctx.beginPath()\r\n            secondaryMotion.hair.forEach((segment, index) => {\r\n                if (index === 0) {\r\n                    ctx.moveTo(segment.position.x, segment.position.y)\r\n                } else {\r\n                    ctx.lineTo(segment.position.x, segment.position.y)\r\n                }\r\n            })\r\n            ctx.stroke()\r\n        }\r\n        \r\n        // Render equipment physics\r\n        if (secondaryMotion.equipment) {\r\n            secondaryMotion.equipment.forEach(item => {\r\n                ctx.fillStyle = item.type === 'sword' ? '#C0C0C0' : '#8B4513'\r\n                ctx.fillRect(item.position.x - 2, item.position.y - 1, 4, 2)\r\n            })\r\n        }\r\n        \r\n        ctx.restore()\r\n    }\r\n    \r\n    // Render skeletal overlay for debugging and enhanced visualization\r\n    renderSkeletalOverlay(ctx, skeleton) {\r\n        if (!skeleton) {return}\r\n        \r\n        ctx.save()\r\n        ctx.strokeStyle = '#00ff88'\r\n        ctx.fillStyle = '#ffff44'\r\n        ctx.lineWidth = 1\r\n        ctx.globalAlpha = 0.6\r\n        \r\n        // Draw bones\r\n        this.drawBone(ctx, skeleton.torso, skeleton.head)\r\n        this.drawBone(ctx, skeleton.torso, skeleton.pelvis)\r\n        \r\n        // Draw arms\r\n        this.drawBone(ctx, skeleton.leftArm.shoulder, skeleton.leftArm.elbow)\r\n        this.drawBone(ctx, skeleton.leftArm.elbow, skeleton.leftArm.hand)\r\n        this.drawBone(ctx, skeleton.rightArm.shoulder, skeleton.rightArm.elbow)\r\n        this.drawBone(ctx, skeleton.rightArm.elbow, skeleton.rightArm.hand)\r\n        \r\n        // Draw legs\r\n        this.drawBone(ctx, skeleton.leftLeg.hip, skeleton.leftLeg.knee)\r\n        this.drawBone(ctx, skeleton.leftLeg.knee, skeleton.leftLeg.foot)\r\n        this.drawBone(ctx, skeleton.rightLeg.hip, skeleton.rightLeg.knee)\r\n        this.drawBone(ctx, skeleton.rightLeg.knee, skeleton.rightLeg.foot)\r\n        \r\n        // Draw joints\r\n        const joints = [\r\n            skeleton.head, skeleton.torso, skeleton.pelvis,\r\n            skeleton.leftArm.shoulder, skeleton.leftArm.elbow, skeleton.leftArm.hand,\r\n            skeleton.rightArm.shoulder, skeleton.rightArm.elbow, skeleton.rightArm.hand,\r\n            skeleton.leftLeg.hip, skeleton.leftLeg.knee, skeleton.leftLeg.foot,\r\n            skeleton.rightLeg.hip, skeleton.rightLeg.knee, skeleton.rightLeg.foot\r\n        ]\r\n        \r\n        joints.forEach(joint => {\r\n            if (joint && typeof joint.x !== \"undefined\" && typeof joint.y !== \"undefined\") {\r\n                ctx.beginPath()\r\n                ctx.arc(joint.x, joint.y, 2, 0, Math.PI * 2)\r\n                ctx.fill()\r\n            }\r\n        })\r\n        \r\n        ctx.restore()\r\n    }\r\n    \r\n    // Helper method to draw bones\r\n    drawBone(ctx, start, end) {\r\n        if (!start || !end || typeof start.x === \"undefined\" || typeof end.x === \"undefined\") {return}\r\n        \r\n        ctx.beginPath()\r\n        ctx.moveTo(start.x, start.y)\r\n        ctx.lineTo(end.x, end.y)\r\n        ctx.stroke()\r\n    }\r\n    \r\n    // Input helper to convert keyboard to player input - 5-button combat system\r\n    static createInputFromKeys(keys) {\r\n        return {\r\n            // Movement\r\n            left: keys.a || keys.arrowleft,\r\n            right: keys.d || keys.arrowright,\r\n            up: keys.w || keys.arrowup,\r\n            down: keys.s || keys.arrowdown,\r\n            \r\n            // 5-Button Combat System\r\n            lightAttack: keys.j || keys['1'],        // A1 = Light Attack\r\n            heavyAttack: keys.k || keys['2'],        // A2 = Heavy Attack  \r\n            block: keys.shift || keys['3'],          // Block = Hold to guard, tap to parry\r\n            roll: keys.control || keys['4'],         // Roll = Dodge with i-frames\r\n            special: keys.l || keys['5'],            // Special = Hero move\r\n            \r\n            // Legacy support\r\n            attack: keys.j || keys[' '],             // Maps to light attack\r\n            jump: keys.space || keys.z\r\n        }\r\n    }\r\n    \r\n    // New movement methods for enhanced animations\r\n    // These methods now just trigger actions, WASM will handle state changes\r\n    jump() {\r\n        // WASM will drive the jump state, so we just trigger the action\r\n        globalThis.wasmExports?.on_jump?.(); // New WASM function call for jumping\r\n        if (this.particleSystem) {\r\n            this.particleSystem.createDustCloud(this.x, this.y + this.height/2)\r\n        }\r\n        \r\n        if (this.soundSystem) {\r\n            this.soundSystem.play('jump')\r\n        }\r\n    }\r\n    \r\n}\r\n\r\nexport default AnimatedPlayer\r\n\r\n// Static helper: attach a key to toggle debug overlays for a given player instance\r\nAnimatedPlayer.attachDebugToggle = function(playerInstance, key = 'F3') {\r\n    if (!playerInstance || playerInstance.__debugToggleAttached) { return }\r\n    const targetKey = (key || 'F3').toLowerCase()\r\n    const handler = (e) => {\r\n        const k = (e.key || '').toLowerCase()\r\n        if (k === targetKey.toLowerCase()) {\r\n            playerInstance.debugMode = !playerInstance.debugMode\r\n        }\r\n    }\r\n    try {\r\n        addEventListener('keydown', handler)\r\n        playerInstance.__debugToggleAttached = true\r\n    } catch {\r\n        // Ignore debug handler attachment errors\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["toMilliseconds","value","Number","isFinite","AnimationFrame","constructor","x","y","width","height","duration","this","Animation","name","frames","options","loop","pingPong","speed","onComplete","onFrame","currentFrame","elapsedTime","direction","isPlaying","hasCompleted","play","stop","reset","pause","resume","update","deltaTime","length","deltaMs","singleFrame","maxSteps","steps","currentFrameData","Math","min","max","previousFrame","frameData","getCurrentFrame","getProgress","getFrameAt","index","AnimationController","animations","Object","create","_animationMap","Map","currentAnimation","blendTime","blendFrom","blendProgress","isTransitioning","transitionDuration","addAnimation","nameOrAnimation","maybeAnimation","animation","set","getAnimation","get","animationName","hasCurrent","rawTransition","transition","explicitDuration","blendDurationMs","getBlendFrames","current","blend","blendFactor","setSpeed","ProceduralAnimator","updateFn","entry","undefined","autoStart","elapsed","meta","dt","values","createBreathingAnimation","baseScale","intensity","asymmetry","time","phase","breathRate","currentIntensity","depthMod","asymmetryOffset","_buf","scaleX","scaleY","offsetY","chestExpansion","modulateForState","state","res","sin","breathScaleX","breathScaleY","finalScaleX","smoothFactor","exp","createBobbingAnimation","amplitude","rotation","createSquashStretch","active","trigger","progress","postFix","PI","p","squash","stretch","createWobble","frequency","damping","velocity","displacement","force","springForce","dampingForce","impulse","createAnticipation","offsetX","eased","cos","createAdvancedIK","armLength","forearmLength","stiffness","maxReach","shoulder","elbow","hand","target","targetVelocity","reach","solveIK","targetX","targetY","shoulderX","shoulderY","dx","dy","distance","sqrt","clampedDistance","scale","clampedTargetX","clampedTargetY","totalLength","elbowAngle","acos","shoulderAngle","atan2","predictedTargetX","predictedTargetY","solution","stiffnessFactor","createSecondaryMotion","segments","gravity","windStrength","anchorPoint","windTime","_segBuf","initialize","anchorX","anchorY","i","push","vx","vy","prevX","prevY","windDirection","segment","prevSegment","ratio","windX","windY","tempX","tempY","Array","applyForce","forceX","forceY","segmentIndex","forEach","createMomentumSystem","maxMomentum","momentumDecay","momentumInfluence","directionSmoothing","momentum","smoothedDirection","lastVelocity","leanAngle","bounceFactor","stretchFactor","velocityX","velocityY","isGrounded","deltaVx","deltaVy","acceleration","momentumStrength","momentumDirX","momentumDirY","momentumMagnitude","currentDirection","directionMagnitude","normalizedDir","abs","addImpulse","impulseX","impulseY","createTrailEffect","maxTrails","fadeSpeed","trails","lastPosition","currentPosition","filter","trail","alpha","shift","clear","CharacterAnimator","controller","procedural","eventSystem","eventListeners","breathing","squashStretch","wobble","anticipation","advancedIK","secondaryMotion","momentumSystem","stateName","facing","moving","attacking","blocking","rolling","hurt","jumping","doubleJumping","wallSliding","dashing","charging","dead","landing","blendFactors","idle","running","chargingAttack","targetBlendFactors","blendSpeed","hurtTimer","attackTimer","rollTimer","resetActionTimers","key","getAnimStateName","setAnimState","newState","previousState","previousStateName","emit","fromState","toState","fromStateName","toStateName","keys","position","diff","momentumData","transform","ik","Date","now","setFacing","setEventSystem","on","eventName","callback","context","has","Set","listener","once","add","off","listeners","delete","size","data","from","call","error","console","triggerHurt","timer","triggerAttack","triggerRoll","triggerBlock","releaseBlock","setMoving","isMoving","AnimationPresets","playerWalk","frameCount","frameDuration","playerRun","playerJump","wolfWalk","wolfRun","wolfAttack","createPlayerAnimations","createWolfAnimations","prowl","lunge","howl","death","packRun","createEffectAnimations","explosion","spark","projectileSpawn","projectileImpact","itemPickup","powerUp","PlayerProceduralRig","initialPose","createDefaultPose","pose","clonePose","root","pelvis","torso","head","leftArm","rightArm","leftLeg","hip","knee","foot","rightLeg","cloneSegment","result","entries","createWorkingPose","commitPose","updatedPose","toSkeleton","clamp","damp","lambda","CorePostureModule","config","maxLean","pelvisBobAmplitude","headStabilization","leanResponsiveness","bobResponsiveness","lean","pelvisOffset","breathTimer","apply","maxSpeed","normalizedTime","pelvisOverlay","fatigue","leanTarget","gaitPhase","stridePhase","bobAmplitude","fatigueDrop","bobTarget","breathOffset","LocomotionModule","strideLength","stepHeight","stanceWidth","maxStrideSpeed","phaseSpeed","lastStepPower","hypot","legLiftLeft","legLiftRight","groundOffset","speedRatio","strideRate","strideAmount","baseLeftX","baseRightX","baseY","leftPhase","rightPhase","leftLift","rightLift","leftStride","rightStride","stepPower","footContacts","left","right","CombatModule","attackReach","blockGuardHeight","swingAmplitude","currentTargets","leftHand","rightHand","playerState","locomotion","baseLeft","baseRight","targetLeft","targetRight","swing","attackStrength","handTargets","poseState","cloneChain","chain","map","point","SecondaryMotionModule","clothPoints","hairSegments","cloth","_","hair","equipment","type","wind","clothSway","hairBounce","equipmentJiggle","updateChain","sway","bounce","anchor","weapon","jiggleX","jiggleY","item","forces","previous","EnvironmentModule","windInfluence","shiverMagnitude","windResponsiveness","shiverResponsiveness","shiver","shiverPhase","targetWind","targetShiver","temperatureShiver","shiverOffset","temperature","PlayerProceduralAnimator","rig","modules","core","combat","secondary","environment","cachedTransform","skeleton","environmental","debug","buildContext","inputContext","overlay","staminaRatio","healthRatio","inputState","attackType","composeTransform","posture","base","locomotionLift","contextInput","baseTransform","AnimatedPlayer","health","maxHealth","stamina","maxStamina","_cachedHealth","_cachedStamina","rollSpeed","stateTimer","stateTime","stateDuration","_prevNormTime","_comboQueued","_currentAttackType","invulnerable","invulnerabilityTimer","jumpCount","nearWall","dashCooldown","chargeTime","maxChargeTime","params","roll","iFrameStart","iFrameEnd","staminaCost","cooldown","attackLight","activeStart","activeEnd","attackHeavy","comboWindow","start","end","parry","window","animator","setupAnimations","proceduralOptions","proceduralConfig","proceduralModules","proceduralAnimator","attackCooldown","rollCooldown","blockHeld","color","sprite","loadSpriteSheet","particleSystem","soundSystem","attackDamage","attackDamageHeavy","attackRange","attackRangeHeavy","blockDamageReduction","gaitRate","_lastFootFlag","footstepIntervalBase","pelvisY","pelvisRate","locked","debugMode","wasmModule","globalThis","wasmExports","Image","possiblePaths","currentPathIndex","tryNextPath","src","warn","onload","onerror","input","getNormalizedTime","updateIK","wasmInputManagedExternally","inputX","inputY","up","down","set_player_input","jump","lightAttack","heavyAttack","block","special","rx","get_x","ry","get_y","typeX","typeY","get_is_grounded","get_jump_count","fx","get_vel_x","fy","get_vel_y","wx","get_anim_offset_x","wy","get_anim_offset_y","wsx","get_anim_scale_x","wsy","get_anim_scale_y","wrot","get_anim_rotation","wpelvis","get_anim_pelvis_y","wasmAnimState","get_player_anim_state","setState","computePoseOverlay","get_anim_leg_lift_left","get_anim_leg_lift_right","get_anim_breathing_intensity","get_anim_fatigue_factor","windResponse","get_anim_wind_response","groundAdapt","get_anim_ground_adapt","get_anim_temperature_shiver","get_anim_cloth_sway","get_anim_hair_bounce","get_anim_equipment_jiggle","momentumX","get_anim_momentum_x","momentumY","get_anim_momentum_y","currentHealth","get_hp","get_health","currentStamina","get_stamina","proceduralTransform","currentTransform","fn","attackState","stateStartTime","rollDur","playerStateTimer","anim","isArray","coarse","startRoll","on_roll_start","dirX","dirY","rollDirection","createDustCloud","startAttack","on_attack","queueAttack","canAttack","tryRoll","dir","tryParry","on_parry","executeAttack","isHeavy","range","damage","hitboxX","hitboxY","createChargedSlash","createSlashEffect","startBlock","set_blocking","createShieldEffect","stopBlock","takeDamage","knockbackX","knockbackY","createBlockImpact","createBloodEffect","die","createDeathEffect","respawn","_x","_y","createRespawnEffect","wasmDriven","numericState","stateNameToNumber","minCost","canRoll","canBlock","render","ctx","camera","screenX","screenY","camX","camY","gameRenderer","wasmToWorld","pos","worldWidth","worldHeight","save","get_is_invulnerable","globalAlpha","frame","t","centerX","centerY","translate","rotate","renderSecondaryMotion","drawImage","renderSkeletalOverlay","restore","fillStyle","rectWidth","rectHeight","fillRect","strokeStyle","lineWidth","strokeRect","beginPath","arc","fill","barWidth","barY","healthPercent","staminaY","staminaPercent","renderDebug","_input","currentVx","playerSpeed","get_speed","w","wasmPelvis","currentVy","lf","moveTo","lineTo","stroke","currentAttackState","get_attack_state","currentAttackStateTime","get_attack_state_time","totalGameTime","get_time_seconds","norm","get_attack_windup_sec","get_attack_active_sec","get_attack_recovery_sec","get_is_rolling","getAnimationStateCode","getAnimationInfo","get_player_state_timer","proceduralData","skeletalData","lineCap","drawBone","joint","createInputFromKeys","a","arrowleft","d","arrowright","arrowup","s","arrowdown","j","k","control","l","attack","space","z","on_jump","attachDebugToggle","playerInstance","__debugToggleAttached","targetKey","toLowerCase","handler","e","addEventListener"],"mappings":"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"}